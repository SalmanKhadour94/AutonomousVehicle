
ComToPC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009964  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08009aec  08009aec  00019aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b7c  08009b7c  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08009b7c  08009b7c  00019b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b84  08009b84  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b84  08009b84  00019b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b88  08009b88  00019b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08009b8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          00001d74  200000fc  200000fc  000200fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001e70  20001e70  000200fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014dac  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003364  00000000  00000000  00034ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001130  00000000  00000000  00038240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fa8  00000000  00000000  00039370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002487e  00000000  00000000  0003a318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016176  00000000  00000000  0005eb96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc88f  00000000  00000000  00074d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014159b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000482c  00000000  00000000  001415ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009ad4 	.word	0x08009ad4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	08009ad4 	.word	0x08009ad4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295
 80009b8:	f000 b974 	b.w	8000ca4 <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9d08      	ldr	r5, [sp, #32]
 80009da:	4604      	mov	r4, r0
 80009dc:	468e      	mov	lr, r1
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d14d      	bne.n	8000a7e <__udivmoddi4+0xaa>
 80009e2:	428a      	cmp	r2, r1
 80009e4:	4694      	mov	ip, r2
 80009e6:	d969      	bls.n	8000abc <__udivmoddi4+0xe8>
 80009e8:	fab2 f282 	clz	r2, r2
 80009ec:	b152      	cbz	r2, 8000a04 <__udivmoddi4+0x30>
 80009ee:	fa01 f302 	lsl.w	r3, r1, r2
 80009f2:	f1c2 0120 	rsb	r1, r2, #32
 80009f6:	fa20 f101 	lsr.w	r1, r0, r1
 80009fa:	fa0c fc02 	lsl.w	ip, ip, r2
 80009fe:	ea41 0e03 	orr.w	lr, r1, r3
 8000a02:	4094      	lsls	r4, r2
 8000a04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a08:	0c21      	lsrs	r1, r4, #16
 8000a0a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a0e:	fa1f f78c 	uxth.w	r7, ip
 8000a12:	fb08 e316 	mls	r3, r8, r6, lr
 8000a16:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a1a:	fb06 f107 	mul.w	r1, r6, r7
 8000a1e:	4299      	cmp	r1, r3
 8000a20:	d90a      	bls.n	8000a38 <__udivmoddi4+0x64>
 8000a22:	eb1c 0303 	adds.w	r3, ip, r3
 8000a26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a2a:	f080 811f 	bcs.w	8000c6c <__udivmoddi4+0x298>
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	f240 811c 	bls.w	8000c6c <__udivmoddi4+0x298>
 8000a34:	3e02      	subs	r6, #2
 8000a36:	4463      	add	r3, ip
 8000a38:	1a5b      	subs	r3, r3, r1
 8000a3a:	b2a4      	uxth	r4, r4
 8000a3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a40:	fb08 3310 	mls	r3, r8, r0, r3
 8000a44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a48:	fb00 f707 	mul.w	r7, r0, r7
 8000a4c:	42a7      	cmp	r7, r4
 8000a4e:	d90a      	bls.n	8000a66 <__udivmoddi4+0x92>
 8000a50:	eb1c 0404 	adds.w	r4, ip, r4
 8000a54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a58:	f080 810a 	bcs.w	8000c70 <__udivmoddi4+0x29c>
 8000a5c:	42a7      	cmp	r7, r4
 8000a5e:	f240 8107 	bls.w	8000c70 <__udivmoddi4+0x29c>
 8000a62:	4464      	add	r4, ip
 8000a64:	3802      	subs	r0, #2
 8000a66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a6a:	1be4      	subs	r4, r4, r7
 8000a6c:	2600      	movs	r6, #0
 8000a6e:	b11d      	cbz	r5, 8000a78 <__udivmoddi4+0xa4>
 8000a70:	40d4      	lsrs	r4, r2
 8000a72:	2300      	movs	r3, #0
 8000a74:	e9c5 4300 	strd	r4, r3, [r5]
 8000a78:	4631      	mov	r1, r6
 8000a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7e:	428b      	cmp	r3, r1
 8000a80:	d909      	bls.n	8000a96 <__udivmoddi4+0xc2>
 8000a82:	2d00      	cmp	r5, #0
 8000a84:	f000 80ef 	beq.w	8000c66 <__udivmoddi4+0x292>
 8000a88:	2600      	movs	r6, #0
 8000a8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000a8e:	4630      	mov	r0, r6
 8000a90:	4631      	mov	r1, r6
 8000a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a96:	fab3 f683 	clz	r6, r3
 8000a9a:	2e00      	cmp	r6, #0
 8000a9c:	d14a      	bne.n	8000b34 <__udivmoddi4+0x160>
 8000a9e:	428b      	cmp	r3, r1
 8000aa0:	d302      	bcc.n	8000aa8 <__udivmoddi4+0xd4>
 8000aa2:	4282      	cmp	r2, r0
 8000aa4:	f200 80f9 	bhi.w	8000c9a <__udivmoddi4+0x2c6>
 8000aa8:	1a84      	subs	r4, r0, r2
 8000aaa:	eb61 0303 	sbc.w	r3, r1, r3
 8000aae:	2001      	movs	r0, #1
 8000ab0:	469e      	mov	lr, r3
 8000ab2:	2d00      	cmp	r5, #0
 8000ab4:	d0e0      	beq.n	8000a78 <__udivmoddi4+0xa4>
 8000ab6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000aba:	e7dd      	b.n	8000a78 <__udivmoddi4+0xa4>
 8000abc:	b902      	cbnz	r2, 8000ac0 <__udivmoddi4+0xec>
 8000abe:	deff      	udf	#255	; 0xff
 8000ac0:	fab2 f282 	clz	r2, r2
 8000ac4:	2a00      	cmp	r2, #0
 8000ac6:	f040 8092 	bne.w	8000bee <__udivmoddi4+0x21a>
 8000aca:	eba1 010c 	sub.w	r1, r1, ip
 8000ace:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ad2:	fa1f fe8c 	uxth.w	lr, ip
 8000ad6:	2601      	movs	r6, #1
 8000ad8:	0c20      	lsrs	r0, r4, #16
 8000ada:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ade:	fb07 1113 	mls	r1, r7, r3, r1
 8000ae2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ae6:	fb0e f003 	mul.w	r0, lr, r3
 8000aea:	4288      	cmp	r0, r1
 8000aec:	d908      	bls.n	8000b00 <__udivmoddi4+0x12c>
 8000aee:	eb1c 0101 	adds.w	r1, ip, r1
 8000af2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000af6:	d202      	bcs.n	8000afe <__udivmoddi4+0x12a>
 8000af8:	4288      	cmp	r0, r1
 8000afa:	f200 80cb 	bhi.w	8000c94 <__udivmoddi4+0x2c0>
 8000afe:	4643      	mov	r3, r8
 8000b00:	1a09      	subs	r1, r1, r0
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b08:	fb07 1110 	mls	r1, r7, r0, r1
 8000b0c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b10:	fb0e fe00 	mul.w	lr, lr, r0
 8000b14:	45a6      	cmp	lr, r4
 8000b16:	d908      	bls.n	8000b2a <__udivmoddi4+0x156>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b20:	d202      	bcs.n	8000b28 <__udivmoddi4+0x154>
 8000b22:	45a6      	cmp	lr, r4
 8000b24:	f200 80bb 	bhi.w	8000c9e <__udivmoddi4+0x2ca>
 8000b28:	4608      	mov	r0, r1
 8000b2a:	eba4 040e 	sub.w	r4, r4, lr
 8000b2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b32:	e79c      	b.n	8000a6e <__udivmoddi4+0x9a>
 8000b34:	f1c6 0720 	rsb	r7, r6, #32
 8000b38:	40b3      	lsls	r3, r6
 8000b3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b42:	fa20 f407 	lsr.w	r4, r0, r7
 8000b46:	fa01 f306 	lsl.w	r3, r1, r6
 8000b4a:	431c      	orrs	r4, r3
 8000b4c:	40f9      	lsrs	r1, r7
 8000b4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b52:	fa00 f306 	lsl.w	r3, r0, r6
 8000b56:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b5a:	0c20      	lsrs	r0, r4, #16
 8000b5c:	fa1f fe8c 	uxth.w	lr, ip
 8000b60:	fb09 1118 	mls	r1, r9, r8, r1
 8000b64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b68:	fb08 f00e 	mul.w	r0, r8, lr
 8000b6c:	4288      	cmp	r0, r1
 8000b6e:	fa02 f206 	lsl.w	r2, r2, r6
 8000b72:	d90b      	bls.n	8000b8c <__udivmoddi4+0x1b8>
 8000b74:	eb1c 0101 	adds.w	r1, ip, r1
 8000b78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b7c:	f080 8088 	bcs.w	8000c90 <__udivmoddi4+0x2bc>
 8000b80:	4288      	cmp	r0, r1
 8000b82:	f240 8085 	bls.w	8000c90 <__udivmoddi4+0x2bc>
 8000b86:	f1a8 0802 	sub.w	r8, r8, #2
 8000b8a:	4461      	add	r1, ip
 8000b8c:	1a09      	subs	r1, r1, r0
 8000b8e:	b2a4      	uxth	r4, r4
 8000b90:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b94:	fb09 1110 	mls	r1, r9, r0, r1
 8000b98:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ba0:	458e      	cmp	lr, r1
 8000ba2:	d908      	bls.n	8000bb6 <__udivmoddi4+0x1e2>
 8000ba4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bac:	d26c      	bcs.n	8000c88 <__udivmoddi4+0x2b4>
 8000bae:	458e      	cmp	lr, r1
 8000bb0:	d96a      	bls.n	8000c88 <__udivmoddi4+0x2b4>
 8000bb2:	3802      	subs	r0, #2
 8000bb4:	4461      	add	r1, ip
 8000bb6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bba:	fba0 9402 	umull	r9, r4, r0, r2
 8000bbe:	eba1 010e 	sub.w	r1, r1, lr
 8000bc2:	42a1      	cmp	r1, r4
 8000bc4:	46c8      	mov	r8, r9
 8000bc6:	46a6      	mov	lr, r4
 8000bc8:	d356      	bcc.n	8000c78 <__udivmoddi4+0x2a4>
 8000bca:	d053      	beq.n	8000c74 <__udivmoddi4+0x2a0>
 8000bcc:	b15d      	cbz	r5, 8000be6 <__udivmoddi4+0x212>
 8000bce:	ebb3 0208 	subs.w	r2, r3, r8
 8000bd2:	eb61 010e 	sbc.w	r1, r1, lr
 8000bd6:	fa01 f707 	lsl.w	r7, r1, r7
 8000bda:	fa22 f306 	lsr.w	r3, r2, r6
 8000bde:	40f1      	lsrs	r1, r6
 8000be0:	431f      	orrs	r7, r3
 8000be2:	e9c5 7100 	strd	r7, r1, [r5]
 8000be6:	2600      	movs	r6, #0
 8000be8:	4631      	mov	r1, r6
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	f1c2 0320 	rsb	r3, r2, #32
 8000bf2:	40d8      	lsrs	r0, r3
 8000bf4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bf8:	fa21 f303 	lsr.w	r3, r1, r3
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4301      	orrs	r1, r0
 8000c00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c04:	fa1f fe8c 	uxth.w	lr, ip
 8000c08:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c0c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c10:	0c0b      	lsrs	r3, r1, #16
 8000c12:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c16:	fb00 f60e 	mul.w	r6, r0, lr
 8000c1a:	429e      	cmp	r6, r3
 8000c1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c20:	d908      	bls.n	8000c34 <__udivmoddi4+0x260>
 8000c22:	eb1c 0303 	adds.w	r3, ip, r3
 8000c26:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c2a:	d22f      	bcs.n	8000c8c <__udivmoddi4+0x2b8>
 8000c2c:	429e      	cmp	r6, r3
 8000c2e:	d92d      	bls.n	8000c8c <__udivmoddi4+0x2b8>
 8000c30:	3802      	subs	r0, #2
 8000c32:	4463      	add	r3, ip
 8000c34:	1b9b      	subs	r3, r3, r6
 8000c36:	b289      	uxth	r1, r1
 8000c38:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c3c:	fb07 3316 	mls	r3, r7, r6, r3
 8000c40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c44:	fb06 f30e 	mul.w	r3, r6, lr
 8000c48:	428b      	cmp	r3, r1
 8000c4a:	d908      	bls.n	8000c5e <__udivmoddi4+0x28a>
 8000c4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c50:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c54:	d216      	bcs.n	8000c84 <__udivmoddi4+0x2b0>
 8000c56:	428b      	cmp	r3, r1
 8000c58:	d914      	bls.n	8000c84 <__udivmoddi4+0x2b0>
 8000c5a:	3e02      	subs	r6, #2
 8000c5c:	4461      	add	r1, ip
 8000c5e:	1ac9      	subs	r1, r1, r3
 8000c60:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c64:	e738      	b.n	8000ad8 <__udivmoddi4+0x104>
 8000c66:	462e      	mov	r6, r5
 8000c68:	4628      	mov	r0, r5
 8000c6a:	e705      	b.n	8000a78 <__udivmoddi4+0xa4>
 8000c6c:	4606      	mov	r6, r0
 8000c6e:	e6e3      	b.n	8000a38 <__udivmoddi4+0x64>
 8000c70:	4618      	mov	r0, r3
 8000c72:	e6f8      	b.n	8000a66 <__udivmoddi4+0x92>
 8000c74:	454b      	cmp	r3, r9
 8000c76:	d2a9      	bcs.n	8000bcc <__udivmoddi4+0x1f8>
 8000c78:	ebb9 0802 	subs.w	r8, r9, r2
 8000c7c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c80:	3801      	subs	r0, #1
 8000c82:	e7a3      	b.n	8000bcc <__udivmoddi4+0x1f8>
 8000c84:	4646      	mov	r6, r8
 8000c86:	e7ea      	b.n	8000c5e <__udivmoddi4+0x28a>
 8000c88:	4620      	mov	r0, r4
 8000c8a:	e794      	b.n	8000bb6 <__udivmoddi4+0x1e2>
 8000c8c:	4640      	mov	r0, r8
 8000c8e:	e7d1      	b.n	8000c34 <__udivmoddi4+0x260>
 8000c90:	46d0      	mov	r8, sl
 8000c92:	e77b      	b.n	8000b8c <__udivmoddi4+0x1b8>
 8000c94:	3b02      	subs	r3, #2
 8000c96:	4461      	add	r1, ip
 8000c98:	e732      	b.n	8000b00 <__udivmoddi4+0x12c>
 8000c9a:	4630      	mov	r0, r6
 8000c9c:	e709      	b.n	8000ab2 <__udivmoddi4+0xde>
 8000c9e:	4464      	add	r4, ip
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	e742      	b.n	8000b2a <__udivmoddi4+0x156>

08000ca4 <__aeabi_idiv0>:
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cac:	f000 ff50 	bl	8001b50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cb0:	f000 f8c6 	bl	8000e40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cb4:	f000 faea 	bl	800128c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000cb8:	f008 f96a 	bl	8008f90 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000cbc:	f000 f92a 	bl	8000f14 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000cc0:	f000 f99c 	bl	8000ffc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000cc4:	f000 f9e6 	bl	8001094 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000cc8:	f000 fa5a 	bl	8001180 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4857      	ldr	r0, [pc, #348]	; (8000e2c <main+0x184>)
 8000cd0:	f003 fbbc 	bl	800444c <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4856      	ldr	r0, [pc, #344]	; (8000e30 <main+0x188>)
 8000cd8:	f003 fa96 	bl	8004208 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4855      	ldr	r0, [pc, #340]	; (8000e34 <main+0x18c>)
 8000ce0:	f003 fa92 	bl	8004208 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000ce4:	2104      	movs	r1, #4
 8000ce6:	4853      	ldr	r0, [pc, #332]	; (8000e34 <main+0x18c>)
 8000ce8:	f003 fa8e 	bl	8004208 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim2);
 8000cec:	4852      	ldr	r0, [pc, #328]	; (8000e38 <main+0x190>)
 8000cee:	f003 f9c9 	bl	8004084 <HAL_TIM_Base_Start>
  HAL_Delay(6000);
 8000cf2:	f241 7070 	movw	r0, #6000	; 0x1770
 8000cf6:	f000 ff9d 	bl	8001c34 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Look(Forward);
 8000cfa:	2002      	movs	r0, #2
 8000cfc:	f000 fbfe 	bl	80014fc <Look>
	  Go(Forward);
 8000d00:	2002      	movs	r0, #2
 8000d02:	f000 fb61 	bl	80013c8 <Go>
	  TriggerHCSR04();
 8000d06:	f000 fc29 	bl	800155c <TriggerHCSR04>
	  /*
	   * The vehicle should go forward unless there is obstacle closer than 20cm ahead
	   */
	  if(sensor1.Distance <=20)
 8000d0a:	4b4c      	ldr	r3, [pc, #304]	; (8000e3c <main+0x194>)
 8000d0c:	7b5b      	ldrb	r3, [r3, #13]
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	2b14      	cmp	r3, #20
 8000d12:	d8f2      	bhi.n	8000cfa <main+0x52>
	  {
		  Stop();
 8000d14:	f000 fbe0 	bl	80014d8 <Stop>
		  ScanSurroundings();
 8000d18:	f000 fc48 	bl	80015ac <ScanSurroundings>
		  if(sensor1.DistanceAround[Forward]<=15)
 8000d1c:	4b47      	ldr	r3, [pc, #284]	; (8000e3c <main+0x194>)
 8000d1e:	7c1b      	ldrb	r3, [r3, #16]
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	2b0f      	cmp	r3, #15
 8000d24:	d80a      	bhi.n	8000d3c <main+0x94>
		  {
			  Go(Backwards);
 8000d26:	2003      	movs	r0, #3
 8000d28:	f000 fb4e 	bl	80013c8 <Go>
			  HAL_Delay(500);
 8000d2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d30:	f000 ff80 	bl	8001c34 <HAL_Delay>
			  Stop();
 8000d34:	f000 fbd0 	bl	80014d8 <Stop>
			  ScanSurroundings();
 8000d38:	f000 fc38 	bl	80015ac <ScanSurroundings>
		  }
		  if(sensor1.DistanceAround[Forward]>sensor1.DistanceAround[Right] && sensor1.DistanceAround[Forward]>sensor1.DistanceAround[Left] && sensor1.DistanceAround[Forward]>=40)
 8000d3c:	4b3f      	ldr	r3, [pc, #252]	; (8000e3c <main+0x194>)
 8000d3e:	7c1b      	ldrb	r3, [r3, #16]
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	4b3e      	ldr	r3, [pc, #248]	; (8000e3c <main+0x194>)
 8000d44:	7b9b      	ldrb	r3, [r3, #14]
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d91a      	bls.n	8000d82 <main+0xda>
 8000d4c:	4b3b      	ldr	r3, [pc, #236]	; (8000e3c <main+0x194>)
 8000d4e:	7c1b      	ldrb	r3, [r3, #16]
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	4b3a      	ldr	r3, [pc, #232]	; (8000e3c <main+0x194>)
 8000d54:	7bdb      	ldrb	r3, [r3, #15]
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d912      	bls.n	8000d82 <main+0xda>
 8000d5c:	4b37      	ldr	r3, [pc, #220]	; (8000e3c <main+0x194>)
 8000d5e:	7c1b      	ldrb	r3, [r3, #16]
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	2b27      	cmp	r3, #39	; 0x27
 8000d64:	d90d      	bls.n	8000d82 <main+0xda>
		  {
			  HAL_Delay(1000);
 8000d66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d6a:	f000 ff63 	bl	8001c34 <HAL_Delay>
			  Look(Forward);
 8000d6e:	2002      	movs	r0, #2
 8000d70:	f000 fbc4 	bl	80014fc <Look>
			  TriggerHCSR04();
 8000d74:	f000 fbf2 	bl	800155c <TriggerHCSR04>
			  HAL_Delay(500);
 8000d78:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d7c:	f000 ff5a 	bl	8001c34 <HAL_Delay>
			  continue;
 8000d80:	e052      	b.n	8000e28 <main+0x180>
		  }

		  if(sensor1.DistanceAround[Right]<sensor1.DistanceAround[Left] && sensor1.DistanceAround[Left]>=25)
 8000d82:	4b2e      	ldr	r3, [pc, #184]	; (8000e3c <main+0x194>)
 8000d84:	7b9b      	ldrb	r3, [r3, #14]
 8000d86:	b2da      	uxtb	r2, r3
 8000d88:	4b2c      	ldr	r3, [pc, #176]	; (8000e3c <main+0x194>)
 8000d8a:	7bdb      	ldrb	r3, [r3, #15]
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d215      	bcs.n	8000dbe <main+0x116>
 8000d92:	4b2a      	ldr	r3, [pc, #168]	; (8000e3c <main+0x194>)
 8000d94:	7bdb      	ldrb	r3, [r3, #15]
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	2b18      	cmp	r3, #24
 8000d9a:	d910      	bls.n	8000dbe <main+0x116>
		  {
			  Go(Left);
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	f000 fb13 	bl	80013c8 <Go>
			  HAL_Delay(1000);
 8000da2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000da6:	f000 ff45 	bl	8001c34 <HAL_Delay>
			  Look(Forward);
 8000daa:	2002      	movs	r0, #2
 8000dac:	f000 fba6 	bl	80014fc <Look>
			  TriggerHCSR04();
 8000db0:	f000 fbd4 	bl	800155c <TriggerHCSR04>
			  HAL_Delay(500);
 8000db4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000db8:	f000 ff3c 	bl	8001c34 <HAL_Delay>
			  continue;
 8000dbc:	e034      	b.n	8000e28 <main+0x180>
		  }
		  if(sensor1.DistanceAround[Right]>=sensor1.DistanceAround[Left] && sensor1.DistanceAround[Right]>=25)
 8000dbe:	4b1f      	ldr	r3, [pc, #124]	; (8000e3c <main+0x194>)
 8000dc0:	7b9b      	ldrb	r3, [r3, #14]
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	4b1d      	ldr	r3, [pc, #116]	; (8000e3c <main+0x194>)
 8000dc6:	7bdb      	ldrb	r3, [r3, #15]
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d315      	bcc.n	8000dfa <main+0x152>
 8000dce:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <main+0x194>)
 8000dd0:	7b9b      	ldrb	r3, [r3, #14]
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	2b18      	cmp	r3, #24
 8000dd6:	d910      	bls.n	8000dfa <main+0x152>
		  {
			  Go(Right);
 8000dd8:	2000      	movs	r0, #0
 8000dda:	f000 faf5 	bl	80013c8 <Go>
			  HAL_Delay(1000);
 8000dde:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000de2:	f000 ff27 	bl	8001c34 <HAL_Delay>
			  Look(Forward);
 8000de6:	2002      	movs	r0, #2
 8000de8:	f000 fb88 	bl	80014fc <Look>
			  TriggerHCSR04();
 8000dec:	f000 fbb6 	bl	800155c <TriggerHCSR04>
			  HAL_Delay(500);
 8000df0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000df4:	f000 ff1e 	bl	8001c34 <HAL_Delay>
			  continue;
 8000df8:	e016      	b.n	8000e28 <main+0x180>
		  }
		  else
		  {
			  Go(Backwards);
 8000dfa:	2003      	movs	r0, #3
 8000dfc:	f000 fae4 	bl	80013c8 <Go>
			  HAL_Delay(500);
 8000e00:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e04:	f000 ff16 	bl	8001c34 <HAL_Delay>
			  Stop();
 8000e08:	f000 fb66 	bl	80014d8 <Stop>
			  HAL_Delay(1000);
 8000e0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e10:	f000 ff10 	bl	8001c34 <HAL_Delay>
			  Look(Forward);
 8000e14:	2002      	movs	r0, #2
 8000e16:	f000 fb71 	bl	80014fc <Look>
			  TriggerHCSR04();
 8000e1a:	f000 fb9f 	bl	800155c <TriggerHCSR04>
			  HAL_Delay(500);
 8000e1e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e22:	f000 ff07 	bl	8001c34 <HAL_Delay>
			  continue;
 8000e26:	bf00      	nop
	  Look(Forward);
 8000e28:	e767      	b.n	8000cfa <main+0x52>
 8000e2a:	bf00      	nop
 8000e2c:	20000118 	.word	0x20000118
 8000e30:	200001a8 	.word	0x200001a8
 8000e34:	200001f0 	.word	0x200001f0
 8000e38:	20000160 	.word	0x20000160
 8000e3c:	20000238 	.word	0x20000238

08000e40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b094      	sub	sp, #80	; 0x50
 8000e44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e46:	f107 0320 	add.w	r3, r7, #32
 8000e4a:	2230      	movs	r2, #48	; 0x30
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f008 fdf6 	bl	8009a40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e54:	f107 030c 	add.w	r3, r7, #12
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e64:	2300      	movs	r3, #0
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	4b28      	ldr	r3, [pc, #160]	; (8000f0c <SystemClock_Config+0xcc>)
 8000e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6c:	4a27      	ldr	r2, [pc, #156]	; (8000f0c <SystemClock_Config+0xcc>)
 8000e6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e72:	6413      	str	r3, [r2, #64]	; 0x40
 8000e74:	4b25      	ldr	r3, [pc, #148]	; (8000f0c <SystemClock_Config+0xcc>)
 8000e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7c:	60bb      	str	r3, [r7, #8]
 8000e7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e80:	2300      	movs	r3, #0
 8000e82:	607b      	str	r3, [r7, #4]
 8000e84:	4b22      	ldr	r3, [pc, #136]	; (8000f10 <SystemClock_Config+0xd0>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a21      	ldr	r2, [pc, #132]	; (8000f10 <SystemClock_Config+0xd0>)
 8000e8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e8e:	6013      	str	r3, [r2, #0]
 8000e90:	4b1f      	ldr	r3, [pc, #124]	; (8000f10 <SystemClock_Config+0xd0>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e98:	607b      	str	r3, [r7, #4]
 8000e9a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ea0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ea4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eaa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000eae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000eb0:	2304      	movs	r3, #4
 8000eb2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000eb4:	23a8      	movs	r3, #168	; 0xa8
 8000eb6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ebc:	2307      	movs	r3, #7
 8000ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec0:	f107 0320 	add.w	r3, r7, #32
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f002 fc1d 	bl	8003704 <HAL_RCC_OscConfig>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ed0:	f000 fa74 	bl	80013bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ed4:	230f      	movs	r3, #15
 8000ed6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ee0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ee4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ee6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000eec:	f107 030c 	add.w	r3, r7, #12
 8000ef0:	2105      	movs	r1, #5
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f002 fe7e 	bl	8003bf4 <HAL_RCC_ClockConfig>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000efe:	f000 fa5d 	bl	80013bc <Error_Handler>
  }
}
 8000f02:	bf00      	nop
 8000f04:	3750      	adds	r7, #80	; 0x50
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40023800 	.word	0x40023800
 8000f10:	40007000 	.word	0x40007000

08000f14 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08a      	sub	sp, #40	; 0x28
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f1a:	f107 0318 	add.w	r3, r7, #24
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]
 8000f26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f28:	f107 0310 	add.w	r3, r7, #16
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f32:	463b      	mov	r3, r7
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f3e:	4b2d      	ldr	r3, [pc, #180]	; (8000ff4 <MX_TIM1_Init+0xe0>)
 8000f40:	4a2d      	ldr	r2, [pc, #180]	; (8000ff8 <MX_TIM1_Init+0xe4>)
 8000f42:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8000f44:	4b2b      	ldr	r3, [pc, #172]	; (8000ff4 <MX_TIM1_Init+0xe0>)
 8000f46:	22a7      	movs	r2, #167	; 0xa7
 8000f48:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f4a:	4b2a      	ldr	r3, [pc, #168]	; (8000ff4 <MX_TIM1_Init+0xe0>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f50:	4b28      	ldr	r3, [pc, #160]	; (8000ff4 <MX_TIM1_Init+0xe0>)
 8000f52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f56:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f58:	4b26      	ldr	r3, [pc, #152]	; (8000ff4 <MX_TIM1_Init+0xe0>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f5e:	4b25      	ldr	r3, [pc, #148]	; (8000ff4 <MX_TIM1_Init+0xe0>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f64:	4b23      	ldr	r3, [pc, #140]	; (8000ff4 <MX_TIM1_Init+0xe0>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f6a:	4822      	ldr	r0, [pc, #136]	; (8000ff4 <MX_TIM1_Init+0xe0>)
 8000f6c:	f003 f83a 	bl	8003fe4 <HAL_TIM_Base_Init>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8000f76:	f000 fa21 	bl	80013bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f7e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f80:	f107 0318 	add.w	r3, r7, #24
 8000f84:	4619      	mov	r1, r3
 8000f86:	481b      	ldr	r0, [pc, #108]	; (8000ff4 <MX_TIM1_Init+0xe0>)
 8000f88:	f003 fdee 	bl	8004b68 <HAL_TIM_ConfigClockSource>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000f92:	f000 fa13 	bl	80013bc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000f96:	4817      	ldr	r0, [pc, #92]	; (8000ff4 <MX_TIM1_Init+0xe0>)
 8000f98:	f003 f9fe 	bl	8004398 <HAL_TIM_IC_Init>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000fa2:	f000 fa0b 	bl	80013bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fae:	f107 0310 	add.w	r3, r7, #16
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	480f      	ldr	r0, [pc, #60]	; (8000ff4 <MX_TIM1_Init+0xe0>)
 8000fb6:	f004 fb45 	bl	8005644 <HAL_TIMEx_MasterConfigSynchronization>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8000fc0:	f000 f9fc 	bl	80013bc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000fd4:	463b      	mov	r3, r7
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4806      	ldr	r0, [pc, #24]	; (8000ff4 <MX_TIM1_Init+0xe0>)
 8000fdc:	f003 fc66 	bl	80048ac <HAL_TIM_IC_ConfigChannel>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000fe6:	f000 f9e9 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000fea:	bf00      	nop
 8000fec:	3728      	adds	r7, #40	; 0x28
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000118 	.word	0x20000118
 8000ff8:	40010000 	.word	0x40010000

08000ffc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001002:	f107 0308 	add.w	r3, r7, #8
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
 800100c:	609a      	str	r2, [r3, #8]
 800100e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001010:	463b      	mov	r3, r7
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001018:	4b1d      	ldr	r3, [pc, #116]	; (8001090 <MX_TIM2_Init+0x94>)
 800101a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800101e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8001020:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <MX_TIM2_Init+0x94>)
 8001022:	2253      	movs	r2, #83	; 0x53
 8001024:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001026:	4b1a      	ldr	r3, [pc, #104]	; (8001090 <MX_TIM2_Init+0x94>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800102c:	4b18      	ldr	r3, [pc, #96]	; (8001090 <MX_TIM2_Init+0x94>)
 800102e:	f04f 32ff 	mov.w	r2, #4294967295
 8001032:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001034:	4b16      	ldr	r3, [pc, #88]	; (8001090 <MX_TIM2_Init+0x94>)
 8001036:	2200      	movs	r2, #0
 8001038:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800103a:	4b15      	ldr	r3, [pc, #84]	; (8001090 <MX_TIM2_Init+0x94>)
 800103c:	2280      	movs	r2, #128	; 0x80
 800103e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001040:	4813      	ldr	r0, [pc, #76]	; (8001090 <MX_TIM2_Init+0x94>)
 8001042:	f002 ffcf 	bl	8003fe4 <HAL_TIM_Base_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800104c:	f000 f9b6 	bl	80013bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001050:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001054:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001056:	f107 0308 	add.w	r3, r7, #8
 800105a:	4619      	mov	r1, r3
 800105c:	480c      	ldr	r0, [pc, #48]	; (8001090 <MX_TIM2_Init+0x94>)
 800105e:	f003 fd83 	bl	8004b68 <HAL_TIM_ConfigClockSource>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001068:	f000 f9a8 	bl	80013bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800106c:	2300      	movs	r3, #0
 800106e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001070:	2300      	movs	r3, #0
 8001072:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001074:	463b      	mov	r3, r7
 8001076:	4619      	mov	r1, r3
 8001078:	4805      	ldr	r0, [pc, #20]	; (8001090 <MX_TIM2_Init+0x94>)
 800107a:	f004 fae3 	bl	8005644 <HAL_TIMEx_MasterConfigSynchronization>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001084:	f000 f99a 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	3718      	adds	r7, #24
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000160 	.word	0x20000160

08001094 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08e      	sub	sp, #56	; 0x38
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800109a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a8:	f107 0320 	add.w	r3, r7, #32
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
 80010c0:	615a      	str	r2, [r3, #20]
 80010c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010c4:	4b2c      	ldr	r3, [pc, #176]	; (8001178 <MX_TIM3_Init+0xe4>)
 80010c6:	4a2d      	ldr	r2, [pc, #180]	; (800117c <MX_TIM3_Init+0xe8>)
 80010c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 80010ca:	4b2b      	ldr	r3, [pc, #172]	; (8001178 <MX_TIM3_Init+0xe4>)
 80010cc:	2253      	movs	r2, #83	; 0x53
 80010ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d0:	4b29      	ldr	r3, [pc, #164]	; (8001178 <MX_TIM3_Init+0xe4>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 80010d6:	4b28      	ldr	r3, [pc, #160]	; (8001178 <MX_TIM3_Init+0xe4>)
 80010d8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80010dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010de:	4b26      	ldr	r3, [pc, #152]	; (8001178 <MX_TIM3_Init+0xe4>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e4:	4b24      	ldr	r3, [pc, #144]	; (8001178 <MX_TIM3_Init+0xe4>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010ea:	4823      	ldr	r0, [pc, #140]	; (8001178 <MX_TIM3_Init+0xe4>)
 80010ec:	f002 ff7a 	bl	8003fe4 <HAL_TIM_Base_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80010f6:	f000 f961 	bl	80013bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010fe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001100:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001104:	4619      	mov	r1, r3
 8001106:	481c      	ldr	r0, [pc, #112]	; (8001178 <MX_TIM3_Init+0xe4>)
 8001108:	f003 fd2e 	bl	8004b68 <HAL_TIM_ConfigClockSource>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001112:	f000 f953 	bl	80013bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001116:	4818      	ldr	r0, [pc, #96]	; (8001178 <MX_TIM3_Init+0xe4>)
 8001118:	f003 f81c 	bl	8004154 <HAL_TIM_PWM_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001122:	f000 f94b 	bl	80013bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001126:	2300      	movs	r3, #0
 8001128:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800112a:	2300      	movs	r3, #0
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800112e:	f107 0320 	add.w	r3, r7, #32
 8001132:	4619      	mov	r1, r3
 8001134:	4810      	ldr	r0, [pc, #64]	; (8001178 <MX_TIM3_Init+0xe4>)
 8001136:	f004 fa85 	bl	8005644 <HAL_TIMEx_MasterConfigSynchronization>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001140:	f000 f93c 	bl	80013bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001144:	2360      	movs	r3, #96	; 0x60
 8001146:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800114c:	2300      	movs	r3, #0
 800114e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	2200      	movs	r2, #0
 8001158:	4619      	mov	r1, r3
 800115a:	4807      	ldr	r0, [pc, #28]	; (8001178 <MX_TIM3_Init+0xe4>)
 800115c:	f003 fc42 	bl	80049e4 <HAL_TIM_PWM_ConfigChannel>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001166:	f000 f929 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800116a:	4803      	ldr	r0, [pc, #12]	; (8001178 <MX_TIM3_Init+0xe4>)
 800116c:	f000 fc14 	bl	8001998 <HAL_TIM_MspPostInit>

}
 8001170:	bf00      	nop
 8001172:	3738      	adds	r7, #56	; 0x38
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	200001a8 	.word	0x200001a8
 800117c:	40000400 	.word	0x40000400

08001180 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08e      	sub	sp, #56	; 0x38
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001186:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	609a      	str	r2, [r3, #8]
 8001192:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001194:	f107 0320 	add.w	r3, r7, #32
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
 80011ac:	615a      	str	r2, [r3, #20]
 80011ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011b0:	4b34      	ldr	r3, [pc, #208]	; (8001284 <MX_TIM4_Init+0x104>)
 80011b2:	4a35      	ldr	r2, [pc, #212]	; (8001288 <MX_TIM4_Init+0x108>)
 80011b4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 3;
 80011b6:	4b33      	ldr	r3, [pc, #204]	; (8001284 <MX_TIM4_Init+0x104>)
 80011b8:	2203      	movs	r2, #3
 80011ba:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011bc:	4b31      	ldr	r3, [pc, #196]	; (8001284 <MX_TIM4_Init+0x104>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2099;
 80011c2:	4b30      	ldr	r3, [pc, #192]	; (8001284 <MX_TIM4_Init+0x104>)
 80011c4:	f640 0233 	movw	r2, #2099	; 0x833
 80011c8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ca:	4b2e      	ldr	r3, [pc, #184]	; (8001284 <MX_TIM4_Init+0x104>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011d0:	4b2c      	ldr	r3, [pc, #176]	; (8001284 <MX_TIM4_Init+0x104>)
 80011d2:	2280      	movs	r2, #128	; 0x80
 80011d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80011d6:	482b      	ldr	r0, [pc, #172]	; (8001284 <MX_TIM4_Init+0x104>)
 80011d8:	f002 ff04 	bl	8003fe4 <HAL_TIM_Base_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80011e2:	f000 f8eb 	bl	80013bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ea:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80011ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011f0:	4619      	mov	r1, r3
 80011f2:	4824      	ldr	r0, [pc, #144]	; (8001284 <MX_TIM4_Init+0x104>)
 80011f4:	f003 fcb8 	bl	8004b68 <HAL_TIM_ConfigClockSource>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80011fe:	f000 f8dd 	bl	80013bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001202:	4820      	ldr	r0, [pc, #128]	; (8001284 <MX_TIM4_Init+0x104>)
 8001204:	f002 ffa6 	bl	8004154 <HAL_TIM_PWM_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800120e:	f000 f8d5 	bl	80013bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001212:	2300      	movs	r3, #0
 8001214:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001216:	2300      	movs	r3, #0
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800121a:	f107 0320 	add.w	r3, r7, #32
 800121e:	4619      	mov	r1, r3
 8001220:	4818      	ldr	r0, [pc, #96]	; (8001284 <MX_TIM4_Init+0x104>)
 8001222:	f004 fa0f 	bl	8005644 <HAL_TIMEx_MasterConfigSynchronization>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800122c:	f000 f8c6 	bl	80013bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001230:	2360      	movs	r3, #96	; 0x60
 8001232:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1049;
 8001234:	f240 4319 	movw	r3, #1049	; 0x419
 8001238:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001242:	1d3b      	adds	r3, r7, #4
 8001244:	2200      	movs	r2, #0
 8001246:	4619      	mov	r1, r3
 8001248:	480e      	ldr	r0, [pc, #56]	; (8001284 <MX_TIM4_Init+0x104>)
 800124a:	f003 fbcb 	bl	80049e4 <HAL_TIM_PWM_ConfigChannel>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001254:	f000 f8b2 	bl	80013bc <Error_Handler>
  }
  sConfigOC.Pulse = 1259;
 8001258:	f240 43eb 	movw	r3, #1259	; 0x4eb
 800125c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	2204      	movs	r2, #4
 8001262:	4619      	mov	r1, r3
 8001264:	4807      	ldr	r0, [pc, #28]	; (8001284 <MX_TIM4_Init+0x104>)
 8001266:	f003 fbbd 	bl	80049e4 <HAL_TIM_PWM_ConfigChannel>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM4_Init+0xf4>
  {
    Error_Handler();
 8001270:	f000 f8a4 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001274:	4803      	ldr	r0, [pc, #12]	; (8001284 <MX_TIM4_Init+0x104>)
 8001276:	f000 fb8f 	bl	8001998 <HAL_TIM_MspPostInit>

}
 800127a:	bf00      	nop
 800127c:	3738      	adds	r7, #56	; 0x38
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	200001f0 	.word	0x200001f0
 8001288:	40000800 	.word	0x40000800

0800128c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	; 0x28
 8001290:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	60da      	str	r2, [r3, #12]
 80012a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
 80012a6:	4b41      	ldr	r3, [pc, #260]	; (80013ac <MX_GPIO_Init+0x120>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a40      	ldr	r2, [pc, #256]	; (80013ac <MX_GPIO_Init+0x120>)
 80012ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b3e      	ldr	r3, [pc, #248]	; (80013ac <MX_GPIO_Init+0x120>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	4b3a      	ldr	r3, [pc, #232]	; (80013ac <MX_GPIO_Init+0x120>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a39      	ldr	r2, [pc, #228]	; (80013ac <MX_GPIO_Init+0x120>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b37      	ldr	r3, [pc, #220]	; (80013ac <MX_GPIO_Init+0x120>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	4b33      	ldr	r3, [pc, #204]	; (80013ac <MX_GPIO_Init+0x120>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a32      	ldr	r2, [pc, #200]	; (80013ac <MX_GPIO_Init+0x120>)
 80012e4:	f043 0304 	orr.w	r3, r3, #4
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b30      	ldr	r3, [pc, #192]	; (80013ac <MX_GPIO_Init+0x120>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0304 	and.w	r3, r3, #4
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	607b      	str	r3, [r7, #4]
 80012fa:	4b2c      	ldr	r3, [pc, #176]	; (80013ac <MX_GPIO_Init+0x120>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a2b      	ldr	r2, [pc, #172]	; (80013ac <MX_GPIO_Init+0x120>)
 8001300:	f043 0310 	orr.w	r3, r3, #16
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b29      	ldr	r3, [pc, #164]	; (80013ac <MX_GPIO_Init+0x120>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0310 	and.w	r3, r3, #16
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	603b      	str	r3, [r7, #0]
 8001316:	4b25      	ldr	r3, [pc, #148]	; (80013ac <MX_GPIO_Init+0x120>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a24      	ldr	r2, [pc, #144]	; (80013ac <MX_GPIO_Init+0x120>)
 800131c:	f043 0308 	orr.w	r3, r3, #8
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b22      	ldr	r3, [pc, #136]	; (80013ac <MX_GPIO_Init+0x120>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0308 	and.w	r3, r3, #8
 800132a:	603b      	str	r3, [r7, #0]
 800132c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MotorB1_Pin|MotorB2_Pin, GPIO_PIN_RESET);
 800132e:	2200      	movs	r2, #0
 8001330:	21a0      	movs	r1, #160	; 0xa0
 8001332:	481f      	ldr	r0, [pc, #124]	; (80013b0 <MX_GPIO_Init+0x124>)
 8001334:	f000 ff50 	bl	80021d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MotorA2_Pin|MotorA1_Pin, GPIO_PIN_RESET);
 8001338:	2200      	movs	r2, #0
 800133a:	2130      	movs	r1, #48	; 0x30
 800133c:	481d      	ldr	r0, [pc, #116]	; (80013b4 <MX_GPIO_Init+0x128>)
 800133e:	f000 ff4b 	bl	80021d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_RESET);
 8001342:	2200      	movs	r2, #0
 8001344:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001348:	481b      	ldr	r0, [pc, #108]	; (80013b8 <MX_GPIO_Init+0x12c>)
 800134a:	f000 ff45 	bl	80021d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MotorB1_Pin MotorB2_Pin */
  GPIO_InitStruct.Pin = MotorB1_Pin|MotorB2_Pin;
 800134e:	23a0      	movs	r3, #160	; 0xa0
 8001350:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001352:	2301      	movs	r3, #1
 8001354:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	2300      	movs	r3, #0
 800135c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	4619      	mov	r1, r3
 8001364:	4812      	ldr	r0, [pc, #72]	; (80013b0 <MX_GPIO_Init+0x124>)
 8001366:	f000 fd9b 	bl	8001ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MotorA2_Pin MotorA1_Pin */
  GPIO_InitStruct.Pin = MotorA2_Pin|MotorA1_Pin;
 800136a:	2330      	movs	r3, #48	; 0x30
 800136c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136e:	2301      	movs	r3, #1
 8001370:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	2300      	movs	r3, #0
 8001378:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800137a:	f107 0314 	add.w	r3, r7, #20
 800137e:	4619      	mov	r1, r3
 8001380:	480c      	ldr	r0, [pc, #48]	; (80013b4 <MX_GPIO_Init+0x128>)
 8001382:	f000 fd8d 	bl	8001ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Trig_Pin */
  GPIO_InitStruct.Pin = Trig_Pin;
 8001386:	f44f 7380 	mov.w	r3, #256	; 0x100
 800138a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138c:	2301      	movs	r3, #1
 800138e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001394:	2300      	movs	r3, #0
 8001396:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Trig_GPIO_Port, &GPIO_InitStruct);
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	4619      	mov	r1, r3
 800139e:	4806      	ldr	r0, [pc, #24]	; (80013b8 <MX_GPIO_Init+0x12c>)
 80013a0:	f000 fd7e 	bl	8001ea0 <HAL_GPIO_Init>

}
 80013a4:	bf00      	nop
 80013a6:	3728      	adds	r7, #40	; 0x28
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40020000 	.word	0x40020000
 80013b4:	40020800 	.word	0x40020800
 80013b8:	40021000 	.word	0x40021000

080013bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c0:	b672      	cpsid	i
}
 80013c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <Error_Handler+0x8>
	...

080013c8 <Go>:
  * @brief Function to control DC motors
  * @param Direction
  * @retval None
  */
void Go(Direction direction)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,1050);
 80013d2:	4b3e      	ldr	r3, [pc, #248]	; (80014cc <Go+0x104>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f240 421a 	movw	r2, #1050	; 0x41a
 80013da:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2,1050);
 80013dc:	4b3b      	ldr	r3, [pc, #236]	; (80014cc <Go+0x104>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f240 421a 	movw	r2, #1050	; 0x41a
 80013e4:	639a      	str	r2, [r3, #56]	; 0x38
	switch(direction)
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	2b03      	cmp	r3, #3
 80013ea:	d86b      	bhi.n	80014c4 <Go+0xfc>
 80013ec:	a201      	add	r2, pc, #4	; (adr r2, 80013f4 <Go+0x2c>)
 80013ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013f2:	bf00      	nop
 80013f4:	08001405 	.word	0x08001405
 80013f8:	0800143b 	.word	0x0800143b
 80013fc:	08001471 	.word	0x08001471
 8001400:	0800149b 	.word	0x0800149b
	{
	case Right:
		HAL_GPIO_WritePin(MotorA1_GPIO_Port, MotorA1_Pin, RESET);
 8001404:	2200      	movs	r2, #0
 8001406:	2120      	movs	r1, #32
 8001408:	4831      	ldr	r0, [pc, #196]	; (80014d0 <Go+0x108>)
 800140a:	f000 fee5 	bl	80021d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MotorB1_GPIO_Port, MotorB1_Pin, RESET);
 800140e:	2200      	movs	r2, #0
 8001410:	2120      	movs	r1, #32
 8001412:	4830      	ldr	r0, [pc, #192]	; (80014d4 <Go+0x10c>)
 8001414:	f000 fee0 	bl	80021d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MotorB2_GPIO_Port, MotorB2_Pin, RESET);
 8001418:	2200      	movs	r2, #0
 800141a:	2180      	movs	r1, #128	; 0x80
 800141c:	482d      	ldr	r0, [pc, #180]	; (80014d4 <Go+0x10c>)
 800141e:	f000 fedb 	bl	80021d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MotorA2_GPIO_Port, MotorA2_Pin, SET);
 8001422:	2201      	movs	r2, #1
 8001424:	2110      	movs	r1, #16
 8001426:	482a      	ldr	r0, [pc, #168]	; (80014d0 <Go+0x108>)
 8001428:	f000 fed6 	bl	80021d8 <HAL_GPIO_WritePin>
		HAL_Delay(1200);
 800142c:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8001430:	f000 fc00 	bl	8001c34 <HAL_Delay>
		Stop();
 8001434:	f000 f850 	bl	80014d8 <Stop>
		break;
 8001438:	e044      	b.n	80014c4 <Go+0xfc>
	case Left:
		HAL_GPIO_WritePin(MotorA1_GPIO_Port, MotorA1_Pin, RESET);
 800143a:	2200      	movs	r2, #0
 800143c:	2120      	movs	r1, #32
 800143e:	4824      	ldr	r0, [pc, #144]	; (80014d0 <Go+0x108>)
 8001440:	f000 feca 	bl	80021d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MotorA2_GPIO_Port, MotorA2_Pin, RESET);
 8001444:	2200      	movs	r2, #0
 8001446:	2110      	movs	r1, #16
 8001448:	4821      	ldr	r0, [pc, #132]	; (80014d0 <Go+0x108>)
 800144a:	f000 fec5 	bl	80021d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MotorB1_GPIO_Port, MotorB1_Pin, RESET);
 800144e:	2200      	movs	r2, #0
 8001450:	2120      	movs	r1, #32
 8001452:	4820      	ldr	r0, [pc, #128]	; (80014d4 <Go+0x10c>)
 8001454:	f000 fec0 	bl	80021d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MotorB2_GPIO_Port, MotorB2_Pin, SET);
 8001458:	2201      	movs	r2, #1
 800145a:	2180      	movs	r1, #128	; 0x80
 800145c:	481d      	ldr	r0, [pc, #116]	; (80014d4 <Go+0x10c>)
 800145e:	f000 febb 	bl	80021d8 <HAL_GPIO_WritePin>
		HAL_Delay(1200);
 8001462:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8001466:	f000 fbe5 	bl	8001c34 <HAL_Delay>
		Stop();
 800146a:	f000 f835 	bl	80014d8 <Stop>
		break;
 800146e:	e029      	b.n	80014c4 <Go+0xfc>
	case Forward:
		HAL_GPIO_WritePin(MotorA1_GPIO_Port, MotorA1_Pin, RESET);
 8001470:	2200      	movs	r2, #0
 8001472:	2120      	movs	r1, #32
 8001474:	4816      	ldr	r0, [pc, #88]	; (80014d0 <Go+0x108>)
 8001476:	f000 feaf 	bl	80021d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MotorB1_GPIO_Port, MotorB1_Pin, RESET);
 800147a:	2200      	movs	r2, #0
 800147c:	2120      	movs	r1, #32
 800147e:	4815      	ldr	r0, [pc, #84]	; (80014d4 <Go+0x10c>)
 8001480:	f000 feaa 	bl	80021d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MotorA2_GPIO_Port, MotorA2_Pin, SET);
 8001484:	2201      	movs	r2, #1
 8001486:	2110      	movs	r1, #16
 8001488:	4811      	ldr	r0, [pc, #68]	; (80014d0 <Go+0x108>)
 800148a:	f000 fea5 	bl	80021d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MotorB2_GPIO_Port, MotorB2_Pin, SET);
 800148e:	2201      	movs	r2, #1
 8001490:	2180      	movs	r1, #128	; 0x80
 8001492:	4810      	ldr	r0, [pc, #64]	; (80014d4 <Go+0x10c>)
 8001494:	f000 fea0 	bl	80021d8 <HAL_GPIO_WritePin>
		break;
 8001498:	e014      	b.n	80014c4 <Go+0xfc>
	case Backwards:
		HAL_GPIO_WritePin(MotorA2_GPIO_Port, MotorA2_Pin, RESET);
 800149a:	2200      	movs	r2, #0
 800149c:	2110      	movs	r1, #16
 800149e:	480c      	ldr	r0, [pc, #48]	; (80014d0 <Go+0x108>)
 80014a0:	f000 fe9a 	bl	80021d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MotorB2_GPIO_Port, MotorB2_Pin, RESET);
 80014a4:	2200      	movs	r2, #0
 80014a6:	2180      	movs	r1, #128	; 0x80
 80014a8:	480a      	ldr	r0, [pc, #40]	; (80014d4 <Go+0x10c>)
 80014aa:	f000 fe95 	bl	80021d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MotorB1_GPIO_Port, MotorB1_Pin, SET);
 80014ae:	2201      	movs	r2, #1
 80014b0:	2120      	movs	r1, #32
 80014b2:	4808      	ldr	r0, [pc, #32]	; (80014d4 <Go+0x10c>)
 80014b4:	f000 fe90 	bl	80021d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MotorA1_GPIO_Port, MotorA1_Pin, SET);
 80014b8:	2201      	movs	r2, #1
 80014ba:	2120      	movs	r1, #32
 80014bc:	4804      	ldr	r0, [pc, #16]	; (80014d0 <Go+0x108>)
 80014be:	f000 fe8b 	bl	80021d8 <HAL_GPIO_WritePin>
		break;
 80014c2:	bf00      	nop
	}
}
 80014c4:	bf00      	nop
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	200001f0 	.word	0x200001f0
 80014d0:	40020800 	.word	0x40020800
 80014d4:	40020000 	.word	0x40020000

080014d8 <Stop>:
  * @brief Function to hard stop the DC motors
  * @param None
  * @retval None
  */
void Stop(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,0);
 80014dc:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <Stop+0x20>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2200      	movs	r2, #0
 80014e2:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2,0);
 80014e4:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <Stop+0x20>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2200      	movs	r2, #0
 80014ea:	639a      	str	r2, [r3, #56]	; 0x38
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	200001f0 	.word	0x200001f0

080014fc <Look>:
  * @brief Function to control the servo rotation
  * @param Direction
  * @retval None
  */
void Look(Direction direction)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	71fb      	strb	r3, [r7, #7]
	switch(direction)
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	2b03      	cmp	r3, #3
 800150a:	d81e      	bhi.n	800154a <Look+0x4e>
 800150c:	a201      	add	r2, pc, #4	; (adr r2, 8001514 <Look+0x18>)
 800150e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001512:	bf00      	nop
 8001514:	08001525 	.word	0x08001525
 8001518:	08001531 	.word	0x08001531
 800151c:	0800153d 	.word	0x0800153d
 8001520:	08001549 	.word	0x08001549
	{
	case Right:
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,400);
 8001524:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <Look+0x5c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800152c:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800152e:	e00c      	b.n	800154a <Look+0x4e>
	case Left:
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,1600);
 8001530:	4b09      	ldr	r3, [pc, #36]	; (8001558 <Look+0x5c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8001538:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800153a:	e006      	b.n	800154a <Look+0x4e>
	case Forward:
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,1000);
 800153c:	4b06      	ldr	r3, [pc, #24]	; (8001558 <Look+0x5c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001544:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001546:	e000      	b.n	800154a <Look+0x4e>
	case Backwards:
		break;
 8001548:	bf00      	nop
	}
}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	200001a8 	.word	0x200001a8

0800155c <TriggerHCSR04>:
  * @brief Function to send trigger signal to HCSR04
  * @param None
  * @retval None
  */
void TriggerHCSR04(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_SET);
 8001560:	2201      	movs	r2, #1
 8001562:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001566:	480e      	ldr	r0, [pc, #56]	; (80015a0 <TriggerHCSR04+0x44>)
 8001568:	f000 fe36 	bl	80021d8 <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COUNTER(&htim2,0);
 800156c:	4b0d      	ldr	r3, [pc, #52]	; (80015a4 <TriggerHCSR04+0x48>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2200      	movs	r2, #0
 8001572:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim2)<10);
 8001574:	bf00      	nop
 8001576:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <TriggerHCSR04+0x48>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157c:	2b09      	cmp	r3, #9
 800157e:	d9fa      	bls.n	8001576 <TriggerHCSR04+0x1a>

	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_RESET);
 8001580:	2200      	movs	r2, #0
 8001582:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001586:	4806      	ldr	r0, [pc, #24]	; (80015a0 <TriggerHCSR04+0x44>)
 8001588:	f000 fe26 	bl	80021d8 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <TriggerHCSR04+0x4c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	68da      	ldr	r2, [r3, #12]
 8001592:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <TriggerHCSR04+0x4c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f042 0202 	orr.w	r2, r2, #2
 800159a:	60da      	str	r2, [r3, #12]
}
 800159c:	bf00      	nop
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40021000 	.word	0x40021000
 80015a4:	20000160 	.word	0x20000160
 80015a8:	20000118 	.word	0x20000118

080015ac <ScanSurroundings>:
  * @brief Function to look in all possible directions
  * @param None
  * @retval None
  */
void ScanSurroundings()
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
	Look(Right);
 80015b0:	2000      	movs	r0, #0
 80015b2:	f7ff ffa3 	bl	80014fc <Look>
	HAL_Delay(1000);
 80015b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015ba:	f000 fb3b 	bl	8001c34 <HAL_Delay>
	TriggerHCSR04();
 80015be:	f7ff ffcd 	bl	800155c <TriggerHCSR04>
	HAL_Delay(500);
 80015c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015c6:	f000 fb35 	bl	8001c34 <HAL_Delay>
	sensor1.DistanceAround[Right]=sensor1.Distance;
 80015ca:	4b1b      	ldr	r3, [pc, #108]	; (8001638 <ScanSurroundings+0x8c>)
 80015cc:	7b5b      	ldrb	r3, [r3, #13]
 80015ce:	b2da      	uxtb	r2, r3
 80015d0:	4b19      	ldr	r3, [pc, #100]	; (8001638 <ScanSurroundings+0x8c>)
 80015d2:	739a      	strb	r2, [r3, #14]
	Look(Left);
 80015d4:	2001      	movs	r0, #1
 80015d6:	f7ff ff91 	bl	80014fc <Look>
	HAL_Delay(1000);
 80015da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015de:	f000 fb29 	bl	8001c34 <HAL_Delay>
	TriggerHCSR04();
 80015e2:	f7ff ffbb 	bl	800155c <TriggerHCSR04>
	HAL_Delay(500);
 80015e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015ea:	f000 fb23 	bl	8001c34 <HAL_Delay>
	sensor1.DistanceAround[Left]=sensor1.Distance;
 80015ee:	4b12      	ldr	r3, [pc, #72]	; (8001638 <ScanSurroundings+0x8c>)
 80015f0:	7b5b      	ldrb	r3, [r3, #13]
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	4b10      	ldr	r3, [pc, #64]	; (8001638 <ScanSurroundings+0x8c>)
 80015f6:	73da      	strb	r2, [r3, #15]
	Look(Forward);
 80015f8:	2002      	movs	r0, #2
 80015fa:	f7ff ff7f 	bl	80014fc <Look>
	HAL_Delay(1000);
 80015fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001602:	f000 fb17 	bl	8001c34 <HAL_Delay>
	TriggerHCSR04();
 8001606:	f7ff ffa9 	bl	800155c <TriggerHCSR04>
	HAL_Delay(500);
 800160a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800160e:	f000 fb11 	bl	8001c34 <HAL_Delay>
	sensor1.DistanceAround[Forward]=sensor1.Distance;
 8001612:	4b09      	ldr	r3, [pc, #36]	; (8001638 <ScanSurroundings+0x8c>)
 8001614:	7b5b      	ldrb	r3, [r3, #13]
 8001616:	b2da      	uxtb	r2, r3
 8001618:	4b07      	ldr	r3, [pc, #28]	; (8001638 <ScanSurroundings+0x8c>)
 800161a:	741a      	strb	r2, [r3, #16]
	SerialSend(sensor1.DistanceAround[Right],sensor1.DistanceAround[Left],sensor1.DistanceAround[Forward]);
 800161c:	4b06      	ldr	r3, [pc, #24]	; (8001638 <ScanSurroundings+0x8c>)
 800161e:	7b9b      	ldrb	r3, [r3, #14]
 8001620:	b2db      	uxtb	r3, r3
 8001622:	4a05      	ldr	r2, [pc, #20]	; (8001638 <ScanSurroundings+0x8c>)
 8001624:	7bd2      	ldrb	r2, [r2, #15]
 8001626:	b2d1      	uxtb	r1, r2
 8001628:	4a03      	ldr	r2, [pc, #12]	; (8001638 <ScanSurroundings+0x8c>)
 800162a:	7c12      	ldrb	r2, [r2, #16]
 800162c:	b2d2      	uxtb	r2, r2
 800162e:	4618      	mov	r0, r3
 8001630:	f000 f8aa 	bl	8001788 <SerialSend>
}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20000238 	.word	0x20000238
 800163c:	00000000 	.word	0x00000000

08001640 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim1.Instance)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	4b4c      	ldr	r3, [pc, #304]	; (8001780 <HAL_TIM_IC_CaptureCallback+0x140>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	429a      	cmp	r2, r3
 8001652:	f040 808a 	bne.w	800176a <HAL_TIM_IC_CaptureCallback+0x12a>
	{
	    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	7f1b      	ldrb	r3, [r3, #28]
 800165a:	2b01      	cmp	r3, #1
 800165c:	f040 8085 	bne.w	800176a <HAL_TIM_IC_CaptureCallback+0x12a>
		{
			if (sensor1.RisingEdgeDetected == 0)
 8001660:	4b48      	ldr	r3, [pc, #288]	; (8001784 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001662:	7b1b      	ldrb	r3, [r3, #12]
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b00      	cmp	r3, #0
 8001668:	d11a      	bne.n	80016a0 <HAL_TIM_IC_CaptureCallback+0x60>
			{
				sensor1.Echo_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800166a:	2100      	movs	r1, #0
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f003 fb43 	bl	8004cf8 <HAL_TIM_ReadCapturedValue>
 8001672:	4603      	mov	r3, r0
 8001674:	4a43      	ldr	r2, [pc, #268]	; (8001784 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001676:	6013      	str	r3, [r2, #0]
				sensor1.RisingEdgeDetected = 1;
 8001678:	4b42      	ldr	r3, [pc, #264]	; (8001784 <HAL_TIM_IC_CaptureCallback+0x144>)
 800167a:	2201      	movs	r2, #1
 800167c:	731a      	strb	r2, [r3, #12]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	6a1a      	ldr	r2, [r3, #32]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f022 020a 	bic.w	r2, r2, #10
 800168c:	621a      	str	r2, [r3, #32]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	6a1a      	ldr	r2, [r3, #32]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f042 0202 	orr.w	r2, r2, #2
 800169c:	621a      	str	r2, [r3, #32]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
				__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
			}
		}
	}
}
 800169e:	e064      	b.n	800176a <HAL_TIM_IC_CaptureCallback+0x12a>
			else if (sensor1.RisingEdgeDetected == 1)
 80016a0:	4b38      	ldr	r3, [pc, #224]	; (8001784 <HAL_TIM_IC_CaptureCallback+0x144>)
 80016a2:	7b1b      	ldrb	r3, [r3, #12]
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d15f      	bne.n	800176a <HAL_TIM_IC_CaptureCallback+0x12a>
				sensor1.Echo_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80016aa:	2100      	movs	r1, #0
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f003 fb23 	bl	8004cf8 <HAL_TIM_ReadCapturedValue>
 80016b2:	4603      	mov	r3, r0
 80016b4:	4a33      	ldr	r2, [pc, #204]	; (8001784 <HAL_TIM_IC_CaptureCallback+0x144>)
 80016b6:	6053      	str	r3, [r2, #4]
				__HAL_TIM_SET_COUNTER(htim, 0);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2200      	movs	r2, #0
 80016be:	625a      	str	r2, [r3, #36]	; 0x24
				if (sensor1.Echo_Val2 > sensor1.Echo_Val1)
 80016c0:	4b30      	ldr	r3, [pc, #192]	; (8001784 <HAL_TIM_IC_CaptureCallback+0x144>)
 80016c2:	685a      	ldr	r2, [r3, #4]
 80016c4:	4b2f      	ldr	r3, [pc, #188]	; (8001784 <HAL_TIM_IC_CaptureCallback+0x144>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d907      	bls.n	80016dc <HAL_TIM_IC_CaptureCallback+0x9c>
					sensor1.Echo_Time = sensor1.Echo_Val2 - sensor1.Echo_Val1;
 80016cc:	4b2d      	ldr	r3, [pc, #180]	; (8001784 <HAL_TIM_IC_CaptureCallback+0x144>)
 80016ce:	685a      	ldr	r2, [r3, #4]
 80016d0:	4b2c      	ldr	r3, [pc, #176]	; (8001784 <HAL_TIM_IC_CaptureCallback+0x144>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	4a2b      	ldr	r2, [pc, #172]	; (8001784 <HAL_TIM_IC_CaptureCallback+0x144>)
 80016d8:	6093      	str	r3, [r2, #8]
 80016da:	e00f      	b.n	80016fc <HAL_TIM_IC_CaptureCallback+0xbc>
				else if (sensor1.Echo_Val1 > sensor1.Echo_Val2)
 80016dc:	4b29      	ldr	r3, [pc, #164]	; (8001784 <HAL_TIM_IC_CaptureCallback+0x144>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	4b28      	ldr	r3, [pc, #160]	; (8001784 <HAL_TIM_IC_CaptureCallback+0x144>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d909      	bls.n	80016fc <HAL_TIM_IC_CaptureCallback+0xbc>
					sensor1.Echo_Time = (0xffff - sensor1.Echo_Val1) + sensor1.Echo_Val2;
 80016e8:	4b26      	ldr	r3, [pc, #152]	; (8001784 <HAL_TIM_IC_CaptureCallback+0x144>)
 80016ea:	685a      	ldr	r2, [r3, #4]
 80016ec:	4b25      	ldr	r3, [pc, #148]	; (8001784 <HAL_TIM_IC_CaptureCallback+0x144>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80016f6:	33ff      	adds	r3, #255	; 0xff
 80016f8:	4a22      	ldr	r2, [pc, #136]	; (8001784 <HAL_TIM_IC_CaptureCallback+0x144>)
 80016fa:	6093      	str	r3, [r2, #8]
				sensor1.Distance = sensor1.Echo_Time * .034/2;
 80016fc:	4b21      	ldr	r3, [pc, #132]	; (8001784 <HAL_TIM_IC_CaptureCallback+0x144>)
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	4618      	mov	r0, r3
 8001702:	f7fe fea3 	bl	800044c <__aeabi_ui2d>
 8001706:	a31c      	add	r3, pc, #112	; (adr r3, 8001778 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170c:	f7fe ff18 	bl	8000540 <__aeabi_dmul>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4610      	mov	r0, r2
 8001716:	4619      	mov	r1, r3
 8001718:	f04f 0200 	mov.w	r2, #0
 800171c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001720:	f7ff f838 	bl	8000794 <__aeabi_ddiv>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	4610      	mov	r0, r2
 800172a:	4619      	mov	r1, r3
 800172c:	f7ff f91a 	bl	8000964 <__aeabi_d2uiz>
 8001730:	4603      	mov	r3, r0
 8001732:	b2da      	uxtb	r2, r3
 8001734:	4b13      	ldr	r3, [pc, #76]	; (8001784 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001736:	735a      	strb	r2, [r3, #13]
				sensor1.RisingEdgeDetected = 0;
 8001738:	4b12      	ldr	r3, [pc, #72]	; (8001784 <HAL_TIM_IC_CaptureCallback+0x144>)
 800173a:	2200      	movs	r2, #0
 800173c:	731a      	strb	r2, [r3, #12]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6a1a      	ldr	r2, [r3, #32]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f022 020a 	bic.w	r2, r2, #10
 800174c:	621a      	str	r2, [r3, #32]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6a12      	ldr	r2, [r2, #32]
 8001758:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 800175a:	4b09      	ldr	r3, [pc, #36]	; (8001780 <HAL_TIM_IC_CaptureCallback+0x140>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	68da      	ldr	r2, [r3, #12]
 8001760:	4b07      	ldr	r3, [pc, #28]	; (8001780 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f022 0202 	bic.w	r2, r2, #2
 8001768:	60da      	str	r2, [r3, #12]
}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	f3af 8000 	nop.w
 8001778:	b020c49c 	.word	0xb020c49c
 800177c:	3fa16872 	.word	0x3fa16872
 8001780:	20000118 	.word	0x20000118
 8001784:	20000238 	.word	0x20000238

08001788 <SerialSend>:
  * @brief Function to send the prepared data to VCP
  * @param uint8_t,uint8_t,uint8_t
  * @retval None
  */
void SerialSend(uint8_t RightReading, uint8_t LeftReading, uint8_t ForwardReading)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	71fb      	strb	r3, [r7, #7]
 8001792:	460b      	mov	r3, r1
 8001794:	71bb      	strb	r3, [r7, #6]
 8001796:	4613      	mov	r3, r2
 8001798:	717b      	strb	r3, [r7, #5]
	strcpy(USB_TxBuffer,"R:");
 800179a:	4b18      	ldr	r3, [pc, #96]	; (80017fc <SerialSend+0x74>)
 800179c:	4a18      	ldr	r2, [pc, #96]	; (8001800 <SerialSend+0x78>)
 800179e:	6812      	ldr	r2, [r2, #0]
 80017a0:	4611      	mov	r1, r2
 80017a2:	8019      	strh	r1, [r3, #0]
 80017a4:	3302      	adds	r3, #2
 80017a6:	0c12      	lsrs	r2, r2, #16
 80017a8:	701a      	strb	r2, [r3, #0]
	itoa(RightReading,USB_TxBuffer+2,10);
 80017aa:	79fb      	ldrb	r3, [r7, #7]
 80017ac:	4915      	ldr	r1, [pc, #84]	; (8001804 <SerialSend+0x7c>)
 80017ae:	220a      	movs	r2, #10
 80017b0:	4618      	mov	r0, r3
 80017b2:	f008 f943 	bl	8009a3c <itoa>
	strcpy(USB_TxBuffer+5," L:");
 80017b6:	4b14      	ldr	r3, [pc, #80]	; (8001808 <SerialSend+0x80>)
 80017b8:	4a14      	ldr	r2, [pc, #80]	; (800180c <SerialSend+0x84>)
 80017ba:	6810      	ldr	r0, [r2, #0]
 80017bc:	6018      	str	r0, [r3, #0]
	itoa(LeftReading,USB_TxBuffer+8,10);
 80017be:	79bb      	ldrb	r3, [r7, #6]
 80017c0:	4913      	ldr	r1, [pc, #76]	; (8001810 <SerialSend+0x88>)
 80017c2:	220a      	movs	r2, #10
 80017c4:	4618      	mov	r0, r3
 80017c6:	f008 f939 	bl	8009a3c <itoa>
	strcpy(USB_TxBuffer+11," F:");
 80017ca:	4b12      	ldr	r3, [pc, #72]	; (8001814 <SerialSend+0x8c>)
 80017cc:	4a12      	ldr	r2, [pc, #72]	; (8001818 <SerialSend+0x90>)
 80017ce:	6810      	ldr	r0, [r2, #0]
 80017d0:	6018      	str	r0, [r3, #0]
	itoa(ForwardReading,USB_TxBuffer+14,10);
 80017d2:	797b      	ldrb	r3, [r7, #5]
 80017d4:	4911      	ldr	r1, [pc, #68]	; (800181c <SerialSend+0x94>)
 80017d6:	220a      	movs	r2, #10
 80017d8:	4618      	mov	r0, r3
 80017da:	f008 f92f 	bl	8009a3c <itoa>
	strcpy(USB_TxBuffer+17,"\r\n");
 80017de:	4b10      	ldr	r3, [pc, #64]	; (8001820 <SerialSend+0x98>)
 80017e0:	4a10      	ldr	r2, [pc, #64]	; (8001824 <SerialSend+0x9c>)
 80017e2:	8811      	ldrh	r1, [r2, #0]
 80017e4:	7892      	ldrb	r2, [r2, #2]
 80017e6:	8019      	strh	r1, [r3, #0]
 80017e8:	709a      	strb	r2, [r3, #2]
	CDC_Transmit_FS((uint8_t *)USB_TxBuffer, 20);
 80017ea:	2114      	movs	r1, #20
 80017ec:	4803      	ldr	r0, [pc, #12]	; (80017fc <SerialSend+0x74>)
 80017ee:	f007 fc8d 	bl	800910c <CDC_Transmit_FS>

}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	2000024c 	.word	0x2000024c
 8001800:	08009aec 	.word	0x08009aec
 8001804:	2000024e 	.word	0x2000024e
 8001808:	20000251 	.word	0x20000251
 800180c:	08009af0 	.word	0x08009af0
 8001810:	20000254 	.word	0x20000254
 8001814:	20000257 	.word	0x20000257
 8001818:	08009af4 	.word	0x08009af4
 800181c:	2000025a 	.word	0x2000025a
 8001820:	2000025d 	.word	0x2000025d
 8001824:	08009af8 	.word	0x08009af8

08001828 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	607b      	str	r3, [r7, #4]
 8001832:	4b10      	ldr	r3, [pc, #64]	; (8001874 <HAL_MspInit+0x4c>)
 8001834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001836:	4a0f      	ldr	r2, [pc, #60]	; (8001874 <HAL_MspInit+0x4c>)
 8001838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800183c:	6453      	str	r3, [r2, #68]	; 0x44
 800183e:	4b0d      	ldr	r3, [pc, #52]	; (8001874 <HAL_MspInit+0x4c>)
 8001840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001846:	607b      	str	r3, [r7, #4]
 8001848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	603b      	str	r3, [r7, #0]
 800184e:	4b09      	ldr	r3, [pc, #36]	; (8001874 <HAL_MspInit+0x4c>)
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	4a08      	ldr	r2, [pc, #32]	; (8001874 <HAL_MspInit+0x4c>)
 8001854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001858:	6413      	str	r3, [r2, #64]	; 0x40
 800185a:	4b06      	ldr	r3, [pc, #24]	; (8001874 <HAL_MspInit+0x4c>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001862:	603b      	str	r3, [r7, #0]
 8001864:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001866:	2007      	movs	r0, #7
 8001868:	f000 fad8 	bl	8001e1c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40023800 	.word	0x40023800

08001878 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b08c      	sub	sp, #48	; 0x30
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001880:	f107 031c 	add.w	r3, r7, #28
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a3b      	ldr	r2, [pc, #236]	; (8001984 <HAL_TIM_Base_MspInit+0x10c>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d135      	bne.n	8001906 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	61bb      	str	r3, [r7, #24]
 800189e:	4b3a      	ldr	r3, [pc, #232]	; (8001988 <HAL_TIM_Base_MspInit+0x110>)
 80018a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a2:	4a39      	ldr	r2, [pc, #228]	; (8001988 <HAL_TIM_Base_MspInit+0x110>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	6453      	str	r3, [r2, #68]	; 0x44
 80018aa:	4b37      	ldr	r3, [pc, #220]	; (8001988 <HAL_TIM_Base_MspInit+0x110>)
 80018ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	61bb      	str	r3, [r7, #24]
 80018b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	617b      	str	r3, [r7, #20]
 80018ba:	4b33      	ldr	r3, [pc, #204]	; (8001988 <HAL_TIM_Base_MspInit+0x110>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	4a32      	ldr	r2, [pc, #200]	; (8001988 <HAL_TIM_Base_MspInit+0x110>)
 80018c0:	f043 0310 	orr.w	r3, r3, #16
 80018c4:	6313      	str	r3, [r2, #48]	; 0x30
 80018c6:	4b30      	ldr	r3, [pc, #192]	; (8001988 <HAL_TIM_Base_MspInit+0x110>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	f003 0310 	and.w	r3, r3, #16
 80018ce:	617b      	str	r3, [r7, #20]
 80018d0:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d8:	2302      	movs	r3, #2
 80018da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e0:	2300      	movs	r3, #0
 80018e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018e4:	2301      	movs	r3, #1
 80018e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018e8:	f107 031c 	add.w	r3, r7, #28
 80018ec:	4619      	mov	r1, r3
 80018ee:	4827      	ldr	r0, [pc, #156]	; (800198c <HAL_TIM_Base_MspInit+0x114>)
 80018f0:	f000 fad6 	bl	8001ea0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80018f4:	2200      	movs	r2, #0
 80018f6:	2100      	movs	r1, #0
 80018f8:	201b      	movs	r0, #27
 80018fa:	f000 fa9a 	bl	8001e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80018fe:	201b      	movs	r0, #27
 8001900:	f000 fab3 	bl	8001e6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001904:	e03a      	b.n	800197c <HAL_TIM_Base_MspInit+0x104>
  else if(htim_base->Instance==TIM2)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800190e:	d10e      	bne.n	800192e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001910:	2300      	movs	r3, #0
 8001912:	613b      	str	r3, [r7, #16]
 8001914:	4b1c      	ldr	r3, [pc, #112]	; (8001988 <HAL_TIM_Base_MspInit+0x110>)
 8001916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001918:	4a1b      	ldr	r2, [pc, #108]	; (8001988 <HAL_TIM_Base_MspInit+0x110>)
 800191a:	f043 0301 	orr.w	r3, r3, #1
 800191e:	6413      	str	r3, [r2, #64]	; 0x40
 8001920:	4b19      	ldr	r3, [pc, #100]	; (8001988 <HAL_TIM_Base_MspInit+0x110>)
 8001922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001924:	f003 0301 	and.w	r3, r3, #1
 8001928:	613b      	str	r3, [r7, #16]
 800192a:	693b      	ldr	r3, [r7, #16]
}
 800192c:	e026      	b.n	800197c <HAL_TIM_Base_MspInit+0x104>
  else if(htim_base->Instance==TIM3)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a17      	ldr	r2, [pc, #92]	; (8001990 <HAL_TIM_Base_MspInit+0x118>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d10e      	bne.n	8001956 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001938:	2300      	movs	r3, #0
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	4b12      	ldr	r3, [pc, #72]	; (8001988 <HAL_TIM_Base_MspInit+0x110>)
 800193e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001940:	4a11      	ldr	r2, [pc, #68]	; (8001988 <HAL_TIM_Base_MspInit+0x110>)
 8001942:	f043 0302 	orr.w	r3, r3, #2
 8001946:	6413      	str	r3, [r2, #64]	; 0x40
 8001948:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <HAL_TIM_Base_MspInit+0x110>)
 800194a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	68fb      	ldr	r3, [r7, #12]
}
 8001954:	e012      	b.n	800197c <HAL_TIM_Base_MspInit+0x104>
  else if(htim_base->Instance==TIM4)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a0e      	ldr	r2, [pc, #56]	; (8001994 <HAL_TIM_Base_MspInit+0x11c>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d10d      	bne.n	800197c <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001960:	2300      	movs	r3, #0
 8001962:	60bb      	str	r3, [r7, #8]
 8001964:	4b08      	ldr	r3, [pc, #32]	; (8001988 <HAL_TIM_Base_MspInit+0x110>)
 8001966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001968:	4a07      	ldr	r2, [pc, #28]	; (8001988 <HAL_TIM_Base_MspInit+0x110>)
 800196a:	f043 0304 	orr.w	r3, r3, #4
 800196e:	6413      	str	r3, [r2, #64]	; 0x40
 8001970:	4b05      	ldr	r3, [pc, #20]	; (8001988 <HAL_TIM_Base_MspInit+0x110>)
 8001972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	68bb      	ldr	r3, [r7, #8]
}
 800197c:	bf00      	nop
 800197e:	3730      	adds	r7, #48	; 0x30
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40010000 	.word	0x40010000
 8001988:	40023800 	.word	0x40023800
 800198c:	40021000 	.word	0x40021000
 8001990:	40000400 	.word	0x40000400
 8001994:	40000800 	.word	0x40000800

08001998 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08a      	sub	sp, #40	; 0x28
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a0:	f107 0314 	add.w	r3, r7, #20
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
 80019ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a24      	ldr	r2, [pc, #144]	; (8001a48 <HAL_TIM_MspPostInit+0xb0>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d11e      	bne.n	80019f8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	613b      	str	r3, [r7, #16]
 80019be:	4b23      	ldr	r3, [pc, #140]	; (8001a4c <HAL_TIM_MspPostInit+0xb4>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	4a22      	ldr	r2, [pc, #136]	; (8001a4c <HAL_TIM_MspPostInit+0xb4>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ca:	4b20      	ldr	r3, [pc, #128]	; (8001a4c <HAL_TIM_MspPostInit+0xb4>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019d6:	2340      	movs	r3, #64	; 0x40
 80019d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019da:	2302      	movs	r3, #2
 80019dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	2300      	movs	r3, #0
 80019e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e2:	2300      	movs	r3, #0
 80019e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019e6:	2302      	movs	r3, #2
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ea:	f107 0314 	add.w	r3, r7, #20
 80019ee:	4619      	mov	r1, r3
 80019f0:	4817      	ldr	r0, [pc, #92]	; (8001a50 <HAL_TIM_MspPostInit+0xb8>)
 80019f2:	f000 fa55 	bl	8001ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80019f6:	e023      	b.n	8001a40 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a15      	ldr	r2, [pc, #84]	; (8001a54 <HAL_TIM_MspPostInit+0xbc>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d11e      	bne.n	8001a40 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <HAL_TIM_MspPostInit+0xb4>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	4a10      	ldr	r2, [pc, #64]	; (8001a4c <HAL_TIM_MspPostInit+0xb4>)
 8001a0c:	f043 0308 	orr.w	r3, r3, #8
 8001a10:	6313      	str	r3, [r2, #48]	; 0x30
 8001a12:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <HAL_TIM_MspPostInit+0xb4>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	f003 0308 	and.w	r3, r3, #8
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001a1e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001a22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a24:	2302      	movs	r3, #2
 8001a26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a30:	2302      	movs	r3, #2
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a34:	f107 0314 	add.w	r3, r7, #20
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4807      	ldr	r0, [pc, #28]	; (8001a58 <HAL_TIM_MspPostInit+0xc0>)
 8001a3c:	f000 fa30 	bl	8001ea0 <HAL_GPIO_Init>
}
 8001a40:	bf00      	nop
 8001a42:	3728      	adds	r7, #40	; 0x28
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40000400 	.word	0x40000400
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40020000 	.word	0x40020000
 8001a54:	40000800 	.word	0x40000800
 8001a58:	40020c00 	.word	0x40020c00

08001a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a60:	e7fe      	b.n	8001a60 <NMI_Handler+0x4>

08001a62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a66:	e7fe      	b.n	8001a66 <HardFault_Handler+0x4>

08001a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a6c:	e7fe      	b.n	8001a6c <MemManage_Handler+0x4>

08001a6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a72:	e7fe      	b.n	8001a72 <BusFault_Handler+0x4>

08001a74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a78:	e7fe      	b.n	8001a78 <UsageFault_Handler+0x4>

08001a7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aa8:	f000 f8a4 	bl	8001bf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aac:	bf00      	nop
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ab4:	4802      	ldr	r0, [pc, #8]	; (8001ac0 <TIM1_CC_IRQHandler+0x10>)
 8001ab6:	f002 fdf1 	bl	800469c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000118 	.word	0x20000118

08001ac4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001ac8:	4802      	ldr	r0, [pc, #8]	; (8001ad4 <OTG_FS_IRQHandler+0x10>)
 8001aca:	f000 fcee 	bl	80024aa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20001744 	.word	0x20001744

08001ad8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001adc:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <SystemInit+0x20>)
 8001ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ae2:	4a05      	ldr	r2, [pc, #20]	; (8001af8 <SystemInit+0x20>)
 8001ae4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ae8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001afc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b00:	480d      	ldr	r0, [pc, #52]	; (8001b38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b02:	490e      	ldr	r1, [pc, #56]	; (8001b3c <LoopFillZerobss+0x1a>)
              ldr r2, =_sidata
 8001b04:	4a0e      	ldr	r2, [pc, #56]	; (8001b40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b08:	e002      	b.n	8001b10 <LoopCopyDataInit>

08001b0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b0e:	3304      	adds	r3, #4

08001b10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b14:	d3f9      	bcc.n	8001b0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b16:	4a0b      	ldr	r2, [pc, #44]	; (8001b44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b18:	4c0b      	ldr	r4, [pc, #44]	; (8001b48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b1c:	e001      	b.n	8001b22 <LoopFillZerobss>

08001b1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b20:	3204      	adds	r2, #4

08001b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b24:	d3fb      	bcc.n	8001b1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b26:	f7ff ffd7 	bl	8001ad8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b2a:	f007 ff4b 	bl	80099c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b2e:	f7ff f8bb 	bl	8000ca8 <main>
  bx  lr    
 8001b32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b3c:	200000fc 	.word	0x200000fc
              ldr r2, =_sidata
 8001b40:	08009b8c 	.word	0x08009b8c
  ldr r2, =_sbss
 8001b44:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8001b48:	20001e70 	.word	0x20001e70

08001b4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b4c:	e7fe      	b.n	8001b4c <ADC_IRQHandler>
	...

08001b50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b54:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <HAL_Init+0x40>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a0d      	ldr	r2, [pc, #52]	; (8001b90 <HAL_Init+0x40>)
 8001b5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b60:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <HAL_Init+0x40>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a0a      	ldr	r2, [pc, #40]	; (8001b90 <HAL_Init+0x40>)
 8001b66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b6c:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <HAL_Init+0x40>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a07      	ldr	r2, [pc, #28]	; (8001b90 <HAL_Init+0x40>)
 8001b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b78:	2003      	movs	r0, #3
 8001b7a:	f000 f94f 	bl	8001e1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b7e:	2000      	movs	r0, #0
 8001b80:	f000 f808 	bl	8001b94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b84:	f7ff fe50 	bl	8001828 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	40023c00 	.word	0x40023c00

08001b94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b9c:	4b12      	ldr	r3, [pc, #72]	; (8001be8 <HAL_InitTick+0x54>)
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	4b12      	ldr	r3, [pc, #72]	; (8001bec <HAL_InitTick+0x58>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001baa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f000 f967 	bl	8001e86 <HAL_SYSTICK_Config>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e00e      	b.n	8001be0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b0f      	cmp	r3, #15
 8001bc6:	d80a      	bhi.n	8001bde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bc8:	2200      	movs	r2, #0
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd0:	f000 f92f 	bl	8001e32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bd4:	4a06      	ldr	r2, [pc, #24]	; (8001bf0 <HAL_InitTick+0x5c>)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	e000      	b.n	8001be0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20000000 	.word	0x20000000
 8001bec:	20000008 	.word	0x20000008
 8001bf0:	20000004 	.word	0x20000004

08001bf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bf8:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <HAL_IncTick+0x20>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <HAL_IncTick+0x24>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4413      	add	r3, r2
 8001c04:	4a04      	ldr	r2, [pc, #16]	; (8001c18 <HAL_IncTick+0x24>)
 8001c06:	6013      	str	r3, [r2, #0]
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	20000008 	.word	0x20000008
 8001c18:	20000260 	.word	0x20000260

08001c1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c20:	4b03      	ldr	r3, [pc, #12]	; (8001c30 <HAL_GetTick+0x14>)
 8001c22:	681b      	ldr	r3, [r3, #0]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	20000260 	.word	0x20000260

08001c34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c3c:	f7ff ffee 	bl	8001c1c <HAL_GetTick>
 8001c40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c4c:	d005      	beq.n	8001c5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c4e:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <HAL_Delay+0x44>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	461a      	mov	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4413      	add	r3, r2
 8001c58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c5a:	bf00      	nop
 8001c5c:	f7ff ffde 	bl	8001c1c <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d8f7      	bhi.n	8001c5c <HAL_Delay+0x28>
  {
  }
}
 8001c6c:	bf00      	nop
 8001c6e:	bf00      	nop
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20000008 	.word	0x20000008

08001c7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c92:	68ba      	ldr	r2, [r7, #8]
 8001c94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c98:	4013      	ands	r3, r2
 8001c9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ca4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cae:	4a04      	ldr	r2, [pc, #16]	; (8001cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	60d3      	str	r3, [r2, #12]
}
 8001cb4:	bf00      	nop
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cc8:	4b04      	ldr	r3, [pc, #16]	; (8001cdc <__NVIC_GetPriorityGrouping+0x18>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	0a1b      	lsrs	r3, r3, #8
 8001cce:	f003 0307 	and.w	r3, r3, #7
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	db0b      	blt.n	8001d0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cf2:	79fb      	ldrb	r3, [r7, #7]
 8001cf4:	f003 021f 	and.w	r2, r3, #31
 8001cf8:	4907      	ldr	r1, [pc, #28]	; (8001d18 <__NVIC_EnableIRQ+0x38>)
 8001cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfe:	095b      	lsrs	r3, r3, #5
 8001d00:	2001      	movs	r0, #1
 8001d02:	fa00 f202 	lsl.w	r2, r0, r2
 8001d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	e000e100 	.word	0xe000e100

08001d1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	6039      	str	r1, [r7, #0]
 8001d26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	db0a      	blt.n	8001d46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	b2da      	uxtb	r2, r3
 8001d34:	490c      	ldr	r1, [pc, #48]	; (8001d68 <__NVIC_SetPriority+0x4c>)
 8001d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3a:	0112      	lsls	r2, r2, #4
 8001d3c:	b2d2      	uxtb	r2, r2
 8001d3e:	440b      	add	r3, r1
 8001d40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d44:	e00a      	b.n	8001d5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	4908      	ldr	r1, [pc, #32]	; (8001d6c <__NVIC_SetPriority+0x50>)
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
 8001d4e:	f003 030f 	and.w	r3, r3, #15
 8001d52:	3b04      	subs	r3, #4
 8001d54:	0112      	lsls	r2, r2, #4
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	440b      	add	r3, r1
 8001d5a:	761a      	strb	r2, [r3, #24]
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	e000e100 	.word	0xe000e100
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b089      	sub	sp, #36	; 0x24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	f1c3 0307 	rsb	r3, r3, #7
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	bf28      	it	cs
 8001d8e:	2304      	movcs	r3, #4
 8001d90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	3304      	adds	r3, #4
 8001d96:	2b06      	cmp	r3, #6
 8001d98:	d902      	bls.n	8001da0 <NVIC_EncodePriority+0x30>
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	3b03      	subs	r3, #3
 8001d9e:	e000      	b.n	8001da2 <NVIC_EncodePriority+0x32>
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da4:	f04f 32ff 	mov.w	r2, #4294967295
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43da      	mvns	r2, r3
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	401a      	ands	r2, r3
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001db8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc2:	43d9      	mvns	r1, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc8:	4313      	orrs	r3, r2
         );
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3724      	adds	r7, #36	; 0x24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
	...

08001dd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001de8:	d301      	bcc.n	8001dee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dea:	2301      	movs	r3, #1
 8001dec:	e00f      	b.n	8001e0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dee:	4a0a      	ldr	r2, [pc, #40]	; (8001e18 <SysTick_Config+0x40>)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3b01      	subs	r3, #1
 8001df4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001df6:	210f      	movs	r1, #15
 8001df8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dfc:	f7ff ff8e 	bl	8001d1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e00:	4b05      	ldr	r3, [pc, #20]	; (8001e18 <SysTick_Config+0x40>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e06:	4b04      	ldr	r3, [pc, #16]	; (8001e18 <SysTick_Config+0x40>)
 8001e08:	2207      	movs	r2, #7
 8001e0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	e000e010 	.word	0xe000e010

08001e1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f7ff ff29 	bl	8001c7c <__NVIC_SetPriorityGrouping>
}
 8001e2a:	bf00      	nop
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b086      	sub	sp, #24
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	4603      	mov	r3, r0
 8001e3a:	60b9      	str	r1, [r7, #8]
 8001e3c:	607a      	str	r2, [r7, #4]
 8001e3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e40:	2300      	movs	r3, #0
 8001e42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e44:	f7ff ff3e 	bl	8001cc4 <__NVIC_GetPriorityGrouping>
 8001e48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	68b9      	ldr	r1, [r7, #8]
 8001e4e:	6978      	ldr	r0, [r7, #20]
 8001e50:	f7ff ff8e 	bl	8001d70 <NVIC_EncodePriority>
 8001e54:	4602      	mov	r2, r0
 8001e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e5a:	4611      	mov	r1, r2
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff ff5d 	bl	8001d1c <__NVIC_SetPriority>
}
 8001e62:	bf00      	nop
 8001e64:	3718      	adds	r7, #24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	4603      	mov	r3, r0
 8001e72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff ff31 	bl	8001ce0 <__NVIC_EnableIRQ>
}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b082      	sub	sp, #8
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff ffa2 	bl	8001dd8 <SysTick_Config>
 8001e94:	4603      	mov	r3, r0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
	...

08001ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b089      	sub	sp, #36	; 0x24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61fb      	str	r3, [r7, #28]
 8001eba:	e16b      	b.n	8002194 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	f040 815a 	bne.w	800218e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f003 0303 	and.w	r3, r3, #3
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d005      	beq.n	8001ef2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d130      	bne.n	8001f54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	2203      	movs	r2, #3
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43db      	mvns	r3, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4013      	ands	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	68da      	ldr	r2, [r3, #12]
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f28:	2201      	movs	r2, #1
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4013      	ands	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	091b      	lsrs	r3, r3, #4
 8001f3e:	f003 0201 	and.w	r2, r3, #1
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f003 0303 	and.w	r3, r3, #3
 8001f5c:	2b03      	cmp	r3, #3
 8001f5e:	d017      	beq.n	8001f90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	2203      	movs	r2, #3
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f003 0303 	and.w	r3, r3, #3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d123      	bne.n	8001fe4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	08da      	lsrs	r2, r3, #3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3208      	adds	r2, #8
 8001fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	220f      	movs	r2, #15
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	691a      	ldr	r2, [r3, #16]
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	08da      	lsrs	r2, r3, #3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	3208      	adds	r2, #8
 8001fde:	69b9      	ldr	r1, [r7, #24]
 8001fe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	2203      	movs	r2, #3
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 0203 	and.w	r2, r3, #3
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	4313      	orrs	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002020:	2b00      	cmp	r3, #0
 8002022:	f000 80b4 	beq.w	800218e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	4b60      	ldr	r3, [pc, #384]	; (80021ac <HAL_GPIO_Init+0x30c>)
 800202c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202e:	4a5f      	ldr	r2, [pc, #380]	; (80021ac <HAL_GPIO_Init+0x30c>)
 8002030:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002034:	6453      	str	r3, [r2, #68]	; 0x44
 8002036:	4b5d      	ldr	r3, [pc, #372]	; (80021ac <HAL_GPIO_Init+0x30c>)
 8002038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002042:	4a5b      	ldr	r2, [pc, #364]	; (80021b0 <HAL_GPIO_Init+0x310>)
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	089b      	lsrs	r3, r3, #2
 8002048:	3302      	adds	r3, #2
 800204a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800204e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	220f      	movs	r2, #15
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	43db      	mvns	r3, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4013      	ands	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a52      	ldr	r2, [pc, #328]	; (80021b4 <HAL_GPIO_Init+0x314>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d02b      	beq.n	80020c6 <HAL_GPIO_Init+0x226>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a51      	ldr	r2, [pc, #324]	; (80021b8 <HAL_GPIO_Init+0x318>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d025      	beq.n	80020c2 <HAL_GPIO_Init+0x222>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a50      	ldr	r2, [pc, #320]	; (80021bc <HAL_GPIO_Init+0x31c>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d01f      	beq.n	80020be <HAL_GPIO_Init+0x21e>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a4f      	ldr	r2, [pc, #316]	; (80021c0 <HAL_GPIO_Init+0x320>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d019      	beq.n	80020ba <HAL_GPIO_Init+0x21a>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a4e      	ldr	r2, [pc, #312]	; (80021c4 <HAL_GPIO_Init+0x324>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d013      	beq.n	80020b6 <HAL_GPIO_Init+0x216>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a4d      	ldr	r2, [pc, #308]	; (80021c8 <HAL_GPIO_Init+0x328>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d00d      	beq.n	80020b2 <HAL_GPIO_Init+0x212>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a4c      	ldr	r2, [pc, #304]	; (80021cc <HAL_GPIO_Init+0x32c>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d007      	beq.n	80020ae <HAL_GPIO_Init+0x20e>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a4b      	ldr	r2, [pc, #300]	; (80021d0 <HAL_GPIO_Init+0x330>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d101      	bne.n	80020aa <HAL_GPIO_Init+0x20a>
 80020a6:	2307      	movs	r3, #7
 80020a8:	e00e      	b.n	80020c8 <HAL_GPIO_Init+0x228>
 80020aa:	2308      	movs	r3, #8
 80020ac:	e00c      	b.n	80020c8 <HAL_GPIO_Init+0x228>
 80020ae:	2306      	movs	r3, #6
 80020b0:	e00a      	b.n	80020c8 <HAL_GPIO_Init+0x228>
 80020b2:	2305      	movs	r3, #5
 80020b4:	e008      	b.n	80020c8 <HAL_GPIO_Init+0x228>
 80020b6:	2304      	movs	r3, #4
 80020b8:	e006      	b.n	80020c8 <HAL_GPIO_Init+0x228>
 80020ba:	2303      	movs	r3, #3
 80020bc:	e004      	b.n	80020c8 <HAL_GPIO_Init+0x228>
 80020be:	2302      	movs	r3, #2
 80020c0:	e002      	b.n	80020c8 <HAL_GPIO_Init+0x228>
 80020c2:	2301      	movs	r3, #1
 80020c4:	e000      	b.n	80020c8 <HAL_GPIO_Init+0x228>
 80020c6:	2300      	movs	r3, #0
 80020c8:	69fa      	ldr	r2, [r7, #28]
 80020ca:	f002 0203 	and.w	r2, r2, #3
 80020ce:	0092      	lsls	r2, r2, #2
 80020d0:	4093      	lsls	r3, r2
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020d8:	4935      	ldr	r1, [pc, #212]	; (80021b0 <HAL_GPIO_Init+0x310>)
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	089b      	lsrs	r3, r3, #2
 80020de:	3302      	adds	r3, #2
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020e6:	4b3b      	ldr	r3, [pc, #236]	; (80021d4 <HAL_GPIO_Init+0x334>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	43db      	mvns	r3, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4013      	ands	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d003      	beq.n	800210a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	4313      	orrs	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800210a:	4a32      	ldr	r2, [pc, #200]	; (80021d4 <HAL_GPIO_Init+0x334>)
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002110:	4b30      	ldr	r3, [pc, #192]	; (80021d4 <HAL_GPIO_Init+0x334>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	43db      	mvns	r3, r3
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4013      	ands	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d003      	beq.n	8002134 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	4313      	orrs	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002134:	4a27      	ldr	r2, [pc, #156]	; (80021d4 <HAL_GPIO_Init+0x334>)
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800213a:	4b26      	ldr	r3, [pc, #152]	; (80021d4 <HAL_GPIO_Init+0x334>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	43db      	mvns	r3, r3
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	4013      	ands	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	4313      	orrs	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800215e:	4a1d      	ldr	r2, [pc, #116]	; (80021d4 <HAL_GPIO_Init+0x334>)
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002164:	4b1b      	ldr	r3, [pc, #108]	; (80021d4 <HAL_GPIO_Init+0x334>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	43db      	mvns	r3, r3
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4013      	ands	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d003      	beq.n	8002188 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	4313      	orrs	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002188:	4a12      	ldr	r2, [pc, #72]	; (80021d4 <HAL_GPIO_Init+0x334>)
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	3301      	adds	r3, #1
 8002192:	61fb      	str	r3, [r7, #28]
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	2b0f      	cmp	r3, #15
 8002198:	f67f ae90 	bls.w	8001ebc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800219c:	bf00      	nop
 800219e:	bf00      	nop
 80021a0:	3724      	adds	r7, #36	; 0x24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	40023800 	.word	0x40023800
 80021b0:	40013800 	.word	0x40013800
 80021b4:	40020000 	.word	0x40020000
 80021b8:	40020400 	.word	0x40020400
 80021bc:	40020800 	.word	0x40020800
 80021c0:	40020c00 	.word	0x40020c00
 80021c4:	40021000 	.word	0x40021000
 80021c8:	40021400 	.word	0x40021400
 80021cc:	40021800 	.word	0x40021800
 80021d0:	40021c00 	.word	0x40021c00
 80021d4:	40013c00 	.word	0x40013c00

080021d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	460b      	mov	r3, r1
 80021e2:	807b      	strh	r3, [r7, #2]
 80021e4:	4613      	mov	r3, r2
 80021e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021e8:	787b      	ldrb	r3, [r7, #1]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021ee:	887a      	ldrh	r2, [r7, #2]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021f4:	e003      	b.n	80021fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021f6:	887b      	ldrh	r3, [r7, #2]
 80021f8:	041a      	lsls	r2, r3, #16
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	619a      	str	r2, [r3, #24]
}
 80021fe:	bf00      	nop
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800220a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800220c:	b08f      	sub	sp, #60	; 0x3c
 800220e:	af0a      	add	r7, sp, #40	; 0x28
 8002210:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e10f      	b.n	800243c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d106      	bne.n	800223c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f007 f8b0 	bl	800939c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2203      	movs	r2, #3
 8002240:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224c:	2b00      	cmp	r3, #0
 800224e:	d102      	bne.n	8002256 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f003 fb97 	bl	800598e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	603b      	str	r3, [r7, #0]
 8002266:	687e      	ldr	r6, [r7, #4]
 8002268:	466d      	mov	r5, sp
 800226a:	f106 0410 	add.w	r4, r6, #16
 800226e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002270:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002272:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002274:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002276:	e894 0003 	ldmia.w	r4, {r0, r1}
 800227a:	e885 0003 	stmia.w	r5, {r0, r1}
 800227e:	1d33      	adds	r3, r6, #4
 8002280:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002282:	6838      	ldr	r0, [r7, #0]
 8002284:	f003 fa6e 	bl	8005764 <USB_CoreInit>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d005      	beq.n	800229a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2202      	movs	r2, #2
 8002292:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e0d0      	b.n	800243c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2100      	movs	r1, #0
 80022a0:	4618      	mov	r0, r3
 80022a2:	f003 fb85 	bl	80059b0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022a6:	2300      	movs	r3, #0
 80022a8:	73fb      	strb	r3, [r7, #15]
 80022aa:	e04a      	b.n	8002342 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022ac:	7bfa      	ldrb	r2, [r7, #15]
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	4613      	mov	r3, r2
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	4413      	add	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	440b      	add	r3, r1
 80022ba:	333d      	adds	r3, #61	; 0x3d
 80022bc:	2201      	movs	r2, #1
 80022be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022c0:	7bfa      	ldrb	r2, [r7, #15]
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	4613      	mov	r3, r2
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	4413      	add	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	440b      	add	r3, r1
 80022ce:	333c      	adds	r3, #60	; 0x3c
 80022d0:	7bfa      	ldrb	r2, [r7, #15]
 80022d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022d4:	7bfa      	ldrb	r2, [r7, #15]
 80022d6:	7bfb      	ldrb	r3, [r7, #15]
 80022d8:	b298      	uxth	r0, r3
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	4613      	mov	r3, r2
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	4413      	add	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	440b      	add	r3, r1
 80022e6:	3344      	adds	r3, #68	; 0x44
 80022e8:	4602      	mov	r2, r0
 80022ea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022ec:	7bfa      	ldrb	r2, [r7, #15]
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	4613      	mov	r3, r2
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	4413      	add	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	440b      	add	r3, r1
 80022fa:	3340      	adds	r3, #64	; 0x40
 80022fc:	2200      	movs	r2, #0
 80022fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002300:	7bfa      	ldrb	r2, [r7, #15]
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	4613      	mov	r3, r2
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	4413      	add	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	440b      	add	r3, r1
 800230e:	3348      	adds	r3, #72	; 0x48
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002314:	7bfa      	ldrb	r2, [r7, #15]
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	4613      	mov	r3, r2
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	4413      	add	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	440b      	add	r3, r1
 8002322:	334c      	adds	r3, #76	; 0x4c
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002328:	7bfa      	ldrb	r2, [r7, #15]
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	4613      	mov	r3, r2
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	4413      	add	r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	3354      	adds	r3, #84	; 0x54
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800233c:	7bfb      	ldrb	r3, [r7, #15]
 800233e:	3301      	adds	r3, #1
 8002340:	73fb      	strb	r3, [r7, #15]
 8002342:	7bfa      	ldrb	r2, [r7, #15]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	429a      	cmp	r2, r3
 800234a:	d3af      	bcc.n	80022ac <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800234c:	2300      	movs	r3, #0
 800234e:	73fb      	strb	r3, [r7, #15]
 8002350:	e044      	b.n	80023dc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002352:	7bfa      	ldrb	r2, [r7, #15]
 8002354:	6879      	ldr	r1, [r7, #4]
 8002356:	4613      	mov	r3, r2
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	4413      	add	r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	440b      	add	r3, r1
 8002360:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002364:	2200      	movs	r2, #0
 8002366:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002368:	7bfa      	ldrb	r2, [r7, #15]
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	4613      	mov	r3, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	4413      	add	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800237a:	7bfa      	ldrb	r2, [r7, #15]
 800237c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800237e:	7bfa      	ldrb	r2, [r7, #15]
 8002380:	6879      	ldr	r1, [r7, #4]
 8002382:	4613      	mov	r3, r2
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	4413      	add	r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	440b      	add	r3, r1
 800238c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002390:	2200      	movs	r2, #0
 8002392:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002394:	7bfa      	ldrb	r2, [r7, #15]
 8002396:	6879      	ldr	r1, [r7, #4]
 8002398:	4613      	mov	r3, r2
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	4413      	add	r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	440b      	add	r3, r1
 80023a2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023aa:	7bfa      	ldrb	r2, [r7, #15]
 80023ac:	6879      	ldr	r1, [r7, #4]
 80023ae:	4613      	mov	r3, r2
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	4413      	add	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	440b      	add	r3, r1
 80023b8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023c0:	7bfa      	ldrb	r2, [r7, #15]
 80023c2:	6879      	ldr	r1, [r7, #4]
 80023c4:	4613      	mov	r3, r2
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	4413      	add	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	440b      	add	r3, r1
 80023ce:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80023d2:	2200      	movs	r2, #0
 80023d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023d6:	7bfb      	ldrb	r3, [r7, #15]
 80023d8:	3301      	adds	r3, #1
 80023da:	73fb      	strb	r3, [r7, #15]
 80023dc:	7bfa      	ldrb	r2, [r7, #15]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d3b5      	bcc.n	8002352 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	603b      	str	r3, [r7, #0]
 80023ec:	687e      	ldr	r6, [r7, #4]
 80023ee:	466d      	mov	r5, sp
 80023f0:	f106 0410 	add.w	r4, r6, #16
 80023f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002400:	e885 0003 	stmia.w	r5, {r0, r1}
 8002404:	1d33      	adds	r3, r6, #4
 8002406:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002408:	6838      	ldr	r0, [r7, #0]
 800240a:	f003 fb1d 	bl	8005a48 <USB_DevInit>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d005      	beq.n	8002420 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2202      	movs	r2, #2
 8002418:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e00d      	b.n	800243c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4618      	mov	r0, r3
 8002436:	f004 fc6c 	bl	8006d12 <USB_DevDisconnect>

  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002444 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002458:	2b01      	cmp	r3, #1
 800245a:	d101      	bne.n	8002460 <HAL_PCD_Start+0x1c>
 800245c:	2302      	movs	r3, #2
 800245e:	e020      	b.n	80024a2 <HAL_PCD_Start+0x5e>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246c:	2b01      	cmp	r3, #1
 800246e:	d109      	bne.n	8002484 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002474:	2b01      	cmp	r3, #1
 8002476:	d005      	beq.n	8002484 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800247c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4618      	mov	r0, r3
 800248a:	f003 fa6f 	bl	800596c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f004 fc1c 	bl	8006cd0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80024aa:	b590      	push	{r4, r7, lr}
 80024ac:	b08d      	sub	sp, #52	; 0x34
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024b8:	6a3b      	ldr	r3, [r7, #32]
 80024ba:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f004 fcda 	bl	8006e7a <USB_GetMode>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f040 848a 	bne.w	8002de2 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f004 fc3e 	bl	8006d54 <USB_ReadInterrupts>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f000 8480 	beq.w	8002de0 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	0a1b      	lsrs	r3, r3, #8
 80024ea:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f004 fc2b 	bl	8006d54 <USB_ReadInterrupts>
 80024fe:	4603      	mov	r3, r0
 8002500:	f003 0302 	and.w	r3, r3, #2
 8002504:	2b02      	cmp	r3, #2
 8002506:	d107      	bne.n	8002518 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	695a      	ldr	r2, [r3, #20]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f002 0202 	and.w	r2, r2, #2
 8002516:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4618      	mov	r0, r3
 800251e:	f004 fc19 	bl	8006d54 <USB_ReadInterrupts>
 8002522:	4603      	mov	r3, r0
 8002524:	f003 0310 	and.w	r3, r3, #16
 8002528:	2b10      	cmp	r3, #16
 800252a:	d161      	bne.n	80025f0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	699a      	ldr	r2, [r3, #24]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 0210 	bic.w	r2, r2, #16
 800253a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800253c:	6a3b      	ldr	r3, [r7, #32]
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	f003 020f 	and.w	r2, r3, #15
 8002548:	4613      	mov	r3, r2
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	4413      	add	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	4413      	add	r3, r2
 8002558:	3304      	adds	r3, #4
 800255a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	0c5b      	lsrs	r3, r3, #17
 8002560:	f003 030f 	and.w	r3, r3, #15
 8002564:	2b02      	cmp	r3, #2
 8002566:	d124      	bne.n	80025b2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800256e:	4013      	ands	r3, r2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d035      	beq.n	80025e0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	091b      	lsrs	r3, r3, #4
 800257c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800257e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002582:	b29b      	uxth	r3, r3
 8002584:	461a      	mov	r2, r3
 8002586:	6a38      	ldr	r0, [r7, #32]
 8002588:	f004 fa50 	bl	8006a2c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	691a      	ldr	r2, [r3, #16]
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	091b      	lsrs	r3, r3, #4
 8002594:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002598:	441a      	add	r2, r3
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	6a1a      	ldr	r2, [r3, #32]
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	091b      	lsrs	r3, r3, #4
 80025a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025aa:	441a      	add	r2, r3
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	621a      	str	r2, [r3, #32]
 80025b0:	e016      	b.n	80025e0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	0c5b      	lsrs	r3, r3, #17
 80025b6:	f003 030f 	and.w	r3, r3, #15
 80025ba:	2b06      	cmp	r3, #6
 80025bc:	d110      	bne.n	80025e0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80025c4:	2208      	movs	r2, #8
 80025c6:	4619      	mov	r1, r3
 80025c8:	6a38      	ldr	r0, [r7, #32]
 80025ca:	f004 fa2f 	bl	8006a2c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	6a1a      	ldr	r2, [r3, #32]
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	091b      	lsrs	r3, r3, #4
 80025d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025da:	441a      	add	r2, r3
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	699a      	ldr	r2, [r3, #24]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f042 0210 	orr.w	r2, r2, #16
 80025ee:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f004 fbad 	bl	8006d54 <USB_ReadInterrupts>
 80025fa:	4603      	mov	r3, r0
 80025fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002600:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002604:	f040 80a7 	bne.w	8002756 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002608:	2300      	movs	r3, #0
 800260a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4618      	mov	r0, r3
 8002612:	f004 fbb2 	bl	8006d7a <USB_ReadDevAllOutEpInterrupt>
 8002616:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002618:	e099      	b.n	800274e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800261a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 808e 	beq.w	8002742 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800262c:	b2d2      	uxtb	r2, r2
 800262e:	4611      	mov	r1, r2
 8002630:	4618      	mov	r0, r3
 8002632:	f004 fbd6 	bl	8006de2 <USB_ReadDevOutEPInterrupt>
 8002636:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00c      	beq.n	800265c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002644:	015a      	lsls	r2, r3, #5
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	4413      	add	r3, r2
 800264a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800264e:	461a      	mov	r2, r3
 8002650:	2301      	movs	r3, #1
 8002652:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002654:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 fec2 	bl	80033e0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	f003 0308 	and.w	r3, r3, #8
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00c      	beq.n	8002680 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002668:	015a      	lsls	r2, r3, #5
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	4413      	add	r3, r2
 800266e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002672:	461a      	mov	r2, r3
 8002674:	2308      	movs	r3, #8
 8002676:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002678:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 ff98 	bl	80035b0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	f003 0310 	and.w	r3, r3, #16
 8002686:	2b00      	cmp	r3, #0
 8002688:	d008      	beq.n	800269c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	015a      	lsls	r2, r3, #5
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	4413      	add	r3, r2
 8002692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002696:	461a      	mov	r2, r3
 8002698:	2310      	movs	r3, #16
 800269a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d030      	beq.n	8002708 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80026a6:	6a3b      	ldr	r3, [r7, #32]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ae:	2b80      	cmp	r3, #128	; 0x80
 80026b0:	d109      	bne.n	80026c6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	69fa      	ldr	r2, [r7, #28]
 80026bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026c4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80026c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026c8:	4613      	mov	r3, r2
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	4413      	add	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	4413      	add	r3, r2
 80026d8:	3304      	adds	r3, #4
 80026da:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	78db      	ldrb	r3, [r3, #3]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d108      	bne.n	80026f6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	2200      	movs	r2, #0
 80026e8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	4619      	mov	r1, r3
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f006 ff59 	bl	80095a8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80026f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f8:	015a      	lsls	r2, r3, #5
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	4413      	add	r3, r2
 80026fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002702:	461a      	mov	r2, r3
 8002704:	2302      	movs	r3, #2
 8002706:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	f003 0320 	and.w	r3, r3, #32
 800270e:	2b00      	cmp	r3, #0
 8002710:	d008      	beq.n	8002724 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	015a      	lsls	r2, r3, #5
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	4413      	add	r3, r2
 800271a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800271e:	461a      	mov	r2, r3
 8002720:	2320      	movs	r3, #32
 8002722:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d009      	beq.n	8002742 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	015a      	lsls	r2, r3, #5
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	4413      	add	r3, r2
 8002736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800273a:	461a      	mov	r2, r3
 800273c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002740:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	3301      	adds	r3, #1
 8002746:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800274a:	085b      	lsrs	r3, r3, #1
 800274c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800274e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002750:	2b00      	cmp	r3, #0
 8002752:	f47f af62 	bne.w	800261a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f004 fafa 	bl	8006d54 <USB_ReadInterrupts>
 8002760:	4603      	mov	r3, r0
 8002762:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002766:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800276a:	f040 80db 	bne.w	8002924 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f004 fb1b 	bl	8006dae <USB_ReadDevAllInEpInterrupt>
 8002778:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800277a:	2300      	movs	r3, #0
 800277c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800277e:	e0cd      	b.n	800291c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b00      	cmp	r3, #0
 8002788:	f000 80c2 	beq.w	8002910 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002792:	b2d2      	uxtb	r2, r2
 8002794:	4611      	mov	r1, r2
 8002796:	4618      	mov	r0, r3
 8002798:	f004 fb41 	bl	8006e1e <USB_ReadDevInEPInterrupt>
 800279c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	f003 0301 	and.w	r3, r3, #1
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d057      	beq.n	8002858 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80027a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027aa:	f003 030f 	and.w	r3, r3, #15
 80027ae:	2201      	movs	r2, #1
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	43db      	mvns	r3, r3
 80027c2:	69f9      	ldr	r1, [r7, #28]
 80027c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80027c8:	4013      	ands	r3, r2
 80027ca:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80027cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ce:	015a      	lsls	r2, r3, #5
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	4413      	add	r3, r2
 80027d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027d8:	461a      	mov	r2, r3
 80027da:	2301      	movs	r3, #1
 80027dc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d132      	bne.n	800284c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80027e6:	6879      	ldr	r1, [r7, #4]
 80027e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ea:	4613      	mov	r3, r2
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	4413      	add	r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	440b      	add	r3, r1
 80027f4:	334c      	adds	r3, #76	; 0x4c
 80027f6:	6819      	ldr	r1, [r3, #0]
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027fc:	4613      	mov	r3, r2
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	4413      	add	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4403      	add	r3, r0
 8002806:	3348      	adds	r3, #72	; 0x48
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4419      	add	r1, r3
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002810:	4613      	mov	r3, r2
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	4413      	add	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4403      	add	r3, r0
 800281a:	334c      	adds	r3, #76	; 0x4c
 800281c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	2b00      	cmp	r3, #0
 8002822:	d113      	bne.n	800284c <HAL_PCD_IRQHandler+0x3a2>
 8002824:	6879      	ldr	r1, [r7, #4]
 8002826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002828:	4613      	mov	r3, r2
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	4413      	add	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	440b      	add	r3, r1
 8002832:	3354      	adds	r3, #84	; 0x54
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d108      	bne.n	800284c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6818      	ldr	r0, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002844:	461a      	mov	r2, r3
 8002846:	2101      	movs	r1, #1
 8002848:	f004 fb48 	bl	8006edc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284e:	b2db      	uxtb	r3, r3
 8002850:	4619      	mov	r1, r3
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f006 fe23 	bl	800949e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	f003 0308 	and.w	r3, r3, #8
 800285e:	2b00      	cmp	r3, #0
 8002860:	d008      	beq.n	8002874 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	015a      	lsls	r2, r3, #5
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	4413      	add	r3, r2
 800286a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800286e:	461a      	mov	r2, r3
 8002870:	2308      	movs	r3, #8
 8002872:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	f003 0310 	and.w	r3, r3, #16
 800287a:	2b00      	cmp	r3, #0
 800287c:	d008      	beq.n	8002890 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	015a      	lsls	r2, r3, #5
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	4413      	add	r3, r2
 8002886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800288a:	461a      	mov	r2, r3
 800288c:	2310      	movs	r3, #16
 800288e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002896:	2b00      	cmp	r3, #0
 8002898:	d008      	beq.n	80028ac <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	015a      	lsls	r2, r3, #5
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	4413      	add	r3, r2
 80028a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028a6:	461a      	mov	r2, r3
 80028a8:	2340      	movs	r3, #64	; 0x40
 80028aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d023      	beq.n	80028fe <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80028b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028b8:	6a38      	ldr	r0, [r7, #32]
 80028ba:	f003 fa29 	bl	8005d10 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80028be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028c0:	4613      	mov	r3, r2
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	4413      	add	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	3338      	adds	r3, #56	; 0x38
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	4413      	add	r3, r2
 80028ce:	3304      	adds	r3, #4
 80028d0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	78db      	ldrb	r3, [r3, #3]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d108      	bne.n	80028ec <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	2200      	movs	r2, #0
 80028de:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	4619      	mov	r1, r3
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f006 fe70 	bl	80095cc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	015a      	lsls	r2, r3, #5
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	4413      	add	r3, r2
 80028f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028f8:	461a      	mov	r2, r3
 80028fa:	2302      	movs	r3, #2
 80028fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002904:	2b00      	cmp	r3, #0
 8002906:	d003      	beq.n	8002910 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002908:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 fcdb 	bl	80032c6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002912:	3301      	adds	r3, #1
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002918:	085b      	lsrs	r3, r3, #1
 800291a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800291c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800291e:	2b00      	cmp	r3, #0
 8002920:	f47f af2e 	bne.w	8002780 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4618      	mov	r0, r3
 800292a:	f004 fa13 	bl	8006d54 <USB_ReadInterrupts>
 800292e:	4603      	mov	r3, r0
 8002930:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002934:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002938:	d122      	bne.n	8002980 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	69fa      	ldr	r2, [r7, #28]
 8002944:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002948:	f023 0301 	bic.w	r3, r3, #1
 800294c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002954:	2b01      	cmp	r3, #1
 8002956:	d108      	bne.n	800296a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002960:	2100      	movs	r1, #0
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f000 fec2 	bl	80036ec <HAL_PCDEx_LPM_Callback>
 8002968:	e002      	b.n	8002970 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f006 fe0e 	bl	800958c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	695a      	ldr	r2, [r3, #20]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800297e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f004 f9e5 	bl	8006d54 <USB_ReadInterrupts>
 800298a:	4603      	mov	r3, r0
 800298c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002990:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002994:	d112      	bne.n	80029bc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d102      	bne.n	80029ac <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f006 fdca 	bl	8009540 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	695a      	ldr	r2, [r3, #20]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80029ba:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f004 f9c7 	bl	8006d54 <USB_ReadInterrupts>
 80029c6:	4603      	mov	r3, r0
 80029c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029d0:	f040 80b7 	bne.w	8002b42 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	69fa      	ldr	r2, [r7, #28]
 80029de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029e2:	f023 0301 	bic.w	r3, r3, #1
 80029e6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2110      	movs	r1, #16
 80029ee:	4618      	mov	r0, r3
 80029f0:	f003 f98e 	bl	8005d10 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029f4:	2300      	movs	r3, #0
 80029f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029f8:	e046      	b.n	8002a88 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80029fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029fc:	015a      	lsls	r2, r3, #5
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	4413      	add	r3, r2
 8002a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a06:	461a      	mov	r2, r3
 8002a08:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a0c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a10:	015a      	lsls	r2, r3, #5
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	4413      	add	r3, r2
 8002a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a1e:	0151      	lsls	r1, r2, #5
 8002a20:	69fa      	ldr	r2, [r7, #28]
 8002a22:	440a      	add	r2, r1
 8002a24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002a28:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a2c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a30:	015a      	lsls	r2, r3, #5
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	4413      	add	r3, r2
 8002a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a40:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a44:	015a      	lsls	r2, r3, #5
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	4413      	add	r3, r2
 8002a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a52:	0151      	lsls	r1, r2, #5
 8002a54:	69fa      	ldr	r2, [r7, #28]
 8002a56:	440a      	add	r2, r1
 8002a58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a5c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a60:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a64:	015a      	lsls	r2, r3, #5
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	4413      	add	r3, r2
 8002a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a72:	0151      	lsls	r1, r2, #5
 8002a74:	69fa      	ldr	r2, [r7, #28]
 8002a76:	440a      	add	r2, r1
 8002a78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a7c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a80:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a84:	3301      	adds	r3, #1
 8002a86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d3b3      	bcc.n	80029fa <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a98:	69db      	ldr	r3, [r3, #28]
 8002a9a:	69fa      	ldr	r2, [r7, #28]
 8002a9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aa0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002aa4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d016      	beq.n	8002adc <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ab8:	69fa      	ldr	r2, [r7, #28]
 8002aba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002abe:	f043 030b 	orr.w	r3, r3, #11
 8002ac2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ace:	69fa      	ldr	r2, [r7, #28]
 8002ad0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ad4:	f043 030b 	orr.w	r3, r3, #11
 8002ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8002ada:	e015      	b.n	8002b08 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	69fa      	ldr	r2, [r7, #28]
 8002ae6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002aee:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002af2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	69fa      	ldr	r2, [r7, #28]
 8002afe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b02:	f043 030b 	orr.w	r3, r3, #11
 8002b06:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	69fa      	ldr	r2, [r7, #28]
 8002b12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b16:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002b1a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6818      	ldr	r0, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	f004 f9d5 	bl	8006edc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	695a      	ldr	r2, [r3, #20]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002b40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f004 f904 	bl	8006d54 <USB_ReadInterrupts>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b56:	d124      	bne.n	8002ba2 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f004 f99a 	bl	8006e96 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f003 f94f 	bl	8005e0a <USB_GetDevSpeed>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	461a      	mov	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681c      	ldr	r4, [r3, #0]
 8002b78:	f001 fa28 	bl	8003fcc <HAL_RCC_GetHCLKFreq>
 8002b7c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	461a      	mov	r2, r3
 8002b86:	4620      	mov	r0, r4
 8002b88:	f002 fe4e 	bl	8005828 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f006 fcae 	bl	80094ee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	695a      	ldr	r2, [r3, #20]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002ba0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f004 f8d4 	bl	8006d54 <USB_ReadInterrupts>
 8002bac:	4603      	mov	r3, r0
 8002bae:	f003 0308 	and.w	r3, r3, #8
 8002bb2:	2b08      	cmp	r3, #8
 8002bb4:	d10a      	bne.n	8002bcc <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f006 fc8b 	bl	80094d2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	695a      	ldr	r2, [r3, #20]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f002 0208 	and.w	r2, r2, #8
 8002bca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f004 f8bf 	bl	8006d54 <USB_ReadInterrupts>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bdc:	2b80      	cmp	r3, #128	; 0x80
 8002bde:	d122      	bne.n	8002c26 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002be0:	6a3b      	ldr	r3, [r7, #32]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002be8:	6a3b      	ldr	r3, [r7, #32]
 8002bea:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002bec:	2301      	movs	r3, #1
 8002bee:	627b      	str	r3, [r7, #36]	; 0x24
 8002bf0:	e014      	b.n	8002c1c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002bf2:	6879      	ldr	r1, [r7, #4]
 8002bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	440b      	add	r3, r1
 8002c00:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d105      	bne.n	8002c16 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	4619      	mov	r1, r3
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 fb27 	bl	8003264 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c18:	3301      	adds	r3, #1
 8002c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d3e5      	bcc.n	8002bf2 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f004 f892 	bl	8006d54 <USB_ReadInterrupts>
 8002c30:	4603      	mov	r3, r0
 8002c32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c3a:	d13b      	bne.n	8002cb4 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c40:	e02b      	b.n	8002c9a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c44:	015a      	lsls	r2, r3, #5
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	4413      	add	r3, r2
 8002c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c56:	4613      	mov	r3, r2
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	4413      	add	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	440b      	add	r3, r1
 8002c60:	3340      	adds	r3, #64	; 0x40
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d115      	bne.n	8002c94 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002c68:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	da12      	bge.n	8002c94 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c72:	4613      	mov	r3, r2
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	4413      	add	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	440b      	add	r3, r1
 8002c7c:	333f      	adds	r3, #63	; 0x3f
 8002c7e:	2201      	movs	r2, #1
 8002c80:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 fae8 	bl	8003264 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c96:	3301      	adds	r3, #1
 8002c98:	627b      	str	r3, [r7, #36]	; 0x24
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d3ce      	bcc.n	8002c42 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	695a      	ldr	r2, [r3, #20]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002cb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f004 f84b 	bl	8006d54 <USB_ReadInterrupts>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cc4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cc8:	d155      	bne.n	8002d76 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cca:	2301      	movs	r3, #1
 8002ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8002cce:	e045      	b.n	8002d5c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd2:	015a      	lsls	r2, r3, #5
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ce0:	6879      	ldr	r1, [r7, #4]
 8002ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	4413      	add	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	440b      	add	r3, r1
 8002cee:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d12e      	bne.n	8002d56 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002cf8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	da2b      	bge.n	8002d56 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002d0a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d121      	bne.n	8002d56 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002d12:	6879      	ldr	r1, [r7, #4]
 8002d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d16:	4613      	mov	r3, r2
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	4413      	add	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	440b      	add	r3, r1
 8002d20:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002d24:	2201      	movs	r2, #1
 8002d26:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002d28:	6a3b      	ldr	r3, [r7, #32]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002d30:	6a3b      	ldr	r3, [r7, #32]
 8002d32:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002d34:	6a3b      	ldr	r3, [r7, #32]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d10a      	bne.n	8002d56 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	69fa      	ldr	r2, [r7, #28]
 8002d4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d52:	6053      	str	r3, [r2, #4]
            break;
 8002d54:	e007      	b.n	8002d66 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d58:	3301      	adds	r3, #1
 8002d5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d3b4      	bcc.n	8002cd0 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	695a      	ldr	r2, [r3, #20]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002d74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f003 ffea 	bl	8006d54 <USB_ReadInterrupts>
 8002d80:	4603      	mov	r3, r0
 8002d82:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d8a:	d10a      	bne.n	8002da2 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f006 fc2f 	bl	80095f0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	695a      	ldr	r2, [r3, #20]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002da0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f003 ffd4 	bl	8006d54 <USB_ReadInterrupts>
 8002dac:	4603      	mov	r3, r0
 8002dae:	f003 0304 	and.w	r3, r3, #4
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	d115      	bne.n	8002de2 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	f003 0304 	and.w	r3, r3, #4
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d002      	beq.n	8002dce <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f006 fc1f 	bl	800960c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6859      	ldr	r1, [r3, #4]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	605a      	str	r2, [r3, #4]
 8002dde:	e000      	b.n	8002de2 <HAL_PCD_IRQHandler+0x938>
      return;
 8002de0:	bf00      	nop
    }
  }
}
 8002de2:	3734      	adds	r7, #52	; 0x34
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd90      	pop	{r4, r7, pc}

08002de8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	460b      	mov	r3, r1
 8002df2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d101      	bne.n	8002e02 <HAL_PCD_SetAddress+0x1a>
 8002dfe:	2302      	movs	r3, #2
 8002e00:	e013      	b.n	8002e2a <HAL_PCD_SetAddress+0x42>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	78fa      	ldrb	r2, [r7, #3]
 8002e0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	78fa      	ldrb	r2, [r7, #3]
 8002e18:	4611      	mov	r1, r2
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f003 ff32 	bl	8006c84 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b084      	sub	sp, #16
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
 8002e3a:	4608      	mov	r0, r1
 8002e3c:	4611      	mov	r1, r2
 8002e3e:	461a      	mov	r2, r3
 8002e40:	4603      	mov	r3, r0
 8002e42:	70fb      	strb	r3, [r7, #3]
 8002e44:	460b      	mov	r3, r1
 8002e46:	803b      	strh	r3, [r7, #0]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	da0f      	bge.n	8002e78 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e58:	78fb      	ldrb	r3, [r7, #3]
 8002e5a:	f003 020f 	and.w	r2, r3, #15
 8002e5e:	4613      	mov	r3, r2
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	4413      	add	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	3338      	adds	r3, #56	; 0x38
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	3304      	adds	r3, #4
 8002e6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2201      	movs	r2, #1
 8002e74:	705a      	strb	r2, [r3, #1]
 8002e76:	e00f      	b.n	8002e98 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e78:	78fb      	ldrb	r3, [r7, #3]
 8002e7a:	f003 020f 	and.w	r2, r3, #15
 8002e7e:	4613      	mov	r3, r2
 8002e80:	00db      	lsls	r3, r3, #3
 8002e82:	4413      	add	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	3304      	adds	r3, #4
 8002e90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002e98:	78fb      	ldrb	r3, [r7, #3]
 8002e9a:	f003 030f 	and.w	r3, r3, #15
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002ea4:	883a      	ldrh	r2, [r7, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	78ba      	ldrb	r2, [r7, #2]
 8002eae:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	785b      	ldrb	r3, [r3, #1]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d004      	beq.n	8002ec2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ec2:	78bb      	ldrb	r3, [r7, #2]
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d102      	bne.n	8002ece <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d101      	bne.n	8002edc <HAL_PCD_EP_Open+0xaa>
 8002ed8:	2302      	movs	r3, #2
 8002eda:	e00e      	b.n	8002efa <HAL_PCD_EP_Open+0xc8>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68f9      	ldr	r1, [r7, #12]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f002 ffb2 	bl	8005e54 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002ef8:	7afb      	ldrb	r3, [r7, #11]
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b084      	sub	sp, #16
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	da0f      	bge.n	8002f36 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f16:	78fb      	ldrb	r3, [r7, #3]
 8002f18:	f003 020f 	and.w	r2, r3, #15
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	4413      	add	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	3338      	adds	r3, #56	; 0x38
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	4413      	add	r3, r2
 8002f2a:	3304      	adds	r3, #4
 8002f2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2201      	movs	r2, #1
 8002f32:	705a      	strb	r2, [r3, #1]
 8002f34:	e00f      	b.n	8002f56 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f36:	78fb      	ldrb	r3, [r7, #3]
 8002f38:	f003 020f 	and.w	r2, r3, #15
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	4413      	add	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	3304      	adds	r3, #4
 8002f4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002f56:	78fb      	ldrb	r3, [r7, #3]
 8002f58:	f003 030f 	and.w	r3, r3, #15
 8002f5c:	b2da      	uxtb	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d101      	bne.n	8002f70 <HAL_PCD_EP_Close+0x6e>
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	e00e      	b.n	8002f8e <HAL_PCD_EP_Close+0x8c>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68f9      	ldr	r1, [r7, #12]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f002 fff0 	bl	8005f64 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b086      	sub	sp, #24
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	60f8      	str	r0, [r7, #12]
 8002f9e:	607a      	str	r2, [r7, #4]
 8002fa0:	603b      	str	r3, [r7, #0]
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fa6:	7afb      	ldrb	r3, [r7, #11]
 8002fa8:	f003 020f 	and.w	r2, r3, #15
 8002fac:	4613      	mov	r3, r2
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	4413      	add	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	4413      	add	r3, r2
 8002fbc:	3304      	adds	r3, #4
 8002fbe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fd8:	7afb      	ldrb	r3, [r7, #11]
 8002fda:	f003 030f 	and.w	r3, r3, #15
 8002fde:	b2da      	uxtb	r2, r3
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d102      	bne.n	8002ff2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ff2:	7afb      	ldrb	r3, [r7, #11]
 8002ff4:	f003 030f 	and.w	r3, r3, #15
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d109      	bne.n	8003010 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6818      	ldr	r0, [r3, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	b2db      	uxtb	r3, r3
 8003006:	461a      	mov	r2, r3
 8003008:	6979      	ldr	r1, [r7, #20]
 800300a:	f003 facf 	bl	80065ac <USB_EP0StartXfer>
 800300e:	e008      	b.n	8003022 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6818      	ldr	r0, [r3, #0]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	b2db      	uxtb	r3, r3
 800301a:	461a      	mov	r2, r3
 800301c:	6979      	ldr	r1, [r7, #20]
 800301e:	f003 f87d 	bl	800611c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3718      	adds	r7, #24
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	460b      	mov	r3, r1
 8003036:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003038:	78fb      	ldrb	r3, [r7, #3]
 800303a:	f003 020f 	and.w	r2, r3, #15
 800303e:	6879      	ldr	r1, [r7, #4]
 8003040:	4613      	mov	r3, r2
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	4413      	add	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	440b      	add	r3, r1
 800304a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800304e:	681b      	ldr	r3, [r3, #0]
}
 8003050:	4618      	mov	r0, r3
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	607a      	str	r2, [r7, #4]
 8003066:	603b      	str	r3, [r7, #0]
 8003068:	460b      	mov	r3, r1
 800306a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800306c:	7afb      	ldrb	r3, [r7, #11]
 800306e:	f003 020f 	and.w	r2, r3, #15
 8003072:	4613      	mov	r3, r2
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	4413      	add	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	3338      	adds	r3, #56	; 0x38
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	4413      	add	r3, r2
 8003080:	3304      	adds	r3, #4
 8003082:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	2200      	movs	r2, #0
 8003094:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	2201      	movs	r2, #1
 800309a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800309c:	7afb      	ldrb	r3, [r7, #11]
 800309e:	f003 030f 	and.w	r3, r3, #15
 80030a2:	b2da      	uxtb	r2, r3
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d102      	bne.n	80030b6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80030b6:	7afb      	ldrb	r3, [r7, #11]
 80030b8:	f003 030f 	and.w	r3, r3, #15
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d109      	bne.n	80030d4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6818      	ldr	r0, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	461a      	mov	r2, r3
 80030cc:	6979      	ldr	r1, [r7, #20]
 80030ce:	f003 fa6d 	bl	80065ac <USB_EP0StartXfer>
 80030d2:	e008      	b.n	80030e6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6818      	ldr	r0, [r3, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	461a      	mov	r2, r3
 80030e0:	6979      	ldr	r1, [r7, #20]
 80030e2:	f003 f81b 	bl	800611c <USB_EPStartXfer>
  }

  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3718      	adds	r7, #24
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	460b      	mov	r3, r1
 80030fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80030fc:	78fb      	ldrb	r3, [r7, #3]
 80030fe:	f003 020f 	and.w	r2, r3, #15
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	429a      	cmp	r2, r3
 8003108:	d901      	bls.n	800310e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e050      	b.n	80031b0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800310e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003112:	2b00      	cmp	r3, #0
 8003114:	da0f      	bge.n	8003136 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003116:	78fb      	ldrb	r3, [r7, #3]
 8003118:	f003 020f 	and.w	r2, r3, #15
 800311c:	4613      	mov	r3, r2
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	4413      	add	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	3338      	adds	r3, #56	; 0x38
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	4413      	add	r3, r2
 800312a:	3304      	adds	r3, #4
 800312c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2201      	movs	r2, #1
 8003132:	705a      	strb	r2, [r3, #1]
 8003134:	e00d      	b.n	8003152 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003136:	78fa      	ldrb	r2, [r7, #3]
 8003138:	4613      	mov	r3, r2
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	4413      	add	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	4413      	add	r3, r2
 8003148:	3304      	adds	r3, #4
 800314a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2201      	movs	r2, #1
 8003156:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003158:	78fb      	ldrb	r3, [r7, #3]
 800315a:	f003 030f 	and.w	r3, r3, #15
 800315e:	b2da      	uxtb	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800316a:	2b01      	cmp	r3, #1
 800316c:	d101      	bne.n	8003172 <HAL_PCD_EP_SetStall+0x82>
 800316e:	2302      	movs	r3, #2
 8003170:	e01e      	b.n	80031b0 <HAL_PCD_EP_SetStall+0xc0>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68f9      	ldr	r1, [r7, #12]
 8003180:	4618      	mov	r0, r3
 8003182:	f003 fcab 	bl	8006adc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003186:	78fb      	ldrb	r3, [r7, #3]
 8003188:	f003 030f 	and.w	r3, r3, #15
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10a      	bne.n	80031a6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6818      	ldr	r0, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	b2d9      	uxtb	r1, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80031a0:	461a      	mov	r2, r3
 80031a2:	f003 fe9b 	bl	8006edc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	460b      	mov	r3, r1
 80031c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80031c4:	78fb      	ldrb	r3, [r7, #3]
 80031c6:	f003 020f 	and.w	r2, r3, #15
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d901      	bls.n	80031d6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e042      	b.n	800325c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	da0f      	bge.n	80031fe <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031de:	78fb      	ldrb	r3, [r7, #3]
 80031e0:	f003 020f 	and.w	r2, r3, #15
 80031e4:	4613      	mov	r3, r2
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	4413      	add	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	3338      	adds	r3, #56	; 0x38
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	4413      	add	r3, r2
 80031f2:	3304      	adds	r3, #4
 80031f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2201      	movs	r2, #1
 80031fa:	705a      	strb	r2, [r3, #1]
 80031fc:	e00f      	b.n	800321e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031fe:	78fb      	ldrb	r3, [r7, #3]
 8003200:	f003 020f 	and.w	r2, r3, #15
 8003204:	4613      	mov	r3, r2
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	4413      	add	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	4413      	add	r3, r2
 8003214:	3304      	adds	r3, #4
 8003216:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003224:	78fb      	ldrb	r3, [r7, #3]
 8003226:	f003 030f 	and.w	r3, r3, #15
 800322a:	b2da      	uxtb	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003236:	2b01      	cmp	r3, #1
 8003238:	d101      	bne.n	800323e <HAL_PCD_EP_ClrStall+0x86>
 800323a:	2302      	movs	r3, #2
 800323c:	e00e      	b.n	800325c <HAL_PCD_EP_ClrStall+0xa4>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68f9      	ldr	r1, [r7, #12]
 800324c:	4618      	mov	r0, r3
 800324e:	f003 fcb3 	bl	8006bb8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	460b      	mov	r3, r1
 800326e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003270:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003274:	2b00      	cmp	r3, #0
 8003276:	da0c      	bge.n	8003292 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003278:	78fb      	ldrb	r3, [r7, #3]
 800327a:	f003 020f 	and.w	r2, r3, #15
 800327e:	4613      	mov	r3, r2
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	4413      	add	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	3338      	adds	r3, #56	; 0x38
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	4413      	add	r3, r2
 800328c:	3304      	adds	r3, #4
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	e00c      	b.n	80032ac <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003292:	78fb      	ldrb	r3, [r7, #3]
 8003294:	f003 020f 	and.w	r2, r3, #15
 8003298:	4613      	mov	r3, r2
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	4413      	add	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	4413      	add	r3, r2
 80032a8:	3304      	adds	r3, #4
 80032aa:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68f9      	ldr	r1, [r7, #12]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f003 fad2 	bl	800685c <USB_EPStopXfer>
 80032b8:	4603      	mov	r3, r0
 80032ba:	72fb      	strb	r3, [r7, #11]

  return ret;
 80032bc:	7afb      	ldrb	r3, [r7, #11]
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b08a      	sub	sp, #40	; 0x28
 80032ca:	af02      	add	r7, sp, #8
 80032cc:	6078      	str	r0, [r7, #4]
 80032ce:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	4613      	mov	r3, r2
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	4413      	add	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	3338      	adds	r3, #56	; 0x38
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	4413      	add	r3, r2
 80032ea:	3304      	adds	r3, #4
 80032ec:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6a1a      	ldr	r2, [r3, #32]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d901      	bls.n	80032fe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e06c      	b.n	80033d8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	699a      	ldr	r2, [r3, #24]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	69fa      	ldr	r2, [r7, #28]
 8003310:	429a      	cmp	r2, r3
 8003312:	d902      	bls.n	800331a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	3303      	adds	r3, #3
 800331e:	089b      	lsrs	r3, r3, #2
 8003320:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003322:	e02b      	b.n	800337c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	699a      	ldr	r2, [r3, #24]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	69fa      	ldr	r2, [r7, #28]
 8003336:	429a      	cmp	r2, r3
 8003338:	d902      	bls.n	8003340 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	3303      	adds	r3, #3
 8003344:	089b      	lsrs	r3, r3, #2
 8003346:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6919      	ldr	r1, [r3, #16]
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	b2da      	uxtb	r2, r3
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003358:	b2db      	uxtb	r3, r3
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	4603      	mov	r3, r0
 800335e:	6978      	ldr	r0, [r7, #20]
 8003360:	f003 fb26 	bl	80069b0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	691a      	ldr	r2, [r3, #16]
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	441a      	add	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6a1a      	ldr	r2, [r3, #32]
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	441a      	add	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	015a      	lsls	r2, r3, #5
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	4413      	add	r3, r2
 8003384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	b29b      	uxth	r3, r3
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	429a      	cmp	r2, r3
 8003390:	d809      	bhi.n	80033a6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6a1a      	ldr	r2, [r3, #32]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800339a:	429a      	cmp	r2, r3
 800339c:	d203      	bcs.n	80033a6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1be      	bne.n	8003324 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	699a      	ldr	r2, [r3, #24]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d811      	bhi.n	80033d6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	f003 030f 	and.w	r3, r3, #15
 80033b8:	2201      	movs	r2, #1
 80033ba:	fa02 f303 	lsl.w	r3, r2, r3
 80033be:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	43db      	mvns	r3, r3
 80033cc:	6939      	ldr	r1, [r7, #16]
 80033ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033d2:	4013      	ands	r3, r2
 80033d4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3720      	adds	r7, #32
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b088      	sub	sp, #32
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	333c      	adds	r3, #60	; 0x3c
 80033f8:	3304      	adds	r3, #4
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	015a      	lsls	r2, r3, #5
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	4413      	add	r3, r2
 8003406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d17b      	bne.n	800350e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	f003 0308 	and.w	r3, r3, #8
 800341c:	2b00      	cmp	r3, #0
 800341e:	d015      	beq.n	800344c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	4a61      	ldr	r2, [pc, #388]	; (80035a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003424:	4293      	cmp	r3, r2
 8003426:	f240 80b9 	bls.w	800359c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 80b3 	beq.w	800359c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	015a      	lsls	r2, r3, #5
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	4413      	add	r3, r2
 800343e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003442:	461a      	mov	r2, r3
 8003444:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003448:	6093      	str	r3, [r2, #8]
 800344a:	e0a7      	b.n	800359c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	f003 0320 	and.w	r3, r3, #32
 8003452:	2b00      	cmp	r3, #0
 8003454:	d009      	beq.n	800346a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	015a      	lsls	r2, r3, #5
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	4413      	add	r3, r2
 800345e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003462:	461a      	mov	r2, r3
 8003464:	2320      	movs	r3, #32
 8003466:	6093      	str	r3, [r2, #8]
 8003468:	e098      	b.n	800359c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003470:	2b00      	cmp	r3, #0
 8003472:	f040 8093 	bne.w	800359c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	4a4b      	ldr	r2, [pc, #300]	; (80035a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d90f      	bls.n	800349e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00a      	beq.n	800349e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	015a      	lsls	r2, r3, #5
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	4413      	add	r3, r2
 8003490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003494:	461a      	mov	r2, r3
 8003496:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800349a:	6093      	str	r3, [r2, #8]
 800349c:	e07e      	b.n	800359c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800349e:	683a      	ldr	r2, [r7, #0]
 80034a0:	4613      	mov	r3, r2
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	4413      	add	r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	4413      	add	r3, r2
 80034b0:	3304      	adds	r3, #4
 80034b2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	69da      	ldr	r2, [r3, #28]
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	0159      	lsls	r1, r3, #5
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	440b      	add	r3, r1
 80034c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ca:	1ad2      	subs	r2, r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d114      	bne.n	8003500 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d109      	bne.n	80034f2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6818      	ldr	r0, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80034e8:	461a      	mov	r2, r3
 80034ea:	2101      	movs	r1, #1
 80034ec:	f003 fcf6 	bl	8006edc <USB_EP0_OutStart>
 80034f0:	e006      	b.n	8003500 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	691a      	ldr	r2, [r3, #16]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	441a      	add	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	b2db      	uxtb	r3, r3
 8003504:	4619      	mov	r1, r3
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f005 ffae 	bl	8009468 <HAL_PCD_DataOutStageCallback>
 800350c:	e046      	b.n	800359c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	4a26      	ldr	r2, [pc, #152]	; (80035ac <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d124      	bne.n	8003560 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00a      	beq.n	8003536 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	015a      	lsls	r2, r3, #5
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	4413      	add	r3, r2
 8003528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800352c:	461a      	mov	r2, r3
 800352e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003532:	6093      	str	r3, [r2, #8]
 8003534:	e032      	b.n	800359c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	f003 0320 	and.w	r3, r3, #32
 800353c:	2b00      	cmp	r3, #0
 800353e:	d008      	beq.n	8003552 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	015a      	lsls	r2, r3, #5
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	4413      	add	r3, r2
 8003548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800354c:	461a      	mov	r2, r3
 800354e:	2320      	movs	r3, #32
 8003550:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	b2db      	uxtb	r3, r3
 8003556:	4619      	mov	r1, r3
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f005 ff85 	bl	8009468 <HAL_PCD_DataOutStageCallback>
 800355e:	e01d      	b.n	800359c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d114      	bne.n	8003590 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003566:	6879      	ldr	r1, [r7, #4]
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	4613      	mov	r3, r2
 800356c:	00db      	lsls	r3, r3, #3
 800356e:	4413      	add	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	440b      	add	r3, r1
 8003574:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d108      	bne.n	8003590 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6818      	ldr	r0, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003588:	461a      	mov	r2, r3
 800358a:	2100      	movs	r1, #0
 800358c:	f003 fca6 	bl	8006edc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	b2db      	uxtb	r3, r3
 8003594:	4619      	mov	r1, r3
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f005 ff66 	bl	8009468 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3720      	adds	r7, #32
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	4f54300a 	.word	0x4f54300a
 80035ac:	4f54310a 	.word	0x4f54310a

080035b0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	333c      	adds	r3, #60	; 0x3c
 80035c8:	3304      	adds	r3, #4
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	015a      	lsls	r2, r3, #5
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	4413      	add	r3, r2
 80035d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	4a15      	ldr	r2, [pc, #84]	; (8003638 <PCD_EP_OutSetupPacket_int+0x88>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d90e      	bls.n	8003604 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d009      	beq.n	8003604 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	015a      	lsls	r2, r3, #5
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	4413      	add	r3, r2
 80035f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035fc:	461a      	mov	r2, r3
 80035fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003602:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f005 ff1d 	bl	8009444 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	4a0a      	ldr	r2, [pc, #40]	; (8003638 <PCD_EP_OutSetupPacket_int+0x88>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d90c      	bls.n	800362c <PCD_EP_OutSetupPacket_int+0x7c>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d108      	bne.n	800362c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6818      	ldr	r0, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003624:	461a      	mov	r2, r3
 8003626:	2101      	movs	r1, #1
 8003628:	f003 fc58 	bl	8006edc <USB_EP0_OutStart>
  }

  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3718      	adds	r7, #24
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	4f54300a 	.word	0x4f54300a

0800363c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	460b      	mov	r3, r1
 8003646:	70fb      	strb	r3, [r7, #3]
 8003648:	4613      	mov	r3, r2
 800364a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003652:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003654:	78fb      	ldrb	r3, [r7, #3]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d107      	bne.n	800366a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800365a:	883b      	ldrh	r3, [r7, #0]
 800365c:	0419      	lsls	r1, r3, #16
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68ba      	ldr	r2, [r7, #8]
 8003664:	430a      	orrs	r2, r1
 8003666:	629a      	str	r2, [r3, #40]	; 0x28
 8003668:	e028      	b.n	80036bc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003670:	0c1b      	lsrs	r3, r3, #16
 8003672:	68ba      	ldr	r2, [r7, #8]
 8003674:	4413      	add	r3, r2
 8003676:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003678:	2300      	movs	r3, #0
 800367a:	73fb      	strb	r3, [r7, #15]
 800367c:	e00d      	b.n	800369a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	7bfb      	ldrb	r3, [r7, #15]
 8003684:	3340      	adds	r3, #64	; 0x40
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4413      	add	r3, r2
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	0c1b      	lsrs	r3, r3, #16
 800368e:	68ba      	ldr	r2, [r7, #8]
 8003690:	4413      	add	r3, r2
 8003692:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003694:	7bfb      	ldrb	r3, [r7, #15]
 8003696:	3301      	adds	r3, #1
 8003698:	73fb      	strb	r3, [r7, #15]
 800369a:	7bfa      	ldrb	r2, [r7, #15]
 800369c:	78fb      	ldrb	r3, [r7, #3]
 800369e:	3b01      	subs	r3, #1
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d3ec      	bcc.n	800367e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80036a4:	883b      	ldrh	r3, [r7, #0]
 80036a6:	0418      	lsls	r0, r3, #16
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6819      	ldr	r1, [r3, #0]
 80036ac:	78fb      	ldrb	r3, [r7, #3]
 80036ae:	3b01      	subs	r3, #1
 80036b0:	68ba      	ldr	r2, [r7, #8]
 80036b2:	4302      	orrs	r2, r0
 80036b4:	3340      	adds	r3, #64	; 0x40
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	440b      	add	r3, r1
 80036ba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3714      	adds	r7, #20
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr

080036ca <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80036ca:	b480      	push	{r7}
 80036cc:	b083      	sub	sp, #12
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
 80036d2:	460b      	mov	r3, r1
 80036d4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	887a      	ldrh	r2, [r7, #2]
 80036dc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	460b      	mov	r3, r1
 80036f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e267      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	2b00      	cmp	r3, #0
 8003720:	d075      	beq.n	800380e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003722:	4b88      	ldr	r3, [pc, #544]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f003 030c 	and.w	r3, r3, #12
 800372a:	2b04      	cmp	r3, #4
 800372c:	d00c      	beq.n	8003748 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800372e:	4b85      	ldr	r3, [pc, #532]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003736:	2b08      	cmp	r3, #8
 8003738:	d112      	bne.n	8003760 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800373a:	4b82      	ldr	r3, [pc, #520]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003742:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003746:	d10b      	bne.n	8003760 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003748:	4b7e      	ldr	r3, [pc, #504]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d05b      	beq.n	800380c <HAL_RCC_OscConfig+0x108>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d157      	bne.n	800380c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e242      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003768:	d106      	bne.n	8003778 <HAL_RCC_OscConfig+0x74>
 800376a:	4b76      	ldr	r3, [pc, #472]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a75      	ldr	r2, [pc, #468]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 8003770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003774:	6013      	str	r3, [r2, #0]
 8003776:	e01d      	b.n	80037b4 <HAL_RCC_OscConfig+0xb0>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003780:	d10c      	bne.n	800379c <HAL_RCC_OscConfig+0x98>
 8003782:	4b70      	ldr	r3, [pc, #448]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a6f      	ldr	r2, [pc, #444]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 8003788:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800378c:	6013      	str	r3, [r2, #0]
 800378e:	4b6d      	ldr	r3, [pc, #436]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a6c      	ldr	r2, [pc, #432]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 8003794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003798:	6013      	str	r3, [r2, #0]
 800379a:	e00b      	b.n	80037b4 <HAL_RCC_OscConfig+0xb0>
 800379c:	4b69      	ldr	r3, [pc, #420]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a68      	ldr	r2, [pc, #416]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 80037a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037a6:	6013      	str	r3, [r2, #0]
 80037a8:	4b66      	ldr	r3, [pc, #408]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a65      	ldr	r2, [pc, #404]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 80037ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d013      	beq.n	80037e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037bc:	f7fe fa2e 	bl	8001c1c <HAL_GetTick>
 80037c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037c2:	e008      	b.n	80037d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037c4:	f7fe fa2a 	bl	8001c1c <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b64      	cmp	r3, #100	; 0x64
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e207      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037d6:	4b5b      	ldr	r3, [pc, #364]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d0f0      	beq.n	80037c4 <HAL_RCC_OscConfig+0xc0>
 80037e2:	e014      	b.n	800380e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e4:	f7fe fa1a 	bl	8001c1c <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037ec:	f7fe fa16 	bl	8001c1c <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b64      	cmp	r3, #100	; 0x64
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e1f3      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037fe:	4b51      	ldr	r3, [pc, #324]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1f0      	bne.n	80037ec <HAL_RCC_OscConfig+0xe8>
 800380a:	e000      	b.n	800380e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800380c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d063      	beq.n	80038e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800381a:	4b4a      	ldr	r3, [pc, #296]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f003 030c 	and.w	r3, r3, #12
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00b      	beq.n	800383e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003826:	4b47      	ldr	r3, [pc, #284]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800382e:	2b08      	cmp	r3, #8
 8003830:	d11c      	bne.n	800386c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003832:	4b44      	ldr	r3, [pc, #272]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d116      	bne.n	800386c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800383e:	4b41      	ldr	r3, [pc, #260]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d005      	beq.n	8003856 <HAL_RCC_OscConfig+0x152>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d001      	beq.n	8003856 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e1c7      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003856:	4b3b      	ldr	r3, [pc, #236]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	4937      	ldr	r1, [pc, #220]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 8003866:	4313      	orrs	r3, r2
 8003868:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800386a:	e03a      	b.n	80038e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d020      	beq.n	80038b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003874:	4b34      	ldr	r3, [pc, #208]	; (8003948 <HAL_RCC_OscConfig+0x244>)
 8003876:	2201      	movs	r2, #1
 8003878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800387a:	f7fe f9cf 	bl	8001c1c <HAL_GetTick>
 800387e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003880:	e008      	b.n	8003894 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003882:	f7fe f9cb 	bl	8001c1c <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d901      	bls.n	8003894 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e1a8      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003894:	4b2b      	ldr	r3, [pc, #172]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d0f0      	beq.n	8003882 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038a0:	4b28      	ldr	r3, [pc, #160]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	4925      	ldr	r1, [pc, #148]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	600b      	str	r3, [r1, #0]
 80038b4:	e015      	b.n	80038e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038b6:	4b24      	ldr	r3, [pc, #144]	; (8003948 <HAL_RCC_OscConfig+0x244>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038bc:	f7fe f9ae 	bl	8001c1c <HAL_GetTick>
 80038c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038c2:	e008      	b.n	80038d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038c4:	f7fe f9aa 	bl	8001c1c <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e187      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038d6:	4b1b      	ldr	r3, [pc, #108]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1f0      	bne.n	80038c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0308 	and.w	r3, r3, #8
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d036      	beq.n	800395c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d016      	beq.n	8003924 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038f6:	4b15      	ldr	r3, [pc, #84]	; (800394c <HAL_RCC_OscConfig+0x248>)
 80038f8:	2201      	movs	r2, #1
 80038fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038fc:	f7fe f98e 	bl	8001c1c <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003904:	f7fe f98a 	bl	8001c1c <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e167      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003916:	4b0b      	ldr	r3, [pc, #44]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 8003918:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d0f0      	beq.n	8003904 <HAL_RCC_OscConfig+0x200>
 8003922:	e01b      	b.n	800395c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003924:	4b09      	ldr	r3, [pc, #36]	; (800394c <HAL_RCC_OscConfig+0x248>)
 8003926:	2200      	movs	r2, #0
 8003928:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800392a:	f7fe f977 	bl	8001c1c <HAL_GetTick>
 800392e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003930:	e00e      	b.n	8003950 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003932:	f7fe f973 	bl	8001c1c <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d907      	bls.n	8003950 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e150      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
 8003944:	40023800 	.word	0x40023800
 8003948:	42470000 	.word	0x42470000
 800394c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003950:	4b88      	ldr	r3, [pc, #544]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003952:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1ea      	bne.n	8003932 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 8097 	beq.w	8003a98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800396a:	2300      	movs	r3, #0
 800396c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800396e:	4b81      	ldr	r3, [pc, #516]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10f      	bne.n	800399a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800397a:	2300      	movs	r3, #0
 800397c:	60bb      	str	r3, [r7, #8]
 800397e:	4b7d      	ldr	r3, [pc, #500]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	4a7c      	ldr	r2, [pc, #496]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003988:	6413      	str	r3, [r2, #64]	; 0x40
 800398a:	4b7a      	ldr	r3, [pc, #488]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003992:	60bb      	str	r3, [r7, #8]
 8003994:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003996:	2301      	movs	r3, #1
 8003998:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800399a:	4b77      	ldr	r3, [pc, #476]	; (8003b78 <HAL_RCC_OscConfig+0x474>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d118      	bne.n	80039d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039a6:	4b74      	ldr	r3, [pc, #464]	; (8003b78 <HAL_RCC_OscConfig+0x474>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a73      	ldr	r2, [pc, #460]	; (8003b78 <HAL_RCC_OscConfig+0x474>)
 80039ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039b2:	f7fe f933 	bl	8001c1c <HAL_GetTick>
 80039b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b8:	e008      	b.n	80039cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ba:	f7fe f92f 	bl	8001c1c <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d901      	bls.n	80039cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e10c      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039cc:	4b6a      	ldr	r3, [pc, #424]	; (8003b78 <HAL_RCC_OscConfig+0x474>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d0f0      	beq.n	80039ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d106      	bne.n	80039ee <HAL_RCC_OscConfig+0x2ea>
 80039e0:	4b64      	ldr	r3, [pc, #400]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 80039e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e4:	4a63      	ldr	r2, [pc, #396]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 80039e6:	f043 0301 	orr.w	r3, r3, #1
 80039ea:	6713      	str	r3, [r2, #112]	; 0x70
 80039ec:	e01c      	b.n	8003a28 <HAL_RCC_OscConfig+0x324>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	2b05      	cmp	r3, #5
 80039f4:	d10c      	bne.n	8003a10 <HAL_RCC_OscConfig+0x30c>
 80039f6:	4b5f      	ldr	r3, [pc, #380]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 80039f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039fa:	4a5e      	ldr	r2, [pc, #376]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 80039fc:	f043 0304 	orr.w	r3, r3, #4
 8003a00:	6713      	str	r3, [r2, #112]	; 0x70
 8003a02:	4b5c      	ldr	r3, [pc, #368]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a06:	4a5b      	ldr	r2, [pc, #364]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003a08:	f043 0301 	orr.w	r3, r3, #1
 8003a0c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a0e:	e00b      	b.n	8003a28 <HAL_RCC_OscConfig+0x324>
 8003a10:	4b58      	ldr	r3, [pc, #352]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a14:	4a57      	ldr	r2, [pc, #348]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003a16:	f023 0301 	bic.w	r3, r3, #1
 8003a1a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a1c:	4b55      	ldr	r3, [pc, #340]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a20:	4a54      	ldr	r2, [pc, #336]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003a22:	f023 0304 	bic.w	r3, r3, #4
 8003a26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d015      	beq.n	8003a5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a30:	f7fe f8f4 	bl	8001c1c <HAL_GetTick>
 8003a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a36:	e00a      	b.n	8003a4e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a38:	f7fe f8f0 	bl	8001c1c <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e0cb      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a4e:	4b49      	ldr	r3, [pc, #292]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d0ee      	beq.n	8003a38 <HAL_RCC_OscConfig+0x334>
 8003a5a:	e014      	b.n	8003a86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a5c:	f7fe f8de 	bl	8001c1c <HAL_GetTick>
 8003a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a62:	e00a      	b.n	8003a7a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a64:	f7fe f8da 	bl	8001c1c <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e0b5      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a7a:	4b3e      	ldr	r3, [pc, #248]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1ee      	bne.n	8003a64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a86:	7dfb      	ldrb	r3, [r7, #23]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d105      	bne.n	8003a98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a8c:	4b39      	ldr	r3, [pc, #228]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a90:	4a38      	ldr	r2, [pc, #224]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003a92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a96:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 80a1 	beq.w	8003be4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003aa2:	4b34      	ldr	r3, [pc, #208]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f003 030c 	and.w	r3, r3, #12
 8003aaa:	2b08      	cmp	r3, #8
 8003aac:	d05c      	beq.n	8003b68 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d141      	bne.n	8003b3a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ab6:	4b31      	ldr	r3, [pc, #196]	; (8003b7c <HAL_RCC_OscConfig+0x478>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003abc:	f7fe f8ae 	bl	8001c1c <HAL_GetTick>
 8003ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ac4:	f7fe f8aa 	bl	8001c1c <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e087      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ad6:	4b27      	ldr	r3, [pc, #156]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1f0      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	69da      	ldr	r2, [r3, #28]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	431a      	orrs	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af0:	019b      	lsls	r3, r3, #6
 8003af2:	431a      	orrs	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af8:	085b      	lsrs	r3, r3, #1
 8003afa:	3b01      	subs	r3, #1
 8003afc:	041b      	lsls	r3, r3, #16
 8003afe:	431a      	orrs	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b04:	061b      	lsls	r3, r3, #24
 8003b06:	491b      	ldr	r1, [pc, #108]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b0c:	4b1b      	ldr	r3, [pc, #108]	; (8003b7c <HAL_RCC_OscConfig+0x478>)
 8003b0e:	2201      	movs	r2, #1
 8003b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b12:	f7fe f883 	bl	8001c1c <HAL_GetTick>
 8003b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b18:	e008      	b.n	8003b2c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b1a:	f7fe f87f 	bl	8001c1c <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d901      	bls.n	8003b2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e05c      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b2c:	4b11      	ldr	r3, [pc, #68]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d0f0      	beq.n	8003b1a <HAL_RCC_OscConfig+0x416>
 8003b38:	e054      	b.n	8003be4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b3a:	4b10      	ldr	r3, [pc, #64]	; (8003b7c <HAL_RCC_OscConfig+0x478>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b40:	f7fe f86c 	bl	8001c1c <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b48:	f7fe f868 	bl	8001c1c <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e045      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b5a:	4b06      	ldr	r3, [pc, #24]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1f0      	bne.n	8003b48 <HAL_RCC_OscConfig+0x444>
 8003b66:	e03d      	b.n	8003be4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d107      	bne.n	8003b80 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e038      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
 8003b74:	40023800 	.word	0x40023800
 8003b78:	40007000 	.word	0x40007000
 8003b7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b80:	4b1b      	ldr	r3, [pc, #108]	; (8003bf0 <HAL_RCC_OscConfig+0x4ec>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d028      	beq.n	8003be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d121      	bne.n	8003be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d11a      	bne.n	8003be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bb6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d111      	bne.n	8003be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc6:	085b      	lsrs	r3, r3, #1
 8003bc8:	3b01      	subs	r3, #1
 8003bca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d107      	bne.n	8003be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d001      	beq.n	8003be4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e000      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3718      	adds	r7, #24
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	40023800 	.word	0x40023800

08003bf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d101      	bne.n	8003c08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e0cc      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c08:	4b68      	ldr	r3, [pc, #416]	; (8003dac <HAL_RCC_ClockConfig+0x1b8>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d90c      	bls.n	8003c30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c16:	4b65      	ldr	r3, [pc, #404]	; (8003dac <HAL_RCC_ClockConfig+0x1b8>)
 8003c18:	683a      	ldr	r2, [r7, #0]
 8003c1a:	b2d2      	uxtb	r2, r2
 8003c1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c1e:	4b63      	ldr	r3, [pc, #396]	; (8003dac <HAL_RCC_ClockConfig+0x1b8>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0307 	and.w	r3, r3, #7
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d001      	beq.n	8003c30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e0b8      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0302 	and.w	r3, r3, #2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d020      	beq.n	8003c7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d005      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c48:	4b59      	ldr	r3, [pc, #356]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	4a58      	ldr	r2, [pc, #352]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0308 	and.w	r3, r3, #8
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d005      	beq.n	8003c6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c60:	4b53      	ldr	r3, [pc, #332]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	4a52      	ldr	r2, [pc, #328]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c6c:	4b50      	ldr	r3, [pc, #320]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	494d      	ldr	r1, [pc, #308]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d044      	beq.n	8003d14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d107      	bne.n	8003ca2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c92:	4b47      	ldr	r3, [pc, #284]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d119      	bne.n	8003cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e07f      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d003      	beq.n	8003cb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cae:	2b03      	cmp	r3, #3
 8003cb0:	d107      	bne.n	8003cc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cb2:	4b3f      	ldr	r3, [pc, #252]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d109      	bne.n	8003cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e06f      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cc2:	4b3b      	ldr	r3, [pc, #236]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e067      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cd2:	4b37      	ldr	r3, [pc, #220]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f023 0203 	bic.w	r2, r3, #3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	4934      	ldr	r1, [pc, #208]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ce4:	f7fd ff9a 	bl	8001c1c <HAL_GetTick>
 8003ce8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cea:	e00a      	b.n	8003d02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cec:	f7fd ff96 	bl	8001c1c <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e04f      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d02:	4b2b      	ldr	r3, [pc, #172]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f003 020c 	and.w	r2, r3, #12
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d1eb      	bne.n	8003cec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d14:	4b25      	ldr	r3, [pc, #148]	; (8003dac <HAL_RCC_ClockConfig+0x1b8>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0307 	and.w	r3, r3, #7
 8003d1c:	683a      	ldr	r2, [r7, #0]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d20c      	bcs.n	8003d3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d22:	4b22      	ldr	r3, [pc, #136]	; (8003dac <HAL_RCC_ClockConfig+0x1b8>)
 8003d24:	683a      	ldr	r2, [r7, #0]
 8003d26:	b2d2      	uxtb	r2, r2
 8003d28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d2a:	4b20      	ldr	r3, [pc, #128]	; (8003dac <HAL_RCC_ClockConfig+0x1b8>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0307 	and.w	r3, r3, #7
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d001      	beq.n	8003d3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e032      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0304 	and.w	r3, r3, #4
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d008      	beq.n	8003d5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d48:	4b19      	ldr	r3, [pc, #100]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	4916      	ldr	r1, [pc, #88]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0308 	and.w	r3, r3, #8
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d009      	beq.n	8003d7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d66:	4b12      	ldr	r3, [pc, #72]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	490e      	ldr	r1, [pc, #56]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d7a:	f000 f821 	bl	8003dc0 <HAL_RCC_GetSysClockFreq>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	4b0b      	ldr	r3, [pc, #44]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	091b      	lsrs	r3, r3, #4
 8003d86:	f003 030f 	and.w	r3, r3, #15
 8003d8a:	490a      	ldr	r1, [pc, #40]	; (8003db4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d8c:	5ccb      	ldrb	r3, [r1, r3]
 8003d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d92:	4a09      	ldr	r2, [pc, #36]	; (8003db8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d96:	4b09      	ldr	r3, [pc, #36]	; (8003dbc <HAL_RCC_ClockConfig+0x1c8>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7fd fefa 	bl	8001b94 <HAL_InitTick>

  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	40023c00 	.word	0x40023c00
 8003db0:	40023800 	.word	0x40023800
 8003db4:	08009b44 	.word	0x08009b44
 8003db8:	20000000 	.word	0x20000000
 8003dbc:	20000004 	.word	0x20000004

08003dc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dc4:	b094      	sub	sp, #80	; 0x50
 8003dc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	647b      	str	r3, [r7, #68]	; 0x44
 8003dcc:	2300      	movs	r3, #0
 8003dce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003dd8:	4b79      	ldr	r3, [pc, #484]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f003 030c 	and.w	r3, r3, #12
 8003de0:	2b08      	cmp	r3, #8
 8003de2:	d00d      	beq.n	8003e00 <HAL_RCC_GetSysClockFreq+0x40>
 8003de4:	2b08      	cmp	r3, #8
 8003de6:	f200 80e1 	bhi.w	8003fac <HAL_RCC_GetSysClockFreq+0x1ec>
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d002      	beq.n	8003df4 <HAL_RCC_GetSysClockFreq+0x34>
 8003dee:	2b04      	cmp	r3, #4
 8003df0:	d003      	beq.n	8003dfa <HAL_RCC_GetSysClockFreq+0x3a>
 8003df2:	e0db      	b.n	8003fac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003df4:	4b73      	ldr	r3, [pc, #460]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003df6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003df8:	e0db      	b.n	8003fb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003dfa:	4b73      	ldr	r3, [pc, #460]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x208>)
 8003dfc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003dfe:	e0d8      	b.n	8003fb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e00:	4b6f      	ldr	r3, [pc, #444]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e08:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e0a:	4b6d      	ldr	r3, [pc, #436]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d063      	beq.n	8003ede <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e16:	4b6a      	ldr	r3, [pc, #424]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	099b      	lsrs	r3, r3, #6
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e20:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e28:	633b      	str	r3, [r7, #48]	; 0x30
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	637b      	str	r3, [r7, #52]	; 0x34
 8003e2e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003e32:	4622      	mov	r2, r4
 8003e34:	462b      	mov	r3, r5
 8003e36:	f04f 0000 	mov.w	r0, #0
 8003e3a:	f04f 0100 	mov.w	r1, #0
 8003e3e:	0159      	lsls	r1, r3, #5
 8003e40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e44:	0150      	lsls	r0, r2, #5
 8003e46:	4602      	mov	r2, r0
 8003e48:	460b      	mov	r3, r1
 8003e4a:	4621      	mov	r1, r4
 8003e4c:	1a51      	subs	r1, r2, r1
 8003e4e:	6139      	str	r1, [r7, #16]
 8003e50:	4629      	mov	r1, r5
 8003e52:	eb63 0301 	sbc.w	r3, r3, r1
 8003e56:	617b      	str	r3, [r7, #20]
 8003e58:	f04f 0200 	mov.w	r2, #0
 8003e5c:	f04f 0300 	mov.w	r3, #0
 8003e60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e64:	4659      	mov	r1, fp
 8003e66:	018b      	lsls	r3, r1, #6
 8003e68:	4651      	mov	r1, sl
 8003e6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e6e:	4651      	mov	r1, sl
 8003e70:	018a      	lsls	r2, r1, #6
 8003e72:	4651      	mov	r1, sl
 8003e74:	ebb2 0801 	subs.w	r8, r2, r1
 8003e78:	4659      	mov	r1, fp
 8003e7a:	eb63 0901 	sbc.w	r9, r3, r1
 8003e7e:	f04f 0200 	mov.w	r2, #0
 8003e82:	f04f 0300 	mov.w	r3, #0
 8003e86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e92:	4690      	mov	r8, r2
 8003e94:	4699      	mov	r9, r3
 8003e96:	4623      	mov	r3, r4
 8003e98:	eb18 0303 	adds.w	r3, r8, r3
 8003e9c:	60bb      	str	r3, [r7, #8]
 8003e9e:	462b      	mov	r3, r5
 8003ea0:	eb49 0303 	adc.w	r3, r9, r3
 8003ea4:	60fb      	str	r3, [r7, #12]
 8003ea6:	f04f 0200 	mov.w	r2, #0
 8003eaa:	f04f 0300 	mov.w	r3, #0
 8003eae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003eb2:	4629      	mov	r1, r5
 8003eb4:	024b      	lsls	r3, r1, #9
 8003eb6:	4621      	mov	r1, r4
 8003eb8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ebc:	4621      	mov	r1, r4
 8003ebe:	024a      	lsls	r2, r1, #9
 8003ec0:	4610      	mov	r0, r2
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003eca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ecc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ed0:	f7fc fd68 	bl	80009a4 <__aeabi_uldivmod>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	4613      	mov	r3, r2
 8003eda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003edc:	e058      	b.n	8003f90 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ede:	4b38      	ldr	r3, [pc, #224]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	099b      	lsrs	r3, r3, #6
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	4611      	mov	r1, r2
 8003eea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003eee:	623b      	str	r3, [r7, #32]
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ef4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ef8:	4642      	mov	r2, r8
 8003efa:	464b      	mov	r3, r9
 8003efc:	f04f 0000 	mov.w	r0, #0
 8003f00:	f04f 0100 	mov.w	r1, #0
 8003f04:	0159      	lsls	r1, r3, #5
 8003f06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f0a:	0150      	lsls	r0, r2, #5
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	460b      	mov	r3, r1
 8003f10:	4641      	mov	r1, r8
 8003f12:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f16:	4649      	mov	r1, r9
 8003f18:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f1c:	f04f 0200 	mov.w	r2, #0
 8003f20:	f04f 0300 	mov.w	r3, #0
 8003f24:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f28:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003f2c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f30:	ebb2 040a 	subs.w	r4, r2, sl
 8003f34:	eb63 050b 	sbc.w	r5, r3, fp
 8003f38:	f04f 0200 	mov.w	r2, #0
 8003f3c:	f04f 0300 	mov.w	r3, #0
 8003f40:	00eb      	lsls	r3, r5, #3
 8003f42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f46:	00e2      	lsls	r2, r4, #3
 8003f48:	4614      	mov	r4, r2
 8003f4a:	461d      	mov	r5, r3
 8003f4c:	4643      	mov	r3, r8
 8003f4e:	18e3      	adds	r3, r4, r3
 8003f50:	603b      	str	r3, [r7, #0]
 8003f52:	464b      	mov	r3, r9
 8003f54:	eb45 0303 	adc.w	r3, r5, r3
 8003f58:	607b      	str	r3, [r7, #4]
 8003f5a:	f04f 0200 	mov.w	r2, #0
 8003f5e:	f04f 0300 	mov.w	r3, #0
 8003f62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f66:	4629      	mov	r1, r5
 8003f68:	028b      	lsls	r3, r1, #10
 8003f6a:	4621      	mov	r1, r4
 8003f6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f70:	4621      	mov	r1, r4
 8003f72:	028a      	lsls	r2, r1, #10
 8003f74:	4610      	mov	r0, r2
 8003f76:	4619      	mov	r1, r3
 8003f78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	61bb      	str	r3, [r7, #24]
 8003f7e:	61fa      	str	r2, [r7, #28]
 8003f80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f84:	f7fc fd0e 	bl	80009a4 <__aeabi_uldivmod>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f90:	4b0b      	ldr	r3, [pc, #44]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	0c1b      	lsrs	r3, r3, #16
 8003f96:	f003 0303 	and.w	r3, r3, #3
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	005b      	lsls	r3, r3, #1
 8003f9e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003fa0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003fa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003faa:	e002      	b.n	8003fb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fac:	4b05      	ldr	r3, [pc, #20]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003fae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3750      	adds	r7, #80	; 0x50
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fbe:	bf00      	nop
 8003fc0:	40023800 	.word	0x40023800
 8003fc4:	00f42400 	.word	0x00f42400
 8003fc8:	007a1200 	.word	0x007a1200

08003fcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fd0:	4b03      	ldr	r3, [pc, #12]	; (8003fe0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	20000000 	.word	0x20000000

08003fe4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e041      	b.n	800407a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d106      	bne.n	8004010 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7fd fc34 	bl	8001878 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2202      	movs	r2, #2
 8004014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	3304      	adds	r3, #4
 8004020:	4619      	mov	r1, r3
 8004022:	4610      	mov	r0, r2
 8004024:	f000 fed4 	bl	8004dd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3708      	adds	r7, #8
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
	...

08004084 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004092:	b2db      	uxtb	r3, r3
 8004094:	2b01      	cmp	r3, #1
 8004096:	d001      	beq.n	800409c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e046      	b.n	800412a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2202      	movs	r2, #2
 80040a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a23      	ldr	r2, [pc, #140]	; (8004138 <HAL_TIM_Base_Start+0xb4>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d022      	beq.n	80040f4 <HAL_TIM_Base_Start+0x70>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040b6:	d01d      	beq.n	80040f4 <HAL_TIM_Base_Start+0x70>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a1f      	ldr	r2, [pc, #124]	; (800413c <HAL_TIM_Base_Start+0xb8>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d018      	beq.n	80040f4 <HAL_TIM_Base_Start+0x70>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a1e      	ldr	r2, [pc, #120]	; (8004140 <HAL_TIM_Base_Start+0xbc>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d013      	beq.n	80040f4 <HAL_TIM_Base_Start+0x70>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a1c      	ldr	r2, [pc, #112]	; (8004144 <HAL_TIM_Base_Start+0xc0>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d00e      	beq.n	80040f4 <HAL_TIM_Base_Start+0x70>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a1b      	ldr	r2, [pc, #108]	; (8004148 <HAL_TIM_Base_Start+0xc4>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d009      	beq.n	80040f4 <HAL_TIM_Base_Start+0x70>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a19      	ldr	r2, [pc, #100]	; (800414c <HAL_TIM_Base_Start+0xc8>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d004      	beq.n	80040f4 <HAL_TIM_Base_Start+0x70>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a18      	ldr	r2, [pc, #96]	; (8004150 <HAL_TIM_Base_Start+0xcc>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d111      	bne.n	8004118 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f003 0307 	and.w	r3, r3, #7
 80040fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2b06      	cmp	r3, #6
 8004104:	d010      	beq.n	8004128 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f042 0201 	orr.w	r2, r2, #1
 8004114:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004116:	e007      	b.n	8004128 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f042 0201 	orr.w	r2, r2, #1
 8004126:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3714      	adds	r7, #20
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	40010000 	.word	0x40010000
 800413c:	40000400 	.word	0x40000400
 8004140:	40000800 	.word	0x40000800
 8004144:	40000c00 	.word	0x40000c00
 8004148:	40010400 	.word	0x40010400
 800414c:	40014000 	.word	0x40014000
 8004150:	40001800 	.word	0x40001800

08004154 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d101      	bne.n	8004166 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e041      	b.n	80041ea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d106      	bne.n	8004180 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 f839 	bl	80041f2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2202      	movs	r2, #2
 8004184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	3304      	adds	r3, #4
 8004190:	4619      	mov	r1, r3
 8004192:	4610      	mov	r0, r2
 8004194:	f000 fe1c 	bl	8004dd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3708      	adds	r7, #8
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80041f2:	b480      	push	{r7}
 80041f4:	b083      	sub	sp, #12
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80041fa:	bf00      	nop
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
	...

08004208 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d109      	bne.n	800422c <HAL_TIM_PWM_Start+0x24>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b01      	cmp	r3, #1
 8004222:	bf14      	ite	ne
 8004224:	2301      	movne	r3, #1
 8004226:	2300      	moveq	r3, #0
 8004228:	b2db      	uxtb	r3, r3
 800422a:	e022      	b.n	8004272 <HAL_TIM_PWM_Start+0x6a>
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	2b04      	cmp	r3, #4
 8004230:	d109      	bne.n	8004246 <HAL_TIM_PWM_Start+0x3e>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b01      	cmp	r3, #1
 800423c:	bf14      	ite	ne
 800423e:	2301      	movne	r3, #1
 8004240:	2300      	moveq	r3, #0
 8004242:	b2db      	uxtb	r3, r3
 8004244:	e015      	b.n	8004272 <HAL_TIM_PWM_Start+0x6a>
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	2b08      	cmp	r3, #8
 800424a:	d109      	bne.n	8004260 <HAL_TIM_PWM_Start+0x58>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b01      	cmp	r3, #1
 8004256:	bf14      	ite	ne
 8004258:	2301      	movne	r3, #1
 800425a:	2300      	moveq	r3, #0
 800425c:	b2db      	uxtb	r3, r3
 800425e:	e008      	b.n	8004272 <HAL_TIM_PWM_Start+0x6a>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004266:	b2db      	uxtb	r3, r3
 8004268:	2b01      	cmp	r3, #1
 800426a:	bf14      	ite	ne
 800426c:	2301      	movne	r3, #1
 800426e:	2300      	moveq	r3, #0
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e07c      	b.n	8004374 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d104      	bne.n	800428a <HAL_TIM_PWM_Start+0x82>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2202      	movs	r2, #2
 8004284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004288:	e013      	b.n	80042b2 <HAL_TIM_PWM_Start+0xaa>
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	2b04      	cmp	r3, #4
 800428e:	d104      	bne.n	800429a <HAL_TIM_PWM_Start+0x92>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2202      	movs	r2, #2
 8004294:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004298:	e00b      	b.n	80042b2 <HAL_TIM_PWM_Start+0xaa>
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	2b08      	cmp	r3, #8
 800429e:	d104      	bne.n	80042aa <HAL_TIM_PWM_Start+0xa2>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2202      	movs	r2, #2
 80042a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042a8:	e003      	b.n	80042b2 <HAL_TIM_PWM_Start+0xaa>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2202      	movs	r2, #2
 80042ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2201      	movs	r2, #1
 80042b8:	6839      	ldr	r1, [r7, #0]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f001 f99c 	bl	80055f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a2d      	ldr	r2, [pc, #180]	; (800437c <HAL_TIM_PWM_Start+0x174>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d004      	beq.n	80042d4 <HAL_TIM_PWM_Start+0xcc>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a2c      	ldr	r2, [pc, #176]	; (8004380 <HAL_TIM_PWM_Start+0x178>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d101      	bne.n	80042d8 <HAL_TIM_PWM_Start+0xd0>
 80042d4:	2301      	movs	r3, #1
 80042d6:	e000      	b.n	80042da <HAL_TIM_PWM_Start+0xd2>
 80042d8:	2300      	movs	r3, #0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d007      	beq.n	80042ee <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a22      	ldr	r2, [pc, #136]	; (800437c <HAL_TIM_PWM_Start+0x174>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d022      	beq.n	800433e <HAL_TIM_PWM_Start+0x136>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004300:	d01d      	beq.n	800433e <HAL_TIM_PWM_Start+0x136>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a1f      	ldr	r2, [pc, #124]	; (8004384 <HAL_TIM_PWM_Start+0x17c>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d018      	beq.n	800433e <HAL_TIM_PWM_Start+0x136>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a1d      	ldr	r2, [pc, #116]	; (8004388 <HAL_TIM_PWM_Start+0x180>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d013      	beq.n	800433e <HAL_TIM_PWM_Start+0x136>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a1c      	ldr	r2, [pc, #112]	; (800438c <HAL_TIM_PWM_Start+0x184>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d00e      	beq.n	800433e <HAL_TIM_PWM_Start+0x136>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a16      	ldr	r2, [pc, #88]	; (8004380 <HAL_TIM_PWM_Start+0x178>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d009      	beq.n	800433e <HAL_TIM_PWM_Start+0x136>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a18      	ldr	r2, [pc, #96]	; (8004390 <HAL_TIM_PWM_Start+0x188>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d004      	beq.n	800433e <HAL_TIM_PWM_Start+0x136>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a16      	ldr	r2, [pc, #88]	; (8004394 <HAL_TIM_PWM_Start+0x18c>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d111      	bne.n	8004362 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f003 0307 	and.w	r3, r3, #7
 8004348:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2b06      	cmp	r3, #6
 800434e:	d010      	beq.n	8004372 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f042 0201 	orr.w	r2, r2, #1
 800435e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004360:	e007      	b.n	8004372 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f042 0201 	orr.w	r2, r2, #1
 8004370:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	3710      	adds	r7, #16
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	40010000 	.word	0x40010000
 8004380:	40010400 	.word	0x40010400
 8004384:	40000400 	.word	0x40000400
 8004388:	40000800 	.word	0x40000800
 800438c:	40000c00 	.word	0x40000c00
 8004390:	40014000 	.word	0x40014000
 8004394:	40001800 	.word	0x40001800

08004398 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e041      	b.n	800442e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d106      	bne.n	80043c4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 f839 	bl	8004436 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2202      	movs	r2, #2
 80043c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	3304      	adds	r3, #4
 80043d4:	4619      	mov	r1, r3
 80043d6:	4610      	mov	r0, r2
 80043d8:	f000 fcfa 	bl	8004dd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004436:	b480      	push	{r7}
 8004438:	b083      	sub	sp, #12
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800443e:	bf00      	nop
 8004440:	370c      	adds	r7, #12
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
	...

0800444c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004456:	2300      	movs	r3, #0
 8004458:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d104      	bne.n	800446a <HAL_TIM_IC_Start_IT+0x1e>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004466:	b2db      	uxtb	r3, r3
 8004468:	e013      	b.n	8004492 <HAL_TIM_IC_Start_IT+0x46>
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	2b04      	cmp	r3, #4
 800446e:	d104      	bne.n	800447a <HAL_TIM_IC_Start_IT+0x2e>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004476:	b2db      	uxtb	r3, r3
 8004478:	e00b      	b.n	8004492 <HAL_TIM_IC_Start_IT+0x46>
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	2b08      	cmp	r3, #8
 800447e:	d104      	bne.n	800448a <HAL_TIM_IC_Start_IT+0x3e>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004486:	b2db      	uxtb	r3, r3
 8004488:	e003      	b.n	8004492 <HAL_TIM_IC_Start_IT+0x46>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004490:	b2db      	uxtb	r3, r3
 8004492:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d104      	bne.n	80044a4 <HAL_TIM_IC_Start_IT+0x58>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	e013      	b.n	80044cc <HAL_TIM_IC_Start_IT+0x80>
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	2b04      	cmp	r3, #4
 80044a8:	d104      	bne.n	80044b4 <HAL_TIM_IC_Start_IT+0x68>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	e00b      	b.n	80044cc <HAL_TIM_IC_Start_IT+0x80>
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	2b08      	cmp	r3, #8
 80044b8:	d104      	bne.n	80044c4 <HAL_TIM_IC_Start_IT+0x78>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	e003      	b.n	80044cc <HAL_TIM_IC_Start_IT+0x80>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80044ce:	7bbb      	ldrb	r3, [r7, #14]
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d102      	bne.n	80044da <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80044d4:	7b7b      	ldrb	r3, [r7, #13]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d001      	beq.n	80044de <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e0cc      	b.n	8004678 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d104      	bne.n	80044ee <HAL_TIM_IC_Start_IT+0xa2>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2202      	movs	r2, #2
 80044e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044ec:	e013      	b.n	8004516 <HAL_TIM_IC_Start_IT+0xca>
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	2b04      	cmp	r3, #4
 80044f2:	d104      	bne.n	80044fe <HAL_TIM_IC_Start_IT+0xb2>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2202      	movs	r2, #2
 80044f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044fc:	e00b      	b.n	8004516 <HAL_TIM_IC_Start_IT+0xca>
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	2b08      	cmp	r3, #8
 8004502:	d104      	bne.n	800450e <HAL_TIM_IC_Start_IT+0xc2>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2202      	movs	r2, #2
 8004508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800450c:	e003      	b.n	8004516 <HAL_TIM_IC_Start_IT+0xca>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2202      	movs	r2, #2
 8004512:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d104      	bne.n	8004526 <HAL_TIM_IC_Start_IT+0xda>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2202      	movs	r2, #2
 8004520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004524:	e013      	b.n	800454e <HAL_TIM_IC_Start_IT+0x102>
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b04      	cmp	r3, #4
 800452a:	d104      	bne.n	8004536 <HAL_TIM_IC_Start_IT+0xea>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2202      	movs	r2, #2
 8004530:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004534:	e00b      	b.n	800454e <HAL_TIM_IC_Start_IT+0x102>
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2b08      	cmp	r3, #8
 800453a:	d104      	bne.n	8004546 <HAL_TIM_IC_Start_IT+0xfa>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2202      	movs	r2, #2
 8004540:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004544:	e003      	b.n	800454e <HAL_TIM_IC_Start_IT+0x102>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2202      	movs	r2, #2
 800454a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	2b0c      	cmp	r3, #12
 8004552:	d841      	bhi.n	80045d8 <HAL_TIM_IC_Start_IT+0x18c>
 8004554:	a201      	add	r2, pc, #4	; (adr r2, 800455c <HAL_TIM_IC_Start_IT+0x110>)
 8004556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800455a:	bf00      	nop
 800455c:	08004591 	.word	0x08004591
 8004560:	080045d9 	.word	0x080045d9
 8004564:	080045d9 	.word	0x080045d9
 8004568:	080045d9 	.word	0x080045d9
 800456c:	080045a3 	.word	0x080045a3
 8004570:	080045d9 	.word	0x080045d9
 8004574:	080045d9 	.word	0x080045d9
 8004578:	080045d9 	.word	0x080045d9
 800457c:	080045b5 	.word	0x080045b5
 8004580:	080045d9 	.word	0x080045d9
 8004584:	080045d9 	.word	0x080045d9
 8004588:	080045d9 	.word	0x080045d9
 800458c:	080045c7 	.word	0x080045c7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68da      	ldr	r2, [r3, #12]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f042 0202 	orr.w	r2, r2, #2
 800459e:	60da      	str	r2, [r3, #12]
      break;
 80045a0:	e01d      	b.n	80045de <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68da      	ldr	r2, [r3, #12]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f042 0204 	orr.w	r2, r2, #4
 80045b0:	60da      	str	r2, [r3, #12]
      break;
 80045b2:	e014      	b.n	80045de <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68da      	ldr	r2, [r3, #12]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f042 0208 	orr.w	r2, r2, #8
 80045c2:	60da      	str	r2, [r3, #12]
      break;
 80045c4:	e00b      	b.n	80045de <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68da      	ldr	r2, [r3, #12]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f042 0210 	orr.w	r2, r2, #16
 80045d4:	60da      	str	r2, [r3, #12]
      break;
 80045d6:	e002      	b.n	80045de <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	73fb      	strb	r3, [r7, #15]
      break;
 80045dc:	bf00      	nop
  }

  if (status == HAL_OK)
 80045de:	7bfb      	ldrb	r3, [r7, #15]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d148      	bne.n	8004676 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2201      	movs	r2, #1
 80045ea:	6839      	ldr	r1, [r7, #0]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f001 f803 	bl	80055f8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a22      	ldr	r2, [pc, #136]	; (8004680 <HAL_TIM_IC_Start_IT+0x234>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d022      	beq.n	8004642 <HAL_TIM_IC_Start_IT+0x1f6>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004604:	d01d      	beq.n	8004642 <HAL_TIM_IC_Start_IT+0x1f6>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a1e      	ldr	r2, [pc, #120]	; (8004684 <HAL_TIM_IC_Start_IT+0x238>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d018      	beq.n	8004642 <HAL_TIM_IC_Start_IT+0x1f6>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a1c      	ldr	r2, [pc, #112]	; (8004688 <HAL_TIM_IC_Start_IT+0x23c>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d013      	beq.n	8004642 <HAL_TIM_IC_Start_IT+0x1f6>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a1b      	ldr	r2, [pc, #108]	; (800468c <HAL_TIM_IC_Start_IT+0x240>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d00e      	beq.n	8004642 <HAL_TIM_IC_Start_IT+0x1f6>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a19      	ldr	r2, [pc, #100]	; (8004690 <HAL_TIM_IC_Start_IT+0x244>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d009      	beq.n	8004642 <HAL_TIM_IC_Start_IT+0x1f6>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a18      	ldr	r2, [pc, #96]	; (8004694 <HAL_TIM_IC_Start_IT+0x248>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d004      	beq.n	8004642 <HAL_TIM_IC_Start_IT+0x1f6>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a16      	ldr	r2, [pc, #88]	; (8004698 <HAL_TIM_IC_Start_IT+0x24c>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d111      	bne.n	8004666 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f003 0307 	and.w	r3, r3, #7
 800464c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	2b06      	cmp	r3, #6
 8004652:	d010      	beq.n	8004676 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f042 0201 	orr.w	r2, r2, #1
 8004662:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004664:	e007      	b.n	8004676 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f042 0201 	orr.w	r2, r2, #1
 8004674:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004676:	7bfb      	ldrb	r3, [r7, #15]
}
 8004678:	4618      	mov	r0, r3
 800467a:	3710      	adds	r7, #16
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	40010000 	.word	0x40010000
 8004684:	40000400 	.word	0x40000400
 8004688:	40000800 	.word	0x40000800
 800468c:	40000c00 	.word	0x40000c00
 8004690:	40010400 	.word	0x40010400
 8004694:	40014000 	.word	0x40014000
 8004698:	40001800 	.word	0x40001800

0800469c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d122      	bne.n	80046f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	f003 0302 	and.w	r3, r3, #2
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d11b      	bne.n	80046f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f06f 0202 	mvn.w	r2, #2
 80046c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	f003 0303 	and.w	r3, r3, #3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d003      	beq.n	80046e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f7fc ffae 	bl	8001640 <HAL_TIM_IC_CaptureCallback>
 80046e4:	e005      	b.n	80046f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 fb54 	bl	8004d94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 fb5b 	bl	8004da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	f003 0304 	and.w	r3, r3, #4
 8004702:	2b04      	cmp	r3, #4
 8004704:	d122      	bne.n	800474c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	f003 0304 	and.w	r3, r3, #4
 8004710:	2b04      	cmp	r3, #4
 8004712:	d11b      	bne.n	800474c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f06f 0204 	mvn.w	r2, #4
 800471c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2202      	movs	r2, #2
 8004722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800472e:	2b00      	cmp	r3, #0
 8004730:	d003      	beq.n	800473a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f7fc ff84 	bl	8001640 <HAL_TIM_IC_CaptureCallback>
 8004738:	e005      	b.n	8004746 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 fb2a 	bl	8004d94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f000 fb31 	bl	8004da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	f003 0308 	and.w	r3, r3, #8
 8004756:	2b08      	cmp	r3, #8
 8004758:	d122      	bne.n	80047a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	f003 0308 	and.w	r3, r3, #8
 8004764:	2b08      	cmp	r3, #8
 8004766:	d11b      	bne.n	80047a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f06f 0208 	mvn.w	r2, #8
 8004770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2204      	movs	r2, #4
 8004776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	f003 0303 	and.w	r3, r3, #3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f7fc ff5a 	bl	8001640 <HAL_TIM_IC_CaptureCallback>
 800478c:	e005      	b.n	800479a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 fb00 	bl	8004d94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 fb07 	bl	8004da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	f003 0310 	and.w	r3, r3, #16
 80047aa:	2b10      	cmp	r3, #16
 80047ac:	d122      	bne.n	80047f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	f003 0310 	and.w	r3, r3, #16
 80047b8:	2b10      	cmp	r3, #16
 80047ba:	d11b      	bne.n	80047f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f06f 0210 	mvn.w	r2, #16
 80047c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2208      	movs	r2, #8
 80047ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f7fc ff30 	bl	8001640 <HAL_TIM_IC_CaptureCallback>
 80047e0:	e005      	b.n	80047ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 fad6 	bl	8004d94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f000 fadd 	bl	8004da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d10e      	bne.n	8004820 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	f003 0301 	and.w	r3, r3, #1
 800480c:	2b01      	cmp	r3, #1
 800480e:	d107      	bne.n	8004820 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f06f 0201 	mvn.w	r2, #1
 8004818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 fab0 	bl	8004d80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800482a:	2b80      	cmp	r3, #128	; 0x80
 800482c:	d10e      	bne.n	800484c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004838:	2b80      	cmp	r3, #128	; 0x80
 800483a:	d107      	bne.n	800484c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 ff82 	bl	8005750 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004856:	2b40      	cmp	r3, #64	; 0x40
 8004858:	d10e      	bne.n	8004878 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004864:	2b40      	cmp	r3, #64	; 0x40
 8004866:	d107      	bne.n	8004878 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 faa2 	bl	8004dbc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	f003 0320 	and.w	r3, r3, #32
 8004882:	2b20      	cmp	r3, #32
 8004884:	d10e      	bne.n	80048a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	f003 0320 	and.w	r3, r3, #32
 8004890:	2b20      	cmp	r3, #32
 8004892:	d107      	bne.n	80048a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f06f 0220 	mvn.w	r2, #32
 800489c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 ff4c 	bl	800573c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048a4:	bf00      	nop
 80048a6:	3708      	adds	r7, #8
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b086      	sub	sp, #24
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048b8:	2300      	movs	r3, #0
 80048ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d101      	bne.n	80048ca <HAL_TIM_IC_ConfigChannel+0x1e>
 80048c6:	2302      	movs	r3, #2
 80048c8:	e088      	b.n	80049dc <HAL_TIM_IC_ConfigChannel+0x130>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d11b      	bne.n	8004910 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6818      	ldr	r0, [r3, #0]
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	6819      	ldr	r1, [r3, #0]
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	f000 fcc2 	bl	8005270 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	699a      	ldr	r2, [r3, #24]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f022 020c 	bic.w	r2, r2, #12
 80048fa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6999      	ldr	r1, [r3, #24]
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	689a      	ldr	r2, [r3, #8]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	430a      	orrs	r2, r1
 800490c:	619a      	str	r2, [r3, #24]
 800490e:	e060      	b.n	80049d2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b04      	cmp	r3, #4
 8004914:	d11c      	bne.n	8004950 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6818      	ldr	r0, [r3, #0]
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	6819      	ldr	r1, [r3, #0]
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	685a      	ldr	r2, [r3, #4]
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	f000 fd46 	bl	80053b6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	699a      	ldr	r2, [r3, #24]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004938:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	6999      	ldr	r1, [r3, #24]
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	021a      	lsls	r2, r3, #8
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	430a      	orrs	r2, r1
 800494c:	619a      	str	r2, [r3, #24]
 800494e:	e040      	b.n	80049d2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2b08      	cmp	r3, #8
 8004954:	d11b      	bne.n	800498e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6818      	ldr	r0, [r3, #0]
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	6819      	ldr	r1, [r3, #0]
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	685a      	ldr	r2, [r3, #4]
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	f000 fd93 	bl	8005490 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	69da      	ldr	r2, [r3, #28]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f022 020c 	bic.w	r2, r2, #12
 8004978:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	69d9      	ldr	r1, [r3, #28]
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	689a      	ldr	r2, [r3, #8]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	430a      	orrs	r2, r1
 800498a:	61da      	str	r2, [r3, #28]
 800498c:	e021      	b.n	80049d2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2b0c      	cmp	r3, #12
 8004992:	d11c      	bne.n	80049ce <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6818      	ldr	r0, [r3, #0]
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	6819      	ldr	r1, [r3, #0]
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	f000 fdb0 	bl	8005508 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	69da      	ldr	r2, [r3, #28]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80049b6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	69d9      	ldr	r1, [r3, #28]
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	021a      	lsls	r2, r3, #8
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	430a      	orrs	r2, r1
 80049ca:	61da      	str	r2, [r3, #28]
 80049cc:	e001      	b.n	80049d2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049da:	7dfb      	ldrb	r3, [r7, #23]
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3718      	adds	r7, #24
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b086      	sub	sp, #24
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049f0:	2300      	movs	r3, #0
 80049f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d101      	bne.n	8004a02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80049fe:	2302      	movs	r3, #2
 8004a00:	e0ae      	b.n	8004b60 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2b0c      	cmp	r3, #12
 8004a0e:	f200 809f 	bhi.w	8004b50 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a12:	a201      	add	r2, pc, #4	; (adr r2, 8004a18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a18:	08004a4d 	.word	0x08004a4d
 8004a1c:	08004b51 	.word	0x08004b51
 8004a20:	08004b51 	.word	0x08004b51
 8004a24:	08004b51 	.word	0x08004b51
 8004a28:	08004a8d 	.word	0x08004a8d
 8004a2c:	08004b51 	.word	0x08004b51
 8004a30:	08004b51 	.word	0x08004b51
 8004a34:	08004b51 	.word	0x08004b51
 8004a38:	08004acf 	.word	0x08004acf
 8004a3c:	08004b51 	.word	0x08004b51
 8004a40:	08004b51 	.word	0x08004b51
 8004a44:	08004b51 	.word	0x08004b51
 8004a48:	08004b0f 	.word	0x08004b0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68b9      	ldr	r1, [r7, #8]
 8004a52:	4618      	mov	r0, r3
 8004a54:	f000 fa5c 	bl	8004f10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	699a      	ldr	r2, [r3, #24]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f042 0208 	orr.w	r2, r2, #8
 8004a66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	699a      	ldr	r2, [r3, #24]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f022 0204 	bic.w	r2, r2, #4
 8004a76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	6999      	ldr	r1, [r3, #24]
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	691a      	ldr	r2, [r3, #16]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	430a      	orrs	r2, r1
 8004a88:	619a      	str	r2, [r3, #24]
      break;
 8004a8a:	e064      	b.n	8004b56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68b9      	ldr	r1, [r7, #8]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 faac 	bl	8004ff0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	699a      	ldr	r2, [r3, #24]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004aa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	699a      	ldr	r2, [r3, #24]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ab6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6999      	ldr	r1, [r3, #24]
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	021a      	lsls	r2, r3, #8
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	619a      	str	r2, [r3, #24]
      break;
 8004acc:	e043      	b.n	8004b56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68b9      	ldr	r1, [r7, #8]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f000 fb01 	bl	80050dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	69da      	ldr	r2, [r3, #28]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f042 0208 	orr.w	r2, r2, #8
 8004ae8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	69da      	ldr	r2, [r3, #28]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 0204 	bic.w	r2, r2, #4
 8004af8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	69d9      	ldr	r1, [r3, #28]
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	691a      	ldr	r2, [r3, #16]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	61da      	str	r2, [r3, #28]
      break;
 8004b0c:	e023      	b.n	8004b56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68b9      	ldr	r1, [r7, #8]
 8004b14:	4618      	mov	r0, r3
 8004b16:	f000 fb55 	bl	80051c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	69da      	ldr	r2, [r3, #28]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	69da      	ldr	r2, [r3, #28]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	69d9      	ldr	r1, [r3, #28]
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	021a      	lsls	r2, r3, #8
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	61da      	str	r2, [r3, #28]
      break;
 8004b4e:	e002      	b.n	8004b56 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	75fb      	strb	r3, [r7, #23]
      break;
 8004b54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3718      	adds	r7, #24
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b72:	2300      	movs	r3, #0
 8004b74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d101      	bne.n	8004b84 <HAL_TIM_ConfigClockSource+0x1c>
 8004b80:	2302      	movs	r3, #2
 8004b82:	e0b4      	b.n	8004cee <HAL_TIM_ConfigClockSource+0x186>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2202      	movs	r2, #2
 8004b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ba2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004baa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68ba      	ldr	r2, [r7, #8]
 8004bb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bbc:	d03e      	beq.n	8004c3c <HAL_TIM_ConfigClockSource+0xd4>
 8004bbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bc2:	f200 8087 	bhi.w	8004cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8004bc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bca:	f000 8086 	beq.w	8004cda <HAL_TIM_ConfigClockSource+0x172>
 8004bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bd2:	d87f      	bhi.n	8004cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8004bd4:	2b70      	cmp	r3, #112	; 0x70
 8004bd6:	d01a      	beq.n	8004c0e <HAL_TIM_ConfigClockSource+0xa6>
 8004bd8:	2b70      	cmp	r3, #112	; 0x70
 8004bda:	d87b      	bhi.n	8004cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8004bdc:	2b60      	cmp	r3, #96	; 0x60
 8004bde:	d050      	beq.n	8004c82 <HAL_TIM_ConfigClockSource+0x11a>
 8004be0:	2b60      	cmp	r3, #96	; 0x60
 8004be2:	d877      	bhi.n	8004cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8004be4:	2b50      	cmp	r3, #80	; 0x50
 8004be6:	d03c      	beq.n	8004c62 <HAL_TIM_ConfigClockSource+0xfa>
 8004be8:	2b50      	cmp	r3, #80	; 0x50
 8004bea:	d873      	bhi.n	8004cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8004bec:	2b40      	cmp	r3, #64	; 0x40
 8004bee:	d058      	beq.n	8004ca2 <HAL_TIM_ConfigClockSource+0x13a>
 8004bf0:	2b40      	cmp	r3, #64	; 0x40
 8004bf2:	d86f      	bhi.n	8004cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8004bf4:	2b30      	cmp	r3, #48	; 0x30
 8004bf6:	d064      	beq.n	8004cc2 <HAL_TIM_ConfigClockSource+0x15a>
 8004bf8:	2b30      	cmp	r3, #48	; 0x30
 8004bfa:	d86b      	bhi.n	8004cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8004bfc:	2b20      	cmp	r3, #32
 8004bfe:	d060      	beq.n	8004cc2 <HAL_TIM_ConfigClockSource+0x15a>
 8004c00:	2b20      	cmp	r3, #32
 8004c02:	d867      	bhi.n	8004cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d05c      	beq.n	8004cc2 <HAL_TIM_ConfigClockSource+0x15a>
 8004c08:	2b10      	cmp	r3, #16
 8004c0a:	d05a      	beq.n	8004cc2 <HAL_TIM_ConfigClockSource+0x15a>
 8004c0c:	e062      	b.n	8004cd4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6818      	ldr	r0, [r3, #0]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	6899      	ldr	r1, [r3, #8]
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	685a      	ldr	r2, [r3, #4]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	f000 fccb 	bl	80055b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68ba      	ldr	r2, [r7, #8]
 8004c38:	609a      	str	r2, [r3, #8]
      break;
 8004c3a:	e04f      	b.n	8004cdc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6818      	ldr	r0, [r3, #0]
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	6899      	ldr	r1, [r3, #8]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	685a      	ldr	r2, [r3, #4]
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	f000 fcb4 	bl	80055b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	689a      	ldr	r2, [r3, #8]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c5e:	609a      	str	r2, [r3, #8]
      break;
 8004c60:	e03c      	b.n	8004cdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6818      	ldr	r0, [r3, #0]
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	6859      	ldr	r1, [r3, #4]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	461a      	mov	r2, r3
 8004c70:	f000 fb72 	bl	8005358 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2150      	movs	r1, #80	; 0x50
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f000 fc81 	bl	8005582 <TIM_ITRx_SetConfig>
      break;
 8004c80:	e02c      	b.n	8004cdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6818      	ldr	r0, [r3, #0]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	6859      	ldr	r1, [r3, #4]
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	461a      	mov	r2, r3
 8004c90:	f000 fbce 	bl	8005430 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2160      	movs	r1, #96	; 0x60
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f000 fc71 	bl	8005582 <TIM_ITRx_SetConfig>
      break;
 8004ca0:	e01c      	b.n	8004cdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6818      	ldr	r0, [r3, #0]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	6859      	ldr	r1, [r3, #4]
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	461a      	mov	r2, r3
 8004cb0:	f000 fb52 	bl	8005358 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2140      	movs	r1, #64	; 0x40
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f000 fc61 	bl	8005582 <TIM_ITRx_SetConfig>
      break;
 8004cc0:	e00c      	b.n	8004cdc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4619      	mov	r1, r3
 8004ccc:	4610      	mov	r0, r2
 8004cce:	f000 fc58 	bl	8005582 <TIM_ITRx_SetConfig>
      break;
 8004cd2:	e003      	b.n	8004cdc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	73fb      	strb	r3, [r7, #15]
      break;
 8004cd8:	e000      	b.n	8004cdc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004cda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3710      	adds	r7, #16
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
	...

08004cf8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004d02:	2300      	movs	r3, #0
 8004d04:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	2b0c      	cmp	r3, #12
 8004d0a:	d831      	bhi.n	8004d70 <HAL_TIM_ReadCapturedValue+0x78>
 8004d0c:	a201      	add	r2, pc, #4	; (adr r2, 8004d14 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d12:	bf00      	nop
 8004d14:	08004d49 	.word	0x08004d49
 8004d18:	08004d71 	.word	0x08004d71
 8004d1c:	08004d71 	.word	0x08004d71
 8004d20:	08004d71 	.word	0x08004d71
 8004d24:	08004d53 	.word	0x08004d53
 8004d28:	08004d71 	.word	0x08004d71
 8004d2c:	08004d71 	.word	0x08004d71
 8004d30:	08004d71 	.word	0x08004d71
 8004d34:	08004d5d 	.word	0x08004d5d
 8004d38:	08004d71 	.word	0x08004d71
 8004d3c:	08004d71 	.word	0x08004d71
 8004d40:	08004d71 	.word	0x08004d71
 8004d44:	08004d67 	.word	0x08004d67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d4e:	60fb      	str	r3, [r7, #12]

      break;
 8004d50:	e00f      	b.n	8004d72 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d58:	60fb      	str	r3, [r7, #12]

      break;
 8004d5a:	e00a      	b.n	8004d72 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d62:	60fb      	str	r3, [r7, #12]

      break;
 8004d64:	e005      	b.n	8004d72 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6c:	60fb      	str	r3, [r7, #12]

      break;
 8004d6e:	e000      	b.n	8004d72 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004d70:	bf00      	nop
  }

  return tmpreg;
 8004d72:	68fb      	ldr	r3, [r7, #12]
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3714      	adds	r7, #20
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004d88:	bf00      	nop
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d9c:	bf00      	nop
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004db0:	bf00      	nop
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004dc4:	bf00      	nop
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a40      	ldr	r2, [pc, #256]	; (8004ee4 <TIM_Base_SetConfig+0x114>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d013      	beq.n	8004e10 <TIM_Base_SetConfig+0x40>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dee:	d00f      	beq.n	8004e10 <TIM_Base_SetConfig+0x40>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a3d      	ldr	r2, [pc, #244]	; (8004ee8 <TIM_Base_SetConfig+0x118>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d00b      	beq.n	8004e10 <TIM_Base_SetConfig+0x40>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a3c      	ldr	r2, [pc, #240]	; (8004eec <TIM_Base_SetConfig+0x11c>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d007      	beq.n	8004e10 <TIM_Base_SetConfig+0x40>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a3b      	ldr	r2, [pc, #236]	; (8004ef0 <TIM_Base_SetConfig+0x120>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d003      	beq.n	8004e10 <TIM_Base_SetConfig+0x40>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a3a      	ldr	r2, [pc, #232]	; (8004ef4 <TIM_Base_SetConfig+0x124>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d108      	bne.n	8004e22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a2f      	ldr	r2, [pc, #188]	; (8004ee4 <TIM_Base_SetConfig+0x114>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d02b      	beq.n	8004e82 <TIM_Base_SetConfig+0xb2>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e30:	d027      	beq.n	8004e82 <TIM_Base_SetConfig+0xb2>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a2c      	ldr	r2, [pc, #176]	; (8004ee8 <TIM_Base_SetConfig+0x118>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d023      	beq.n	8004e82 <TIM_Base_SetConfig+0xb2>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a2b      	ldr	r2, [pc, #172]	; (8004eec <TIM_Base_SetConfig+0x11c>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d01f      	beq.n	8004e82 <TIM_Base_SetConfig+0xb2>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a2a      	ldr	r2, [pc, #168]	; (8004ef0 <TIM_Base_SetConfig+0x120>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d01b      	beq.n	8004e82 <TIM_Base_SetConfig+0xb2>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a29      	ldr	r2, [pc, #164]	; (8004ef4 <TIM_Base_SetConfig+0x124>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d017      	beq.n	8004e82 <TIM_Base_SetConfig+0xb2>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a28      	ldr	r2, [pc, #160]	; (8004ef8 <TIM_Base_SetConfig+0x128>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d013      	beq.n	8004e82 <TIM_Base_SetConfig+0xb2>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a27      	ldr	r2, [pc, #156]	; (8004efc <TIM_Base_SetConfig+0x12c>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d00f      	beq.n	8004e82 <TIM_Base_SetConfig+0xb2>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a26      	ldr	r2, [pc, #152]	; (8004f00 <TIM_Base_SetConfig+0x130>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d00b      	beq.n	8004e82 <TIM_Base_SetConfig+0xb2>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a25      	ldr	r2, [pc, #148]	; (8004f04 <TIM_Base_SetConfig+0x134>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d007      	beq.n	8004e82 <TIM_Base_SetConfig+0xb2>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a24      	ldr	r2, [pc, #144]	; (8004f08 <TIM_Base_SetConfig+0x138>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d003      	beq.n	8004e82 <TIM_Base_SetConfig+0xb2>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a23      	ldr	r2, [pc, #140]	; (8004f0c <TIM_Base_SetConfig+0x13c>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d108      	bne.n	8004e94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	695b      	ldr	r3, [r3, #20]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	689a      	ldr	r2, [r3, #8]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a0a      	ldr	r2, [pc, #40]	; (8004ee4 <TIM_Base_SetConfig+0x114>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d003      	beq.n	8004ec8 <TIM_Base_SetConfig+0xf8>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a0c      	ldr	r2, [pc, #48]	; (8004ef4 <TIM_Base_SetConfig+0x124>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d103      	bne.n	8004ed0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	691a      	ldr	r2, [r3, #16]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	615a      	str	r2, [r3, #20]
}
 8004ed6:	bf00      	nop
 8004ed8:	3714      	adds	r7, #20
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	40010000 	.word	0x40010000
 8004ee8:	40000400 	.word	0x40000400
 8004eec:	40000800 	.word	0x40000800
 8004ef0:	40000c00 	.word	0x40000c00
 8004ef4:	40010400 	.word	0x40010400
 8004ef8:	40014000 	.word	0x40014000
 8004efc:	40014400 	.word	0x40014400
 8004f00:	40014800 	.word	0x40014800
 8004f04:	40001800 	.word	0x40001800
 8004f08:	40001c00 	.word	0x40001c00
 8004f0c:	40002000 	.word	0x40002000

08004f10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b087      	sub	sp, #28
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	f023 0201 	bic.w	r2, r3, #1
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f023 0303 	bic.w	r3, r3, #3
 8004f46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f023 0302 	bic.w	r3, r3, #2
 8004f58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a20      	ldr	r2, [pc, #128]	; (8004fe8 <TIM_OC1_SetConfig+0xd8>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d003      	beq.n	8004f74 <TIM_OC1_SetConfig+0x64>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a1f      	ldr	r2, [pc, #124]	; (8004fec <TIM_OC1_SetConfig+0xdc>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d10c      	bne.n	8004f8e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	f023 0308 	bic.w	r3, r3, #8
 8004f7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	697a      	ldr	r2, [r7, #20]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	f023 0304 	bic.w	r3, r3, #4
 8004f8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a15      	ldr	r2, [pc, #84]	; (8004fe8 <TIM_OC1_SetConfig+0xd8>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d003      	beq.n	8004f9e <TIM_OC1_SetConfig+0x8e>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a14      	ldr	r2, [pc, #80]	; (8004fec <TIM_OC1_SetConfig+0xdc>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d111      	bne.n	8004fc2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	685a      	ldr	r2, [r3, #4]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	621a      	str	r2, [r3, #32]
}
 8004fdc:	bf00      	nop
 8004fde:	371c      	adds	r7, #28
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr
 8004fe8:	40010000 	.word	0x40010000
 8004fec:	40010400 	.word	0x40010400

08004ff0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b087      	sub	sp, #28
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	f023 0210 	bic.w	r2, r3, #16
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800501e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005026:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	021b      	lsls	r3, r3, #8
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	4313      	orrs	r3, r2
 8005032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	f023 0320 	bic.w	r3, r3, #32
 800503a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	011b      	lsls	r3, r3, #4
 8005042:	697a      	ldr	r2, [r7, #20]
 8005044:	4313      	orrs	r3, r2
 8005046:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a22      	ldr	r2, [pc, #136]	; (80050d4 <TIM_OC2_SetConfig+0xe4>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d003      	beq.n	8005058 <TIM_OC2_SetConfig+0x68>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a21      	ldr	r2, [pc, #132]	; (80050d8 <TIM_OC2_SetConfig+0xe8>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d10d      	bne.n	8005074 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800505e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	011b      	lsls	r3, r3, #4
 8005066:	697a      	ldr	r2, [r7, #20]
 8005068:	4313      	orrs	r3, r2
 800506a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005072:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a17      	ldr	r2, [pc, #92]	; (80050d4 <TIM_OC2_SetConfig+0xe4>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d003      	beq.n	8005084 <TIM_OC2_SetConfig+0x94>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a16      	ldr	r2, [pc, #88]	; (80050d8 <TIM_OC2_SetConfig+0xe8>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d113      	bne.n	80050ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800508a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005092:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	695b      	ldr	r3, [r3, #20]
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	693a      	ldr	r2, [r7, #16]
 800509c:	4313      	orrs	r3, r2
 800509e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	699b      	ldr	r3, [r3, #24]
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	693a      	ldr	r2, [r7, #16]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	685a      	ldr	r2, [r3, #4]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	697a      	ldr	r2, [r7, #20]
 80050c4:	621a      	str	r2, [r3, #32]
}
 80050c6:	bf00      	nop
 80050c8:	371c      	adds	r7, #28
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	40010000 	.word	0x40010000
 80050d8:	40010400 	.word	0x40010400

080050dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050dc:	b480      	push	{r7}
 80050de:	b087      	sub	sp, #28
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	69db      	ldr	r3, [r3, #28]
 8005102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800510a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f023 0303 	bic.w	r3, r3, #3
 8005112:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	4313      	orrs	r3, r2
 800511c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005124:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	021b      	lsls	r3, r3, #8
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	4313      	orrs	r3, r2
 8005130:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a21      	ldr	r2, [pc, #132]	; (80051bc <TIM_OC3_SetConfig+0xe0>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d003      	beq.n	8005142 <TIM_OC3_SetConfig+0x66>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a20      	ldr	r2, [pc, #128]	; (80051c0 <TIM_OC3_SetConfig+0xe4>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d10d      	bne.n	800515e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005148:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	021b      	lsls	r3, r3, #8
 8005150:	697a      	ldr	r2, [r7, #20]
 8005152:	4313      	orrs	r3, r2
 8005154:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800515c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a16      	ldr	r2, [pc, #88]	; (80051bc <TIM_OC3_SetConfig+0xe0>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d003      	beq.n	800516e <TIM_OC3_SetConfig+0x92>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a15      	ldr	r2, [pc, #84]	; (80051c0 <TIM_OC3_SetConfig+0xe4>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d113      	bne.n	8005196 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005174:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800517c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	011b      	lsls	r3, r3, #4
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	4313      	orrs	r3, r2
 8005188:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	011b      	lsls	r3, r3, #4
 8005190:	693a      	ldr	r2, [r7, #16]
 8005192:	4313      	orrs	r3, r2
 8005194:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	693a      	ldr	r2, [r7, #16]
 800519a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	685a      	ldr	r2, [r3, #4]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	697a      	ldr	r2, [r7, #20]
 80051ae:	621a      	str	r2, [r3, #32]
}
 80051b0:	bf00      	nop
 80051b2:	371c      	adds	r7, #28
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr
 80051bc:	40010000 	.word	0x40010000
 80051c0:	40010400 	.word	0x40010400

080051c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b087      	sub	sp, #28
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a1b      	ldr	r3, [r3, #32]
 80051d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a1b      	ldr	r3, [r3, #32]
 80051de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	69db      	ldr	r3, [r3, #28]
 80051ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	021b      	lsls	r3, r3, #8
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	4313      	orrs	r3, r2
 8005206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800520e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	031b      	lsls	r3, r3, #12
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	4313      	orrs	r3, r2
 800521a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a12      	ldr	r2, [pc, #72]	; (8005268 <TIM_OC4_SetConfig+0xa4>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d003      	beq.n	800522c <TIM_OC4_SetConfig+0x68>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a11      	ldr	r2, [pc, #68]	; (800526c <TIM_OC4_SetConfig+0xa8>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d109      	bne.n	8005240 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005232:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	695b      	ldr	r3, [r3, #20]
 8005238:	019b      	lsls	r3, r3, #6
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	4313      	orrs	r3, r2
 800523e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	685a      	ldr	r2, [r3, #4]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	621a      	str	r2, [r3, #32]
}
 800525a:	bf00      	nop
 800525c:	371c      	adds	r7, #28
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	40010000 	.word	0x40010000
 800526c:	40010400 	.word	0x40010400

08005270 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005270:	b480      	push	{r7}
 8005272:	b087      	sub	sp, #28
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
 800527c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6a1b      	ldr	r3, [r3, #32]
 8005282:	f023 0201 	bic.w	r2, r3, #1
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6a1b      	ldr	r3, [r3, #32]
 8005294:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	4a28      	ldr	r2, [pc, #160]	; (800533c <TIM_TI1_SetConfig+0xcc>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d01b      	beq.n	80052d6 <TIM_TI1_SetConfig+0x66>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052a4:	d017      	beq.n	80052d6 <TIM_TI1_SetConfig+0x66>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	4a25      	ldr	r2, [pc, #148]	; (8005340 <TIM_TI1_SetConfig+0xd0>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d013      	beq.n	80052d6 <TIM_TI1_SetConfig+0x66>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	4a24      	ldr	r2, [pc, #144]	; (8005344 <TIM_TI1_SetConfig+0xd4>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d00f      	beq.n	80052d6 <TIM_TI1_SetConfig+0x66>
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	4a23      	ldr	r2, [pc, #140]	; (8005348 <TIM_TI1_SetConfig+0xd8>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d00b      	beq.n	80052d6 <TIM_TI1_SetConfig+0x66>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	4a22      	ldr	r2, [pc, #136]	; (800534c <TIM_TI1_SetConfig+0xdc>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d007      	beq.n	80052d6 <TIM_TI1_SetConfig+0x66>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	4a21      	ldr	r2, [pc, #132]	; (8005350 <TIM_TI1_SetConfig+0xe0>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d003      	beq.n	80052d6 <TIM_TI1_SetConfig+0x66>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	4a20      	ldr	r2, [pc, #128]	; (8005354 <TIM_TI1_SetConfig+0xe4>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d101      	bne.n	80052da <TIM_TI1_SetConfig+0x6a>
 80052d6:	2301      	movs	r3, #1
 80052d8:	e000      	b.n	80052dc <TIM_TI1_SetConfig+0x6c>
 80052da:	2300      	movs	r3, #0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d008      	beq.n	80052f2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	f023 0303 	bic.w	r3, r3, #3
 80052e6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	617b      	str	r3, [r7, #20]
 80052f0:	e003      	b.n	80052fa <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	f043 0301 	orr.w	r3, r3, #1
 80052f8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005300:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	011b      	lsls	r3, r3, #4
 8005306:	b2db      	uxtb	r3, r3
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	4313      	orrs	r3, r2
 800530c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	f023 030a 	bic.w	r3, r3, #10
 8005314:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	f003 030a 	and.w	r3, r3, #10
 800531c:	693a      	ldr	r2, [r7, #16]
 800531e:	4313      	orrs	r3, r2
 8005320:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	693a      	ldr	r2, [r7, #16]
 800532c:	621a      	str	r2, [r3, #32]
}
 800532e:	bf00      	nop
 8005330:	371c      	adds	r7, #28
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	40010000 	.word	0x40010000
 8005340:	40000400 	.word	0x40000400
 8005344:	40000800 	.word	0x40000800
 8005348:	40000c00 	.word	0x40000c00
 800534c:	40010400 	.word	0x40010400
 8005350:	40014000 	.word	0x40014000
 8005354:	40001800 	.word	0x40001800

08005358 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005358:	b480      	push	{r7}
 800535a:	b087      	sub	sp, #28
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6a1b      	ldr	r3, [r3, #32]
 8005368:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6a1b      	ldr	r3, [r3, #32]
 800536e:	f023 0201 	bic.w	r2, r3, #1
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005382:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	011b      	lsls	r3, r3, #4
 8005388:	693a      	ldr	r2, [r7, #16]
 800538a:	4313      	orrs	r3, r2
 800538c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	f023 030a 	bic.w	r3, r3, #10
 8005394:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	4313      	orrs	r3, r2
 800539c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	693a      	ldr	r2, [r7, #16]
 80053a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	621a      	str	r2, [r3, #32]
}
 80053aa:	bf00      	nop
 80053ac:	371c      	adds	r7, #28
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr

080053b6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80053b6:	b480      	push	{r7}
 80053b8:	b087      	sub	sp, #28
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	60f8      	str	r0, [r7, #12]
 80053be:	60b9      	str	r1, [r7, #8]
 80053c0:	607a      	str	r2, [r7, #4]
 80053c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6a1b      	ldr	r3, [r3, #32]
 80053c8:	f023 0210 	bic.w	r2, r3, #16
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6a1b      	ldr	r3, [r3, #32]
 80053da:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053e2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	021b      	lsls	r3, r3, #8
 80053e8:	697a      	ldr	r2, [r7, #20]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	031b      	lsls	r3, r3, #12
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	697a      	ldr	r2, [r7, #20]
 80053fe:	4313      	orrs	r3, r2
 8005400:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005408:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	011b      	lsls	r3, r3, #4
 800540e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005412:	693a      	ldr	r2, [r7, #16]
 8005414:	4313      	orrs	r3, r2
 8005416:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	697a      	ldr	r2, [r7, #20]
 800541c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	621a      	str	r2, [r3, #32]
}
 8005424:	bf00      	nop
 8005426:	371c      	adds	r7, #28
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005430:	b480      	push	{r7}
 8005432:	b087      	sub	sp, #28
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6a1b      	ldr	r3, [r3, #32]
 8005440:	f023 0210 	bic.w	r2, r3, #16
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800545a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	031b      	lsls	r3, r3, #12
 8005460:	697a      	ldr	r2, [r7, #20]
 8005462:	4313      	orrs	r3, r2
 8005464:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800546c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	011b      	lsls	r3, r3, #4
 8005472:	693a      	ldr	r2, [r7, #16]
 8005474:	4313      	orrs	r3, r2
 8005476:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	697a      	ldr	r2, [r7, #20]
 800547c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	621a      	str	r2, [r3, #32]
}
 8005484:	bf00      	nop
 8005486:	371c      	adds	r7, #28
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005490:	b480      	push	{r7}
 8005492:	b087      	sub	sp, #28
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
 800549c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6a1b      	ldr	r3, [r3, #32]
 80054a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	69db      	ldr	r3, [r3, #28]
 80054ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6a1b      	ldr	r3, [r3, #32]
 80054b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	f023 0303 	bic.w	r3, r3, #3
 80054bc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054cc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	011b      	lsls	r3, r3, #4
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	697a      	ldr	r2, [r7, #20]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80054e0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	021b      	lsls	r3, r3, #8
 80054e6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	693a      	ldr	r2, [r7, #16]
 80054fa:	621a      	str	r2, [r3, #32]
}
 80054fc:	bf00      	nop
 80054fe:	371c      	adds	r7, #28
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005508:	b480      	push	{r7}
 800550a:	b087      	sub	sp, #28
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	607a      	str	r2, [r7, #4]
 8005514:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	69db      	ldr	r3, [r3, #28]
 8005526:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6a1b      	ldr	r3, [r3, #32]
 800552c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005534:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	021b      	lsls	r3, r3, #8
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	4313      	orrs	r3, r2
 800553e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005546:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	031b      	lsls	r3, r3, #12
 800554c:	b29b      	uxth	r3, r3
 800554e:	697a      	ldr	r2, [r7, #20]
 8005550:	4313      	orrs	r3, r2
 8005552:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800555a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	031b      	lsls	r3, r3, #12
 8005560:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005564:	693a      	ldr	r2, [r7, #16]
 8005566:	4313      	orrs	r3, r2
 8005568:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	693a      	ldr	r2, [r7, #16]
 8005574:	621a      	str	r2, [r3, #32]
}
 8005576:	bf00      	nop
 8005578:	371c      	adds	r7, #28
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr

08005582 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005582:	b480      	push	{r7}
 8005584:	b085      	sub	sp, #20
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
 800558a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005598:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800559a:	683a      	ldr	r2, [r7, #0]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	4313      	orrs	r3, r2
 80055a0:	f043 0307 	orr.w	r3, r3, #7
 80055a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	609a      	str	r2, [r3, #8]
}
 80055ac:	bf00      	nop
 80055ae:	3714      	adds	r7, #20
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b087      	sub	sp, #28
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	607a      	str	r2, [r7, #4]
 80055c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	021a      	lsls	r2, r3, #8
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	431a      	orrs	r2, r3
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	4313      	orrs	r3, r2
 80055e0:	697a      	ldr	r2, [r7, #20]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	609a      	str	r2, [r3, #8]
}
 80055ec:	bf00      	nop
 80055ee:	371c      	adds	r7, #28
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b087      	sub	sp, #28
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	f003 031f 	and.w	r3, r3, #31
 800560a:	2201      	movs	r2, #1
 800560c:	fa02 f303 	lsl.w	r3, r2, r3
 8005610:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6a1a      	ldr	r2, [r3, #32]
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	43db      	mvns	r3, r3
 800561a:	401a      	ands	r2, r3
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6a1a      	ldr	r2, [r3, #32]
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	f003 031f 	and.w	r3, r3, #31
 800562a:	6879      	ldr	r1, [r7, #4]
 800562c:	fa01 f303 	lsl.w	r3, r1, r3
 8005630:	431a      	orrs	r2, r3
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	621a      	str	r2, [r3, #32]
}
 8005636:	bf00      	nop
 8005638:	371c      	adds	r7, #28
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
	...

08005644 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005654:	2b01      	cmp	r3, #1
 8005656:	d101      	bne.n	800565c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005658:	2302      	movs	r3, #2
 800565a:	e05a      	b.n	8005712 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2202      	movs	r2, #2
 8005668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005682:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	4313      	orrs	r3, r2
 800568c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a21      	ldr	r2, [pc, #132]	; (8005720 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d022      	beq.n	80056e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056a8:	d01d      	beq.n	80056e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a1d      	ldr	r2, [pc, #116]	; (8005724 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d018      	beq.n	80056e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a1b      	ldr	r2, [pc, #108]	; (8005728 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d013      	beq.n	80056e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a1a      	ldr	r2, [pc, #104]	; (800572c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d00e      	beq.n	80056e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a18      	ldr	r2, [pc, #96]	; (8005730 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d009      	beq.n	80056e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a17      	ldr	r2, [pc, #92]	; (8005734 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d004      	beq.n	80056e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a15      	ldr	r2, [pc, #84]	; (8005738 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d10c      	bne.n	8005700 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	68ba      	ldr	r2, [r7, #8]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68ba      	ldr	r2, [r7, #8]
 80056fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3714      	adds	r7, #20
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	40010000 	.word	0x40010000
 8005724:	40000400 	.word	0x40000400
 8005728:	40000800 	.word	0x40000800
 800572c:	40000c00 	.word	0x40000c00
 8005730:	40010400 	.word	0x40010400
 8005734:	40014000 	.word	0x40014000
 8005738:	40001800 	.word	0x40001800

0800573c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005744:	bf00      	nop
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005758:	bf00      	nop
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005764:	b084      	sub	sp, #16
 8005766:	b580      	push	{r7, lr}
 8005768:	b084      	sub	sp, #16
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
 800576e:	f107 001c 	add.w	r0, r7, #28
 8005772:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005778:	2b01      	cmp	r3, #1
 800577a:	d122      	bne.n	80057c2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005780:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005790:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80057a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d105      	bne.n	80057b6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f001 fbee 	bl	8006f98 <USB_CoreReset>
 80057bc:	4603      	mov	r3, r0
 80057be:	73fb      	strb	r3, [r7, #15]
 80057c0:	e01a      	b.n	80057f8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f001 fbe2 	bl	8006f98 <USB_CoreReset>
 80057d4:	4603      	mov	r3, r0
 80057d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80057d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d106      	bne.n	80057ec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	639a      	str	r2, [r3, #56]	; 0x38
 80057ea:	e005      	b.n	80057f8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80057f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d10b      	bne.n	8005816 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f043 0206 	orr.w	r2, r3, #6
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f043 0220 	orr.w	r2, r3, #32
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005816:	7bfb      	ldrb	r3, [r7, #15]
}
 8005818:	4618      	mov	r0, r3
 800581a:	3710      	adds	r7, #16
 800581c:	46bd      	mov	sp, r7
 800581e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005822:	b004      	add	sp, #16
 8005824:	4770      	bx	lr
	...

08005828 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005828:	b480      	push	{r7}
 800582a:	b087      	sub	sp, #28
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	4613      	mov	r3, r2
 8005834:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005836:	79fb      	ldrb	r3, [r7, #7]
 8005838:	2b02      	cmp	r3, #2
 800583a:	d165      	bne.n	8005908 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	4a41      	ldr	r2, [pc, #260]	; (8005944 <USB_SetTurnaroundTime+0x11c>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d906      	bls.n	8005852 <USB_SetTurnaroundTime+0x2a>
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	4a40      	ldr	r2, [pc, #256]	; (8005948 <USB_SetTurnaroundTime+0x120>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d202      	bcs.n	8005852 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800584c:	230f      	movs	r3, #15
 800584e:	617b      	str	r3, [r7, #20]
 8005850:	e062      	b.n	8005918 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	4a3c      	ldr	r2, [pc, #240]	; (8005948 <USB_SetTurnaroundTime+0x120>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d306      	bcc.n	8005868 <USB_SetTurnaroundTime+0x40>
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	4a3b      	ldr	r2, [pc, #236]	; (800594c <USB_SetTurnaroundTime+0x124>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d202      	bcs.n	8005868 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005862:	230e      	movs	r3, #14
 8005864:	617b      	str	r3, [r7, #20]
 8005866:	e057      	b.n	8005918 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	4a38      	ldr	r2, [pc, #224]	; (800594c <USB_SetTurnaroundTime+0x124>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d306      	bcc.n	800587e <USB_SetTurnaroundTime+0x56>
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	4a37      	ldr	r2, [pc, #220]	; (8005950 <USB_SetTurnaroundTime+0x128>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d202      	bcs.n	800587e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005878:	230d      	movs	r3, #13
 800587a:	617b      	str	r3, [r7, #20]
 800587c:	e04c      	b.n	8005918 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	4a33      	ldr	r2, [pc, #204]	; (8005950 <USB_SetTurnaroundTime+0x128>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d306      	bcc.n	8005894 <USB_SetTurnaroundTime+0x6c>
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	4a32      	ldr	r2, [pc, #200]	; (8005954 <USB_SetTurnaroundTime+0x12c>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d802      	bhi.n	8005894 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800588e:	230c      	movs	r3, #12
 8005890:	617b      	str	r3, [r7, #20]
 8005892:	e041      	b.n	8005918 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	4a2f      	ldr	r2, [pc, #188]	; (8005954 <USB_SetTurnaroundTime+0x12c>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d906      	bls.n	80058aa <USB_SetTurnaroundTime+0x82>
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	4a2e      	ldr	r2, [pc, #184]	; (8005958 <USB_SetTurnaroundTime+0x130>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d802      	bhi.n	80058aa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80058a4:	230b      	movs	r3, #11
 80058a6:	617b      	str	r3, [r7, #20]
 80058a8:	e036      	b.n	8005918 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	4a2a      	ldr	r2, [pc, #168]	; (8005958 <USB_SetTurnaroundTime+0x130>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d906      	bls.n	80058c0 <USB_SetTurnaroundTime+0x98>
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	4a29      	ldr	r2, [pc, #164]	; (800595c <USB_SetTurnaroundTime+0x134>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d802      	bhi.n	80058c0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80058ba:	230a      	movs	r3, #10
 80058bc:	617b      	str	r3, [r7, #20]
 80058be:	e02b      	b.n	8005918 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	4a26      	ldr	r2, [pc, #152]	; (800595c <USB_SetTurnaroundTime+0x134>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d906      	bls.n	80058d6 <USB_SetTurnaroundTime+0xae>
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	4a25      	ldr	r2, [pc, #148]	; (8005960 <USB_SetTurnaroundTime+0x138>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d202      	bcs.n	80058d6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80058d0:	2309      	movs	r3, #9
 80058d2:	617b      	str	r3, [r7, #20]
 80058d4:	e020      	b.n	8005918 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	4a21      	ldr	r2, [pc, #132]	; (8005960 <USB_SetTurnaroundTime+0x138>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d306      	bcc.n	80058ec <USB_SetTurnaroundTime+0xc4>
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	4a20      	ldr	r2, [pc, #128]	; (8005964 <USB_SetTurnaroundTime+0x13c>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d802      	bhi.n	80058ec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80058e6:	2308      	movs	r3, #8
 80058e8:	617b      	str	r3, [r7, #20]
 80058ea:	e015      	b.n	8005918 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	4a1d      	ldr	r2, [pc, #116]	; (8005964 <USB_SetTurnaroundTime+0x13c>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d906      	bls.n	8005902 <USB_SetTurnaroundTime+0xda>
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	4a1c      	ldr	r2, [pc, #112]	; (8005968 <USB_SetTurnaroundTime+0x140>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d202      	bcs.n	8005902 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80058fc:	2307      	movs	r3, #7
 80058fe:	617b      	str	r3, [r7, #20]
 8005900:	e00a      	b.n	8005918 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005902:	2306      	movs	r3, #6
 8005904:	617b      	str	r3, [r7, #20]
 8005906:	e007      	b.n	8005918 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005908:	79fb      	ldrb	r3, [r7, #7]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d102      	bne.n	8005914 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800590e:	2309      	movs	r3, #9
 8005910:	617b      	str	r3, [r7, #20]
 8005912:	e001      	b.n	8005918 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005914:	2309      	movs	r3, #9
 8005916:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	68da      	ldr	r2, [r3, #12]
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	029b      	lsls	r3, r3, #10
 800592c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005930:	431a      	orrs	r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	371c      	adds	r7, #28
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr
 8005944:	00d8acbf 	.word	0x00d8acbf
 8005948:	00e4e1c0 	.word	0x00e4e1c0
 800594c:	00f42400 	.word	0x00f42400
 8005950:	01067380 	.word	0x01067380
 8005954:	011a499f 	.word	0x011a499f
 8005958:	01312cff 	.word	0x01312cff
 800595c:	014ca43f 	.word	0x014ca43f
 8005960:	016e3600 	.word	0x016e3600
 8005964:	01a6ab1f 	.word	0x01a6ab1f
 8005968:	01e84800 	.word	0x01e84800

0800596c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f043 0201 	orr.w	r2, r3, #1
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	370c      	adds	r7, #12
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr

0800598e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800598e:	b480      	push	{r7}
 8005990:	b083      	sub	sp, #12
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f023 0201 	bic.w	r2, r3, #1
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	460b      	mov	r3, r1
 80059ba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80059bc:	2300      	movs	r3, #0
 80059be:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80059cc:	78fb      	ldrb	r3, [r7, #3]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d115      	bne.n	80059fe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80059de:	2001      	movs	r0, #1
 80059e0:	f7fc f928 	bl	8001c34 <HAL_Delay>
      ms++;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	3301      	adds	r3, #1
 80059e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f001 fa45 	bl	8006e7a <USB_GetMode>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d01e      	beq.n	8005a34 <USB_SetCurrentMode+0x84>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2b31      	cmp	r3, #49	; 0x31
 80059fa:	d9f0      	bls.n	80059de <USB_SetCurrentMode+0x2e>
 80059fc:	e01a      	b.n	8005a34 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80059fe:	78fb      	ldrb	r3, [r7, #3]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d115      	bne.n	8005a30 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005a10:	2001      	movs	r0, #1
 8005a12:	f7fc f90f 	bl	8001c34 <HAL_Delay>
      ms++;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	3301      	adds	r3, #1
 8005a1a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f001 fa2c 	bl	8006e7a <USB_GetMode>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d005      	beq.n	8005a34 <USB_SetCurrentMode+0x84>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2b31      	cmp	r3, #49	; 0x31
 8005a2c:	d9f0      	bls.n	8005a10 <USB_SetCurrentMode+0x60>
 8005a2e:	e001      	b.n	8005a34 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	e005      	b.n	8005a40 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2b32      	cmp	r3, #50	; 0x32
 8005a38:	d101      	bne.n	8005a3e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e000      	b.n	8005a40 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3710      	adds	r7, #16
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a48:	b084      	sub	sp, #16
 8005a4a:	b580      	push	{r7, lr}
 8005a4c:	b086      	sub	sp, #24
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
 8005a52:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005a56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005a62:	2300      	movs	r3, #0
 8005a64:	613b      	str	r3, [r7, #16]
 8005a66:	e009      	b.n	8005a7c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	3340      	adds	r3, #64	; 0x40
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	4413      	add	r3, r2
 8005a72:	2200      	movs	r2, #0
 8005a74:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	613b      	str	r3, [r7, #16]
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	2b0e      	cmp	r3, #14
 8005a80:	d9f2      	bls.n	8005a68 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005a82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d11c      	bne.n	8005ac2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a96:	f043 0302 	orr.w	r3, r3, #2
 8005a9a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aac:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	639a      	str	r2, [r3, #56]	; 0x38
 8005ac0:	e00b      	b.n	8005ada <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aec:	4619      	mov	r1, r3
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005af4:	461a      	mov	r2, r3
 8005af6:	680b      	ldr	r3, [r1, #0]
 8005af8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d10c      	bne.n	8005b1a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d104      	bne.n	8005b10 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005b06:	2100      	movs	r1, #0
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 f965 	bl	8005dd8 <USB_SetDevSpeed>
 8005b0e:	e008      	b.n	8005b22 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005b10:	2101      	movs	r1, #1
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 f960 	bl	8005dd8 <USB_SetDevSpeed>
 8005b18:	e003      	b.n	8005b22 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005b1a:	2103      	movs	r1, #3
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f000 f95b 	bl	8005dd8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005b22:	2110      	movs	r1, #16
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 f8f3 	bl	8005d10 <USB_FlushTxFifo>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d001      	beq.n	8005b34 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 f91f 	bl	8005d78 <USB_FlushRxFifo>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d001      	beq.n	8005b44 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b56:	461a      	mov	r2, r3
 8005b58:	2300      	movs	r3, #0
 8005b5a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b62:	461a      	mov	r2, r3
 8005b64:	2300      	movs	r3, #0
 8005b66:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b68:	2300      	movs	r3, #0
 8005b6a:	613b      	str	r3, [r7, #16]
 8005b6c:	e043      	b.n	8005bf6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	015a      	lsls	r2, r3, #5
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	4413      	add	r3, r2
 8005b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b84:	d118      	bne.n	8005bb8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d10a      	bne.n	8005ba2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	015a      	lsls	r2, r3, #5
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	4413      	add	r3, r2
 8005b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b98:	461a      	mov	r2, r3
 8005b9a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005b9e:	6013      	str	r3, [r2, #0]
 8005ba0:	e013      	b.n	8005bca <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	015a      	lsls	r2, r3, #5
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	4413      	add	r3, r2
 8005baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bae:	461a      	mov	r2, r3
 8005bb0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005bb4:	6013      	str	r3, [r2, #0]
 8005bb6:	e008      	b.n	8005bca <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	015a      	lsls	r2, r3, #5
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	015a      	lsls	r2, r3, #5
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	2300      	movs	r3, #0
 8005bda:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	015a      	lsls	r2, r3, #5
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	4413      	add	r3, r2
 8005be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be8:	461a      	mov	r2, r3
 8005bea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005bee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	613b      	str	r3, [r7, #16]
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf8:	693a      	ldr	r2, [r7, #16]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d3b7      	bcc.n	8005b6e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005bfe:	2300      	movs	r3, #0
 8005c00:	613b      	str	r3, [r7, #16]
 8005c02:	e043      	b.n	8005c8c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	015a      	lsls	r2, r3, #5
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c1a:	d118      	bne.n	8005c4e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d10a      	bne.n	8005c38 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	015a      	lsls	r2, r3, #5
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	4413      	add	r3, r2
 8005c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c2e:	461a      	mov	r2, r3
 8005c30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005c34:	6013      	str	r3, [r2, #0]
 8005c36:	e013      	b.n	8005c60 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	015a      	lsls	r2, r3, #5
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	4413      	add	r3, r2
 8005c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c44:	461a      	mov	r2, r3
 8005c46:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005c4a:	6013      	str	r3, [r2, #0]
 8005c4c:	e008      	b.n	8005c60 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	015a      	lsls	r2, r3, #5
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	4413      	add	r3, r2
 8005c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	015a      	lsls	r2, r3, #5
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	4413      	add	r3, r2
 8005c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	2300      	movs	r3, #0
 8005c70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	015a      	lsls	r2, r3, #5
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	4413      	add	r3, r2
 8005c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c7e:	461a      	mov	r2, r3
 8005c80:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c84:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	3301      	adds	r3, #1
 8005c8a:	613b      	str	r3, [r7, #16]
 8005c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d3b7      	bcc.n	8005c04 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ca2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ca6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005cb4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d105      	bne.n	8005cc8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	699b      	ldr	r3, [r3, #24]
 8005cc0:	f043 0210 	orr.w	r2, r3, #16
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	699a      	ldr	r2, [r3, #24]
 8005ccc:	4b0f      	ldr	r3, [pc, #60]	; (8005d0c <USB_DevInit+0x2c4>)
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d005      	beq.n	8005ce6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	699b      	ldr	r3, [r3, #24]
 8005cde:	f043 0208 	orr.w	r2, r3, #8
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005ce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d107      	bne.n	8005cfc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	699b      	ldr	r3, [r3, #24]
 8005cf0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005cf4:	f043 0304 	orr.w	r3, r3, #4
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005cfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3718      	adds	r7, #24
 8005d02:	46bd      	mov	sp, r7
 8005d04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d08:	b004      	add	sp, #16
 8005d0a:	4770      	bx	lr
 8005d0c:	803c3800 	.word	0x803c3800

08005d10 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	3301      	adds	r3, #1
 8005d22:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	4a13      	ldr	r2, [pc, #76]	; (8005d74 <USB_FlushTxFifo+0x64>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d901      	bls.n	8005d30 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e01b      	b.n	8005d68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	daf2      	bge.n	8005d1e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	019b      	lsls	r3, r3, #6
 8005d40:	f043 0220 	orr.w	r2, r3, #32
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	4a08      	ldr	r2, [pc, #32]	; (8005d74 <USB_FlushTxFifo+0x64>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d901      	bls.n	8005d5a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e006      	b.n	8005d68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	f003 0320 	and.w	r3, r3, #32
 8005d62:	2b20      	cmp	r3, #32
 8005d64:	d0f0      	beq.n	8005d48 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005d66:	2300      	movs	r3, #0
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3714      	adds	r7, #20
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr
 8005d74:	00030d40 	.word	0x00030d40

08005d78 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d80:	2300      	movs	r3, #0
 8005d82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	3301      	adds	r3, #1
 8005d88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	4a11      	ldr	r2, [pc, #68]	; (8005dd4 <USB_FlushRxFifo+0x5c>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d901      	bls.n	8005d96 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005d92:	2303      	movs	r3, #3
 8005d94:	e018      	b.n	8005dc8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	daf2      	bge.n	8005d84 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2210      	movs	r2, #16
 8005da6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	3301      	adds	r3, #1
 8005dac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	4a08      	ldr	r2, [pc, #32]	; (8005dd4 <USB_FlushRxFifo+0x5c>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d901      	bls.n	8005dba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	e006      	b.n	8005dc8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	f003 0310 	and.w	r3, r3, #16
 8005dc2:	2b10      	cmp	r3, #16
 8005dc4:	d0f0      	beq.n	8005da8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3714      	adds	r7, #20
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr
 8005dd4:	00030d40 	.word	0x00030d40

08005dd8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	460b      	mov	r3, r1
 8005de2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	78fb      	ldrb	r3, [r7, #3]
 8005df2:	68f9      	ldr	r1, [r7, #12]
 8005df4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3714      	adds	r7, #20
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr

08005e0a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005e0a:	b480      	push	{r7}
 8005e0c:	b087      	sub	sp, #28
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	f003 0306 	and.w	r3, r3, #6
 8005e22:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d102      	bne.n	8005e30 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	75fb      	strb	r3, [r7, #23]
 8005e2e:	e00a      	b.n	8005e46 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d002      	beq.n	8005e3c <USB_GetDevSpeed+0x32>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2b06      	cmp	r3, #6
 8005e3a:	d102      	bne.n	8005e42 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005e3c:	2302      	movs	r3, #2
 8005e3e:	75fb      	strb	r3, [r7, #23]
 8005e40:	e001      	b.n	8005e46 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005e42:	230f      	movs	r3, #15
 8005e44:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005e46:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	371c      	adds	r7, #28
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	785b      	ldrb	r3, [r3, #1]
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d13a      	bne.n	8005ee6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e76:	69da      	ldr	r2, [r3, #28]
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	f003 030f 	and.w	r3, r3, #15
 8005e80:	2101      	movs	r1, #1
 8005e82:	fa01 f303 	lsl.w	r3, r1, r3
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	68f9      	ldr	r1, [r7, #12]
 8005e8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	015a      	lsls	r2, r3, #5
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	4413      	add	r3, r2
 8005e9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d155      	bne.n	8005f54 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	015a      	lsls	r2, r3, #5
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	4413      	add	r3, r2
 8005eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	791b      	ldrb	r3, [r3, #4]
 8005ec2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ec4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	059b      	lsls	r3, r3, #22
 8005eca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	68ba      	ldr	r2, [r7, #8]
 8005ed0:	0151      	lsls	r1, r2, #5
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	440a      	add	r2, r1
 8005ed6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ede:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ee2:	6013      	str	r3, [r2, #0]
 8005ee4:	e036      	b.n	8005f54 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eec:	69da      	ldr	r2, [r3, #28]
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	f003 030f 	and.w	r3, r3, #15
 8005ef6:	2101      	movs	r1, #1
 8005ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8005efc:	041b      	lsls	r3, r3, #16
 8005efe:	68f9      	ldr	r1, [r7, #12]
 8005f00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f04:	4313      	orrs	r3, r2
 8005f06:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	015a      	lsls	r2, r3, #5
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	4413      	add	r3, r2
 8005f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d11a      	bne.n	8005f54 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	015a      	lsls	r2, r3, #5
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	4413      	add	r3, r2
 8005f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	791b      	ldrb	r3, [r3, #4]
 8005f38:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005f3a:	430b      	orrs	r3, r1
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	68ba      	ldr	r2, [r7, #8]
 8005f40:	0151      	lsls	r1, r2, #5
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	440a      	add	r2, r1
 8005f46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f52:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3714      	adds	r7, #20
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
	...

08005f64 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b085      	sub	sp, #20
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	785b      	ldrb	r3, [r3, #1]
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d161      	bne.n	8006044 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	015a      	lsls	r2, r3, #5
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	4413      	add	r3, r2
 8005f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f96:	d11f      	bne.n	8005fd8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	015a      	lsls	r2, r3, #5
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68ba      	ldr	r2, [r7, #8]
 8005fa8:	0151      	lsls	r1, r2, #5
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	440a      	add	r2, r1
 8005fae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fb2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005fb6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	015a      	lsls	r2, r3, #5
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68ba      	ldr	r2, [r7, #8]
 8005fc8:	0151      	lsls	r1, r2, #5
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	440a      	add	r2, r1
 8005fce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fd2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005fd6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	f003 030f 	and.w	r3, r3, #15
 8005fe8:	2101      	movs	r1, #1
 8005fea:	fa01 f303 	lsl.w	r3, r1, r3
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	43db      	mvns	r3, r3
 8005ff2:	68f9      	ldr	r1, [r7, #12]
 8005ff4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006002:	69da      	ldr	r2, [r3, #28]
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	f003 030f 	and.w	r3, r3, #15
 800600c:	2101      	movs	r1, #1
 800600e:	fa01 f303 	lsl.w	r3, r1, r3
 8006012:	b29b      	uxth	r3, r3
 8006014:	43db      	mvns	r3, r3
 8006016:	68f9      	ldr	r1, [r7, #12]
 8006018:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800601c:	4013      	ands	r3, r2
 800601e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	015a      	lsls	r2, r3, #5
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	4413      	add	r3, r2
 8006028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	0159      	lsls	r1, r3, #5
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	440b      	add	r3, r1
 8006036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800603a:	4619      	mov	r1, r3
 800603c:	4b35      	ldr	r3, [pc, #212]	; (8006114 <USB_DeactivateEndpoint+0x1b0>)
 800603e:	4013      	ands	r3, r2
 8006040:	600b      	str	r3, [r1, #0]
 8006042:	e060      	b.n	8006106 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	015a      	lsls	r2, r3, #5
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	4413      	add	r3, r2
 800604c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006056:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800605a:	d11f      	bne.n	800609c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	015a      	lsls	r2, r3, #5
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	4413      	add	r3, r2
 8006064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68ba      	ldr	r2, [r7, #8]
 800606c:	0151      	lsls	r1, r2, #5
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	440a      	add	r2, r1
 8006072:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006076:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800607a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	015a      	lsls	r2, r3, #5
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	4413      	add	r3, r2
 8006084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68ba      	ldr	r2, [r7, #8]
 800608c:	0151      	lsls	r1, r2, #5
 800608e:	68fa      	ldr	r2, [r7, #12]
 8006090:	440a      	add	r2, r1
 8006092:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006096:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800609a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	f003 030f 	and.w	r3, r3, #15
 80060ac:	2101      	movs	r1, #1
 80060ae:	fa01 f303 	lsl.w	r3, r1, r3
 80060b2:	041b      	lsls	r3, r3, #16
 80060b4:	43db      	mvns	r3, r3
 80060b6:	68f9      	ldr	r1, [r7, #12]
 80060b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060bc:	4013      	ands	r3, r2
 80060be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060c6:	69da      	ldr	r2, [r3, #28]
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	f003 030f 	and.w	r3, r3, #15
 80060d0:	2101      	movs	r1, #1
 80060d2:	fa01 f303 	lsl.w	r3, r1, r3
 80060d6:	041b      	lsls	r3, r3, #16
 80060d8:	43db      	mvns	r3, r3
 80060da:	68f9      	ldr	r1, [r7, #12]
 80060dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060e0:	4013      	ands	r3, r2
 80060e2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	015a      	lsls	r2, r3, #5
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	4413      	add	r3, r2
 80060ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	0159      	lsls	r1, r3, #5
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	440b      	add	r3, r1
 80060fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060fe:	4619      	mov	r1, r3
 8006100:	4b05      	ldr	r3, [pc, #20]	; (8006118 <USB_DeactivateEndpoint+0x1b4>)
 8006102:	4013      	ands	r3, r2
 8006104:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	3714      	adds	r7, #20
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr
 8006114:	ec337800 	.word	0xec337800
 8006118:	eff37800 	.word	0xeff37800

0800611c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b08a      	sub	sp, #40	; 0x28
 8006120:	af02      	add	r7, sp, #8
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	4613      	mov	r3, r2
 8006128:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	785b      	ldrb	r3, [r3, #1]
 8006138:	2b01      	cmp	r3, #1
 800613a:	f040 815c 	bne.w	80063f6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	699b      	ldr	r3, [r3, #24]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d132      	bne.n	80061ac <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	015a      	lsls	r2, r3, #5
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	4413      	add	r3, r2
 800614e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006152:	691b      	ldr	r3, [r3, #16]
 8006154:	69ba      	ldr	r2, [r7, #24]
 8006156:	0151      	lsls	r1, r2, #5
 8006158:	69fa      	ldr	r2, [r7, #28]
 800615a:	440a      	add	r2, r1
 800615c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006160:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006164:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006168:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	015a      	lsls	r2, r3, #5
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	4413      	add	r3, r2
 8006172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	69ba      	ldr	r2, [r7, #24]
 800617a:	0151      	lsls	r1, r2, #5
 800617c:	69fa      	ldr	r2, [r7, #28]
 800617e:	440a      	add	r2, r1
 8006180:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006184:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006188:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	015a      	lsls	r2, r3, #5
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	4413      	add	r3, r2
 8006192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006196:	691b      	ldr	r3, [r3, #16]
 8006198:	69ba      	ldr	r2, [r7, #24]
 800619a:	0151      	lsls	r1, r2, #5
 800619c:	69fa      	ldr	r2, [r7, #28]
 800619e:	440a      	add	r2, r1
 80061a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061a4:	0cdb      	lsrs	r3, r3, #19
 80061a6:	04db      	lsls	r3, r3, #19
 80061a8:	6113      	str	r3, [r2, #16]
 80061aa:	e074      	b.n	8006296 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	015a      	lsls	r2, r3, #5
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	4413      	add	r3, r2
 80061b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061b8:	691b      	ldr	r3, [r3, #16]
 80061ba:	69ba      	ldr	r2, [r7, #24]
 80061bc:	0151      	lsls	r1, r2, #5
 80061be:	69fa      	ldr	r2, [r7, #28]
 80061c0:	440a      	add	r2, r1
 80061c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061c6:	0cdb      	lsrs	r3, r3, #19
 80061c8:	04db      	lsls	r3, r3, #19
 80061ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	015a      	lsls	r2, r3, #5
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	4413      	add	r3, r2
 80061d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	69ba      	ldr	r2, [r7, #24]
 80061dc:	0151      	lsls	r1, r2, #5
 80061de:	69fa      	ldr	r2, [r7, #28]
 80061e0:	440a      	add	r2, r1
 80061e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80061ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80061ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	015a      	lsls	r2, r3, #5
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	4413      	add	r3, r2
 80061f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061fc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	6999      	ldr	r1, [r3, #24]
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	440b      	add	r3, r1
 8006208:	1e59      	subs	r1, r3, #1
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006212:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006214:	4b9d      	ldr	r3, [pc, #628]	; (800648c <USB_EPStartXfer+0x370>)
 8006216:	400b      	ands	r3, r1
 8006218:	69b9      	ldr	r1, [r7, #24]
 800621a:	0148      	lsls	r0, r1, #5
 800621c:	69f9      	ldr	r1, [r7, #28]
 800621e:	4401      	add	r1, r0
 8006220:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006224:	4313      	orrs	r3, r2
 8006226:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	015a      	lsls	r2, r3, #5
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	4413      	add	r3, r2
 8006230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006234:	691a      	ldr	r2, [r3, #16]
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	699b      	ldr	r3, [r3, #24]
 800623a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800623e:	69b9      	ldr	r1, [r7, #24]
 8006240:	0148      	lsls	r0, r1, #5
 8006242:	69f9      	ldr	r1, [r7, #28]
 8006244:	4401      	add	r1, r0
 8006246:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800624a:	4313      	orrs	r3, r2
 800624c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	791b      	ldrb	r3, [r3, #4]
 8006252:	2b01      	cmp	r3, #1
 8006254:	d11f      	bne.n	8006296 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006256:	69bb      	ldr	r3, [r7, #24]
 8006258:	015a      	lsls	r2, r3, #5
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	4413      	add	r3, r2
 800625e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	69ba      	ldr	r2, [r7, #24]
 8006266:	0151      	lsls	r1, r2, #5
 8006268:	69fa      	ldr	r2, [r7, #28]
 800626a:	440a      	add	r2, r1
 800626c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006270:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006274:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	015a      	lsls	r2, r3, #5
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	4413      	add	r3, r2
 800627e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	69ba      	ldr	r2, [r7, #24]
 8006286:	0151      	lsls	r1, r2, #5
 8006288:	69fa      	ldr	r2, [r7, #28]
 800628a:	440a      	add	r2, r1
 800628c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006290:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006294:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006296:	79fb      	ldrb	r3, [r7, #7]
 8006298:	2b01      	cmp	r3, #1
 800629a:	d14b      	bne.n	8006334 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	695b      	ldr	r3, [r3, #20]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d009      	beq.n	80062b8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	015a      	lsls	r2, r3, #5
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	4413      	add	r3, r2
 80062ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062b0:	461a      	mov	r2, r3
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	695b      	ldr	r3, [r3, #20]
 80062b6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	791b      	ldrb	r3, [r3, #4]
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d128      	bne.n	8006312 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d110      	bne.n	80062f2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	015a      	lsls	r2, r3, #5
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	4413      	add	r3, r2
 80062d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	69ba      	ldr	r2, [r7, #24]
 80062e0:	0151      	lsls	r1, r2, #5
 80062e2:	69fa      	ldr	r2, [r7, #28]
 80062e4:	440a      	add	r2, r1
 80062e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80062ee:	6013      	str	r3, [r2, #0]
 80062f0:	e00f      	b.n	8006312 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	015a      	lsls	r2, r3, #5
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	4413      	add	r3, r2
 80062fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	69ba      	ldr	r2, [r7, #24]
 8006302:	0151      	lsls	r1, r2, #5
 8006304:	69fa      	ldr	r2, [r7, #28]
 8006306:	440a      	add	r2, r1
 8006308:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800630c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006310:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	015a      	lsls	r2, r3, #5
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	4413      	add	r3, r2
 800631a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	69ba      	ldr	r2, [r7, #24]
 8006322:	0151      	lsls	r1, r2, #5
 8006324:	69fa      	ldr	r2, [r7, #28]
 8006326:	440a      	add	r2, r1
 8006328:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800632c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006330:	6013      	str	r3, [r2, #0]
 8006332:	e133      	b.n	800659c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	015a      	lsls	r2, r3, #5
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	4413      	add	r3, r2
 800633c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	69ba      	ldr	r2, [r7, #24]
 8006344:	0151      	lsls	r1, r2, #5
 8006346:	69fa      	ldr	r2, [r7, #28]
 8006348:	440a      	add	r2, r1
 800634a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800634e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006352:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	791b      	ldrb	r3, [r3, #4]
 8006358:	2b01      	cmp	r3, #1
 800635a:	d015      	beq.n	8006388 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	699b      	ldr	r3, [r3, #24]
 8006360:	2b00      	cmp	r3, #0
 8006362:	f000 811b 	beq.w	800659c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800636c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	f003 030f 	and.w	r3, r3, #15
 8006376:	2101      	movs	r1, #1
 8006378:	fa01 f303 	lsl.w	r3, r1, r3
 800637c:	69f9      	ldr	r1, [r7, #28]
 800637e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006382:	4313      	orrs	r3, r2
 8006384:	634b      	str	r3, [r1, #52]	; 0x34
 8006386:	e109      	b.n	800659c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006394:	2b00      	cmp	r3, #0
 8006396:	d110      	bne.n	80063ba <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	015a      	lsls	r2, r3, #5
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	4413      	add	r3, r2
 80063a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	69ba      	ldr	r2, [r7, #24]
 80063a8:	0151      	lsls	r1, r2, #5
 80063aa:	69fa      	ldr	r2, [r7, #28]
 80063ac:	440a      	add	r2, r1
 80063ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80063b6:	6013      	str	r3, [r2, #0]
 80063b8:	e00f      	b.n	80063da <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	015a      	lsls	r2, r3, #5
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	4413      	add	r3, r2
 80063c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	69ba      	ldr	r2, [r7, #24]
 80063ca:	0151      	lsls	r1, r2, #5
 80063cc:	69fa      	ldr	r2, [r7, #28]
 80063ce:	440a      	add	r2, r1
 80063d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063d8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	6919      	ldr	r1, [r3, #16]
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	781a      	ldrb	r2, [r3, #0]
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	699b      	ldr	r3, [r3, #24]
 80063e6:	b298      	uxth	r0, r3
 80063e8:	79fb      	ldrb	r3, [r7, #7]
 80063ea:	9300      	str	r3, [sp, #0]
 80063ec:	4603      	mov	r3, r0
 80063ee:	68f8      	ldr	r0, [r7, #12]
 80063f0:	f000 fade 	bl	80069b0 <USB_WritePacket>
 80063f4:	e0d2      	b.n	800659c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	015a      	lsls	r2, r3, #5
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	4413      	add	r3, r2
 80063fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006402:	691b      	ldr	r3, [r3, #16]
 8006404:	69ba      	ldr	r2, [r7, #24]
 8006406:	0151      	lsls	r1, r2, #5
 8006408:	69fa      	ldr	r2, [r7, #28]
 800640a:	440a      	add	r2, r1
 800640c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006410:	0cdb      	lsrs	r3, r3, #19
 8006412:	04db      	lsls	r3, r3, #19
 8006414:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	015a      	lsls	r2, r3, #5
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	4413      	add	r3, r2
 800641e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006422:	691b      	ldr	r3, [r3, #16]
 8006424:	69ba      	ldr	r2, [r7, #24]
 8006426:	0151      	lsls	r1, r2, #5
 8006428:	69fa      	ldr	r2, [r7, #28]
 800642a:	440a      	add	r2, r1
 800642c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006430:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006434:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006438:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	699b      	ldr	r3, [r3, #24]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d126      	bne.n	8006490 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	015a      	lsls	r2, r3, #5
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	4413      	add	r3, r2
 800644a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800644e:	691a      	ldr	r2, [r3, #16]
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006458:	69b9      	ldr	r1, [r7, #24]
 800645a:	0148      	lsls	r0, r1, #5
 800645c:	69f9      	ldr	r1, [r7, #28]
 800645e:	4401      	add	r1, r0
 8006460:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006464:	4313      	orrs	r3, r2
 8006466:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	015a      	lsls	r2, r3, #5
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	4413      	add	r3, r2
 8006470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	69ba      	ldr	r2, [r7, #24]
 8006478:	0151      	lsls	r1, r2, #5
 800647a:	69fa      	ldr	r2, [r7, #28]
 800647c:	440a      	add	r2, r1
 800647e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006482:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006486:	6113      	str	r3, [r2, #16]
 8006488:	e03a      	b.n	8006500 <USB_EPStartXfer+0x3e4>
 800648a:	bf00      	nop
 800648c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	699a      	ldr	r2, [r3, #24]
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	4413      	add	r3, r2
 800649a:	1e5a      	subs	r2, r3, #1
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80064a4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	8afa      	ldrh	r2, [r7, #22]
 80064ac:	fb03 f202 	mul.w	r2, r3, r2
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	015a      	lsls	r2, r3, #5
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	4413      	add	r3, r2
 80064bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c0:	691a      	ldr	r2, [r3, #16]
 80064c2:	8afb      	ldrh	r3, [r7, #22]
 80064c4:	04d9      	lsls	r1, r3, #19
 80064c6:	4b38      	ldr	r3, [pc, #224]	; (80065a8 <USB_EPStartXfer+0x48c>)
 80064c8:	400b      	ands	r3, r1
 80064ca:	69b9      	ldr	r1, [r7, #24]
 80064cc:	0148      	lsls	r0, r1, #5
 80064ce:	69f9      	ldr	r1, [r7, #28]
 80064d0:	4401      	add	r1, r0
 80064d2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80064d6:	4313      	orrs	r3, r2
 80064d8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	015a      	lsls	r2, r3, #5
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	4413      	add	r3, r2
 80064e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064e6:	691a      	ldr	r2, [r3, #16]
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	69db      	ldr	r3, [r3, #28]
 80064ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064f0:	69b9      	ldr	r1, [r7, #24]
 80064f2:	0148      	lsls	r0, r1, #5
 80064f4:	69f9      	ldr	r1, [r7, #28]
 80064f6:	4401      	add	r1, r0
 80064f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80064fc:	4313      	orrs	r3, r2
 80064fe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006500:	79fb      	ldrb	r3, [r7, #7]
 8006502:	2b01      	cmp	r3, #1
 8006504:	d10d      	bne.n	8006522 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d009      	beq.n	8006522 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	6919      	ldr	r1, [r3, #16]
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	015a      	lsls	r2, r3, #5
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	4413      	add	r3, r2
 800651a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800651e:	460a      	mov	r2, r1
 8006520:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	791b      	ldrb	r3, [r3, #4]
 8006526:	2b01      	cmp	r3, #1
 8006528:	d128      	bne.n	800657c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006536:	2b00      	cmp	r3, #0
 8006538:	d110      	bne.n	800655c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	015a      	lsls	r2, r3, #5
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	4413      	add	r3, r2
 8006542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	69ba      	ldr	r2, [r7, #24]
 800654a:	0151      	lsls	r1, r2, #5
 800654c:	69fa      	ldr	r2, [r7, #28]
 800654e:	440a      	add	r2, r1
 8006550:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006554:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006558:	6013      	str	r3, [r2, #0]
 800655a:	e00f      	b.n	800657c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	015a      	lsls	r2, r3, #5
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	4413      	add	r3, r2
 8006564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	69ba      	ldr	r2, [r7, #24]
 800656c:	0151      	lsls	r1, r2, #5
 800656e:	69fa      	ldr	r2, [r7, #28]
 8006570:	440a      	add	r2, r1
 8006572:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800657a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	015a      	lsls	r2, r3, #5
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	4413      	add	r3, r2
 8006584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	69ba      	ldr	r2, [r7, #24]
 800658c:	0151      	lsls	r1, r2, #5
 800658e:	69fa      	ldr	r2, [r7, #28]
 8006590:	440a      	add	r2, r1
 8006592:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006596:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800659a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3720      	adds	r7, #32
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	1ff80000 	.word	0x1ff80000

080065ac <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b087      	sub	sp, #28
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	4613      	mov	r3, r2
 80065b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	785b      	ldrb	r3, [r3, #1]
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	f040 80ce 	bne.w	800676a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d132      	bne.n	800663c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	015a      	lsls	r2, r3, #5
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	4413      	add	r3, r2
 80065de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	693a      	ldr	r2, [r7, #16]
 80065e6:	0151      	lsls	r1, r2, #5
 80065e8:	697a      	ldr	r2, [r7, #20]
 80065ea:	440a      	add	r2, r1
 80065ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80065f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80065f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	015a      	lsls	r2, r3, #5
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	4413      	add	r3, r2
 8006602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	0151      	lsls	r1, r2, #5
 800660c:	697a      	ldr	r2, [r7, #20]
 800660e:	440a      	add	r2, r1
 8006610:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006614:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006618:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	015a      	lsls	r2, r3, #5
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	4413      	add	r3, r2
 8006622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006626:	691b      	ldr	r3, [r3, #16]
 8006628:	693a      	ldr	r2, [r7, #16]
 800662a:	0151      	lsls	r1, r2, #5
 800662c:	697a      	ldr	r2, [r7, #20]
 800662e:	440a      	add	r2, r1
 8006630:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006634:	0cdb      	lsrs	r3, r3, #19
 8006636:	04db      	lsls	r3, r3, #19
 8006638:	6113      	str	r3, [r2, #16]
 800663a:	e04e      	b.n	80066da <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	015a      	lsls	r2, r3, #5
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	4413      	add	r3, r2
 8006644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	693a      	ldr	r2, [r7, #16]
 800664c:	0151      	lsls	r1, r2, #5
 800664e:	697a      	ldr	r2, [r7, #20]
 8006650:	440a      	add	r2, r1
 8006652:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006656:	0cdb      	lsrs	r3, r3, #19
 8006658:	04db      	lsls	r3, r3, #19
 800665a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	015a      	lsls	r2, r3, #5
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	4413      	add	r3, r2
 8006664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	693a      	ldr	r2, [r7, #16]
 800666c:	0151      	lsls	r1, r2, #5
 800666e:	697a      	ldr	r2, [r7, #20]
 8006670:	440a      	add	r2, r1
 8006672:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006676:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800667a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800667e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	699a      	ldr	r2, [r3, #24]
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	429a      	cmp	r2, r3
 800668a:	d903      	bls.n	8006694 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	68da      	ldr	r2, [r3, #12]
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	015a      	lsls	r2, r3, #5
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	4413      	add	r3, r2
 800669c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	693a      	ldr	r2, [r7, #16]
 80066a4:	0151      	lsls	r1, r2, #5
 80066a6:	697a      	ldr	r2, [r7, #20]
 80066a8:	440a      	add	r2, r1
 80066aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80066b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	015a      	lsls	r2, r3, #5
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	4413      	add	r3, r2
 80066bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066c0:	691a      	ldr	r2, [r3, #16]
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066ca:	6939      	ldr	r1, [r7, #16]
 80066cc:	0148      	lsls	r0, r1, #5
 80066ce:	6979      	ldr	r1, [r7, #20]
 80066d0:	4401      	add	r1, r0
 80066d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80066d6:	4313      	orrs	r3, r2
 80066d8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80066da:	79fb      	ldrb	r3, [r7, #7]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d11e      	bne.n	800671e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	695b      	ldr	r3, [r3, #20]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d009      	beq.n	80066fc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	015a      	lsls	r2, r3, #5
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	4413      	add	r3, r2
 80066f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f4:	461a      	mov	r2, r3
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	695b      	ldr	r3, [r3, #20]
 80066fa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	015a      	lsls	r2, r3, #5
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	4413      	add	r3, r2
 8006704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	693a      	ldr	r2, [r7, #16]
 800670c:	0151      	lsls	r1, r2, #5
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	440a      	add	r2, r1
 8006712:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006716:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800671a:	6013      	str	r3, [r2, #0]
 800671c:	e097      	b.n	800684e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	015a      	lsls	r2, r3, #5
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	4413      	add	r3, r2
 8006726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	693a      	ldr	r2, [r7, #16]
 800672e:	0151      	lsls	r1, r2, #5
 8006730:	697a      	ldr	r2, [r7, #20]
 8006732:	440a      	add	r2, r1
 8006734:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006738:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800673c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	2b00      	cmp	r3, #0
 8006744:	f000 8083 	beq.w	800684e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800674e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	f003 030f 	and.w	r3, r3, #15
 8006758:	2101      	movs	r1, #1
 800675a:	fa01 f303 	lsl.w	r3, r1, r3
 800675e:	6979      	ldr	r1, [r7, #20]
 8006760:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006764:	4313      	orrs	r3, r2
 8006766:	634b      	str	r3, [r1, #52]	; 0x34
 8006768:	e071      	b.n	800684e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	015a      	lsls	r2, r3, #5
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	4413      	add	r3, r2
 8006772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	693a      	ldr	r2, [r7, #16]
 800677a:	0151      	lsls	r1, r2, #5
 800677c:	697a      	ldr	r2, [r7, #20]
 800677e:	440a      	add	r2, r1
 8006780:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006784:	0cdb      	lsrs	r3, r3, #19
 8006786:	04db      	lsls	r3, r3, #19
 8006788:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	015a      	lsls	r2, r3, #5
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	4413      	add	r3, r2
 8006792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006796:	691b      	ldr	r3, [r3, #16]
 8006798:	693a      	ldr	r2, [r7, #16]
 800679a:	0151      	lsls	r1, r2, #5
 800679c:	697a      	ldr	r2, [r7, #20]
 800679e:	440a      	add	r2, r1
 80067a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80067a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80067ac:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	699b      	ldr	r3, [r3, #24]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d003      	beq.n	80067be <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	68da      	ldr	r2, [r3, #12]
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	68da      	ldr	r2, [r3, #12]
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	015a      	lsls	r2, r3, #5
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	4413      	add	r3, r2
 80067ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067d2:	691b      	ldr	r3, [r3, #16]
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	0151      	lsls	r1, r2, #5
 80067d8:	697a      	ldr	r2, [r7, #20]
 80067da:	440a      	add	r2, r1
 80067dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80067e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	015a      	lsls	r2, r3, #5
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	4413      	add	r3, r2
 80067ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067f2:	691a      	ldr	r2, [r3, #16]
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	69db      	ldr	r3, [r3, #28]
 80067f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067fc:	6939      	ldr	r1, [r7, #16]
 80067fe:	0148      	lsls	r0, r1, #5
 8006800:	6979      	ldr	r1, [r7, #20]
 8006802:	4401      	add	r1, r0
 8006804:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006808:	4313      	orrs	r3, r2
 800680a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800680c:	79fb      	ldrb	r3, [r7, #7]
 800680e:	2b01      	cmp	r3, #1
 8006810:	d10d      	bne.n	800682e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d009      	beq.n	800682e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	6919      	ldr	r1, [r3, #16]
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	015a      	lsls	r2, r3, #5
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	4413      	add	r3, r2
 8006826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800682a:	460a      	mov	r2, r1
 800682c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	015a      	lsls	r2, r3, #5
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	4413      	add	r3, r2
 8006836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	693a      	ldr	r2, [r7, #16]
 800683e:	0151      	lsls	r1, r2, #5
 8006840:	697a      	ldr	r2, [r7, #20]
 8006842:	440a      	add	r2, r1
 8006844:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006848:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800684c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800684e:	2300      	movs	r3, #0
}
 8006850:	4618      	mov	r0, r3
 8006852:	371c      	adds	r7, #28
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800685c:	b480      	push	{r7}
 800685e:	b087      	sub	sp, #28
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006866:	2300      	movs	r3, #0
 8006868:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800686a:	2300      	movs	r3, #0
 800686c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	785b      	ldrb	r3, [r3, #1]
 8006876:	2b01      	cmp	r3, #1
 8006878:	d14a      	bne.n	8006910 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	015a      	lsls	r2, r3, #5
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	4413      	add	r3, r2
 8006884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800688e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006892:	f040 8086 	bne.w	80069a2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	015a      	lsls	r2, r3, #5
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	4413      	add	r3, r2
 80068a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	683a      	ldr	r2, [r7, #0]
 80068a8:	7812      	ldrb	r2, [r2, #0]
 80068aa:	0151      	lsls	r1, r2, #5
 80068ac:	693a      	ldr	r2, [r7, #16]
 80068ae:	440a      	add	r2, r1
 80068b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80068b8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	015a      	lsls	r2, r3, #5
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	4413      	add	r3, r2
 80068c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	683a      	ldr	r2, [r7, #0]
 80068cc:	7812      	ldrb	r2, [r2, #0]
 80068ce:	0151      	lsls	r1, r2, #5
 80068d0:	693a      	ldr	r2, [r7, #16]
 80068d2:	440a      	add	r2, r1
 80068d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068dc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	3301      	adds	r3, #1
 80068e2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f242 7210 	movw	r2, #10000	; 0x2710
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d902      	bls.n	80068f4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	75fb      	strb	r3, [r7, #23]
          break;
 80068f2:	e056      	b.n	80069a2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	015a      	lsls	r2, r3, #5
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	4413      	add	r3, r2
 80068fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006908:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800690c:	d0e7      	beq.n	80068de <USB_EPStopXfer+0x82>
 800690e:	e048      	b.n	80069a2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	015a      	lsls	r2, r3, #5
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	4413      	add	r3, r2
 800691a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006924:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006928:	d13b      	bne.n	80069a2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	015a      	lsls	r2, r3, #5
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	4413      	add	r3, r2
 8006934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	683a      	ldr	r2, [r7, #0]
 800693c:	7812      	ldrb	r2, [r2, #0]
 800693e:	0151      	lsls	r1, r2, #5
 8006940:	693a      	ldr	r2, [r7, #16]
 8006942:	440a      	add	r2, r1
 8006944:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006948:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800694c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	015a      	lsls	r2, r3, #5
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	4413      	add	r3, r2
 8006958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	683a      	ldr	r2, [r7, #0]
 8006960:	7812      	ldrb	r2, [r2, #0]
 8006962:	0151      	lsls	r1, r2, #5
 8006964:	693a      	ldr	r2, [r7, #16]
 8006966:	440a      	add	r2, r1
 8006968:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800696c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006970:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	3301      	adds	r3, #1
 8006976:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f242 7210 	movw	r2, #10000	; 0x2710
 800697e:	4293      	cmp	r3, r2
 8006980:	d902      	bls.n	8006988 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	75fb      	strb	r3, [r7, #23]
          break;
 8006986:	e00c      	b.n	80069a2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	015a      	lsls	r2, r3, #5
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	4413      	add	r3, r2
 8006992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800699c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069a0:	d0e7      	beq.n	8006972 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80069a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	371c      	adds	r7, #28
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b089      	sub	sp, #36	; 0x24
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	4611      	mov	r1, r2
 80069bc:	461a      	mov	r2, r3
 80069be:	460b      	mov	r3, r1
 80069c0:	71fb      	strb	r3, [r7, #7]
 80069c2:	4613      	mov	r3, r2
 80069c4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80069ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d123      	bne.n	8006a1e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80069d6:	88bb      	ldrh	r3, [r7, #4]
 80069d8:	3303      	adds	r3, #3
 80069da:	089b      	lsrs	r3, r3, #2
 80069dc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80069de:	2300      	movs	r3, #0
 80069e0:	61bb      	str	r3, [r7, #24]
 80069e2:	e018      	b.n	8006a16 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80069e4:	79fb      	ldrb	r3, [r7, #7]
 80069e6:	031a      	lsls	r2, r3, #12
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	4413      	add	r3, r2
 80069ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069f0:	461a      	mov	r2, r3
 80069f2:	69fb      	ldr	r3, [r7, #28]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80069f8:	69fb      	ldr	r3, [r7, #28]
 80069fa:	3301      	adds	r3, #1
 80069fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	3301      	adds	r3, #1
 8006a02:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006a04:	69fb      	ldr	r3, [r7, #28]
 8006a06:	3301      	adds	r3, #1
 8006a08:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	3301      	adds	r3, #1
 8006a14:	61bb      	str	r3, [r7, #24]
 8006a16:	69ba      	ldr	r2, [r7, #24]
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d3e2      	bcc.n	80069e4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006a1e:	2300      	movs	r3, #0
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3724      	adds	r7, #36	; 0x24
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b08b      	sub	sp, #44	; 0x2c
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	4613      	mov	r3, r2
 8006a38:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006a42:	88fb      	ldrh	r3, [r7, #6]
 8006a44:	089b      	lsrs	r3, r3, #2
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006a4a:	88fb      	ldrh	r3, [r7, #6]
 8006a4c:	f003 0303 	and.w	r3, r3, #3
 8006a50:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006a52:	2300      	movs	r3, #0
 8006a54:	623b      	str	r3, [r7, #32]
 8006a56:	e014      	b.n	8006a82 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006a58:	69bb      	ldr	r3, [r7, #24]
 8006a5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a62:	601a      	str	r2, [r3, #0]
    pDest++;
 8006a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a66:	3301      	adds	r3, #1
 8006a68:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a72:	3301      	adds	r3, #1
 8006a74:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a78:	3301      	adds	r3, #1
 8006a7a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006a7c:	6a3b      	ldr	r3, [r7, #32]
 8006a7e:	3301      	adds	r3, #1
 8006a80:	623b      	str	r3, [r7, #32]
 8006a82:	6a3a      	ldr	r2, [r7, #32]
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d3e6      	bcc.n	8006a58 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006a8a:	8bfb      	ldrh	r3, [r7, #30]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d01e      	beq.n	8006ace <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006a90:	2300      	movs	r3, #0
 8006a92:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	f107 0310 	add.w	r3, r7, #16
 8006aa0:	6812      	ldr	r2, [r2, #0]
 8006aa2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006aa4:	693a      	ldr	r2, [r7, #16]
 8006aa6:	6a3b      	ldr	r3, [r7, #32]
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	00db      	lsls	r3, r3, #3
 8006aac:	fa22 f303 	lsr.w	r3, r2, r3
 8006ab0:	b2da      	uxtb	r2, r3
 8006ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab4:	701a      	strb	r2, [r3, #0]
      i++;
 8006ab6:	6a3b      	ldr	r3, [r7, #32]
 8006ab8:	3301      	adds	r3, #1
 8006aba:	623b      	str	r3, [r7, #32]
      pDest++;
 8006abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006abe:	3301      	adds	r3, #1
 8006ac0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006ac2:	8bfb      	ldrh	r3, [r7, #30]
 8006ac4:	3b01      	subs	r3, #1
 8006ac6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006ac8:	8bfb      	ldrh	r3, [r7, #30]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d1ea      	bne.n	8006aa4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	372c      	adds	r7, #44	; 0x2c
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr

08006adc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b085      	sub	sp, #20
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	785b      	ldrb	r3, [r3, #1]
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d12c      	bne.n	8006b52 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	015a      	lsls	r2, r3, #5
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	4413      	add	r3, r2
 8006b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	db12      	blt.n	8006b30 <USB_EPSetStall+0x54>
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d00f      	beq.n	8006b30 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	015a      	lsls	r2, r3, #5
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	4413      	add	r3, r2
 8006b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	68ba      	ldr	r2, [r7, #8]
 8006b20:	0151      	lsls	r1, r2, #5
 8006b22:	68fa      	ldr	r2, [r7, #12]
 8006b24:	440a      	add	r2, r1
 8006b26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b2a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006b2e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	015a      	lsls	r2, r3, #5
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	4413      	add	r3, r2
 8006b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68ba      	ldr	r2, [r7, #8]
 8006b40:	0151      	lsls	r1, r2, #5
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	440a      	add	r2, r1
 8006b46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006b4e:	6013      	str	r3, [r2, #0]
 8006b50:	e02b      	b.n	8006baa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	015a      	lsls	r2, r3, #5
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	4413      	add	r3, r2
 8006b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	db12      	blt.n	8006b8a <USB_EPSetStall+0xae>
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d00f      	beq.n	8006b8a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	015a      	lsls	r2, r3, #5
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	4413      	add	r3, r2
 8006b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	68ba      	ldr	r2, [r7, #8]
 8006b7a:	0151      	lsls	r1, r2, #5
 8006b7c:	68fa      	ldr	r2, [r7, #12]
 8006b7e:	440a      	add	r2, r1
 8006b80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b84:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006b88:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	015a      	lsls	r2, r3, #5
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	4413      	add	r3, r2
 8006b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	68ba      	ldr	r2, [r7, #8]
 8006b9a:	0151      	lsls	r1, r2, #5
 8006b9c:	68fa      	ldr	r2, [r7, #12]
 8006b9e:	440a      	add	r2, r1
 8006ba0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ba4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006ba8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3714      	adds	r7, #20
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b085      	sub	sp, #20
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	785b      	ldrb	r3, [r3, #1]
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d128      	bne.n	8006c26 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	015a      	lsls	r2, r3, #5
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	4413      	add	r3, r2
 8006bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	68ba      	ldr	r2, [r7, #8]
 8006be4:	0151      	lsls	r1, r2, #5
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	440a      	add	r2, r1
 8006bea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006bf2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	791b      	ldrb	r3, [r3, #4]
 8006bf8:	2b03      	cmp	r3, #3
 8006bfa:	d003      	beq.n	8006c04 <USB_EPClearStall+0x4c>
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	791b      	ldrb	r3, [r3, #4]
 8006c00:	2b02      	cmp	r3, #2
 8006c02:	d138      	bne.n	8006c76 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	015a      	lsls	r2, r3, #5
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	68ba      	ldr	r2, [r7, #8]
 8006c14:	0151      	lsls	r1, r2, #5
 8006c16:	68fa      	ldr	r2, [r7, #12]
 8006c18:	440a      	add	r2, r1
 8006c1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c22:	6013      	str	r3, [r2, #0]
 8006c24:	e027      	b.n	8006c76 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	015a      	lsls	r2, r3, #5
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	4413      	add	r3, r2
 8006c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	68ba      	ldr	r2, [r7, #8]
 8006c36:	0151      	lsls	r1, r2, #5
 8006c38:	68fa      	ldr	r2, [r7, #12]
 8006c3a:	440a      	add	r2, r1
 8006c3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c40:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006c44:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	791b      	ldrb	r3, [r3, #4]
 8006c4a:	2b03      	cmp	r3, #3
 8006c4c:	d003      	beq.n	8006c56 <USB_EPClearStall+0x9e>
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	791b      	ldrb	r3, [r3, #4]
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d10f      	bne.n	8006c76 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	015a      	lsls	r2, r3, #5
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	68ba      	ldr	r2, [r7, #8]
 8006c66:	0151      	lsls	r1, r2, #5
 8006c68:	68fa      	ldr	r2, [r7, #12]
 8006c6a:	440a      	add	r2, r1
 8006c6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c74:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006c76:	2300      	movs	r3, #0
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3714      	adds	r7, #20
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b085      	sub	sp, #20
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	460b      	mov	r3, r1
 8006c8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ca2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006ca6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	78fb      	ldrb	r3, [r7, #3]
 8006cb2:	011b      	lsls	r3, r3, #4
 8006cb4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006cb8:	68f9      	ldr	r1, [r7, #12]
 8006cba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006cc2:	2300      	movs	r3, #0
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3714      	adds	r7, #20
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b085      	sub	sp, #20
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	68fa      	ldr	r2, [r7, #12]
 8006ce6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006cea:	f023 0303 	bic.w	r3, r3, #3
 8006cee:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cfe:	f023 0302 	bic.w	r3, r3, #2
 8006d02:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d04:	2300      	movs	r3, #0
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3714      	adds	r7, #20
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr

08006d12 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006d12:	b480      	push	{r7}
 8006d14:	b085      	sub	sp, #20
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006d2c:	f023 0303 	bic.w	r3, r3, #3
 8006d30:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	68fa      	ldr	r2, [r7, #12]
 8006d3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d40:	f043 0302 	orr.w	r3, r3, #2
 8006d44:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d46:	2300      	movs	r3, #0
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3714      	adds	r7, #20
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b085      	sub	sp, #20
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	695b      	ldr	r3, [r3, #20]
 8006d60:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	699b      	ldr	r3, [r3, #24]
 8006d66:	68fa      	ldr	r2, [r7, #12]
 8006d68:	4013      	ands	r3, r2
 8006d6a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3714      	adds	r7, #20
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr

08006d7a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d7a:	b480      	push	{r7}
 8006d7c:	b085      	sub	sp, #20
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d8c:	699b      	ldr	r3, [r3, #24]
 8006d8e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d96:	69db      	ldr	r3, [r3, #28]
 8006d98:	68ba      	ldr	r2, [r7, #8]
 8006d9a:	4013      	ands	r3, r2
 8006d9c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	0c1b      	lsrs	r3, r3, #16
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3714      	adds	r7, #20
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr

08006dae <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006dae:	b480      	push	{r7}
 8006db0:	b085      	sub	sp, #20
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dc0:	699b      	ldr	r3, [r3, #24]
 8006dc2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dca:	69db      	ldr	r3, [r3, #28]
 8006dcc:	68ba      	ldr	r2, [r7, #8]
 8006dce:	4013      	ands	r3, r2
 8006dd0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	b29b      	uxth	r3, r3
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3714      	adds	r7, #20
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr

08006de2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006de2:	b480      	push	{r7}
 8006de4:	b085      	sub	sp, #20
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
 8006dea:	460b      	mov	r3, r1
 8006dec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006df2:	78fb      	ldrb	r3, [r7, #3]
 8006df4:	015a      	lsls	r2, r3, #5
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	4413      	add	r3, r2
 8006dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e08:	695b      	ldr	r3, [r3, #20]
 8006e0a:	68ba      	ldr	r2, [r7, #8]
 8006e0c:	4013      	ands	r3, r2
 8006e0e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006e10:	68bb      	ldr	r3, [r7, #8]
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3714      	adds	r7, #20
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr

08006e1e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006e1e:	b480      	push	{r7}
 8006e20:	b087      	sub	sp, #28
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
 8006e26:	460b      	mov	r3, r1
 8006e28:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e40:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006e42:	78fb      	ldrb	r3, [r7, #3]
 8006e44:	f003 030f 	and.w	r3, r3, #15
 8006e48:	68fa      	ldr	r2, [r7, #12]
 8006e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8006e4e:	01db      	lsls	r3, r3, #7
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	693a      	ldr	r2, [r7, #16]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006e58:	78fb      	ldrb	r3, [r7, #3]
 8006e5a:	015a      	lsls	r2, r3, #5
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	4413      	add	r3, r2
 8006e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	693a      	ldr	r2, [r7, #16]
 8006e68:	4013      	ands	r3, r2
 8006e6a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006e6c:	68bb      	ldr	r3, [r7, #8]
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	371c      	adds	r7, #28
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr

08006e7a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006e7a:	b480      	push	{r7}
 8006e7c:	b083      	sub	sp, #12
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	695b      	ldr	r3, [r3, #20]
 8006e86:	f003 0301 	and.w	r3, r3, #1
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	370c      	adds	r7, #12
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr

08006e96 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006e96:	b480      	push	{r7}
 8006e98:	b085      	sub	sp, #20
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	68fa      	ldr	r2, [r7, #12]
 8006eac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006eb0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006eb4:	f023 0307 	bic.w	r3, r3, #7
 8006eb8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ecc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006ece:	2300      	movs	r3, #0
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3714      	adds	r7, #20
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b087      	sub	sp, #28
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	460b      	mov	r3, r1
 8006ee6:	607a      	str	r2, [r7, #4]
 8006ee8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	333c      	adds	r3, #60	; 0x3c
 8006ef2:	3304      	adds	r3, #4
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	4a26      	ldr	r2, [pc, #152]	; (8006f94 <USB_EP0_OutStart+0xb8>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d90a      	bls.n	8006f16 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f10:	d101      	bne.n	8006f16 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006f12:	2300      	movs	r3, #0
 8006f14:	e037      	b.n	8006f86 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	2300      	movs	r3, #0
 8006f20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	697a      	ldr	r2, [r7, #20]
 8006f2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f3c:	691b      	ldr	r3, [r3, #16]
 8006f3e:	697a      	ldr	r2, [r7, #20]
 8006f40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f44:	f043 0318 	orr.w	r3, r3, #24
 8006f48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	697a      	ldr	r2, [r7, #20]
 8006f54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f58:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006f5c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006f5e:	7afb      	ldrb	r3, [r7, #11]
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d10f      	bne.n	8006f84 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	697a      	ldr	r2, [r7, #20]
 8006f7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f7e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006f82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f84:	2300      	movs	r3, #0
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	371c      	adds	r7, #28
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop
 8006f94:	4f54300a 	.word	0x4f54300a

08006f98 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b085      	sub	sp, #20
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	4a13      	ldr	r2, [pc, #76]	; (8006ffc <USB_CoreReset+0x64>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d901      	bls.n	8006fb6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006fb2:	2303      	movs	r3, #3
 8006fb4:	e01b      	b.n	8006fee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	691b      	ldr	r3, [r3, #16]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	daf2      	bge.n	8006fa4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	f043 0201 	orr.w	r2, r3, #1
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	4a09      	ldr	r2, [pc, #36]	; (8006ffc <USB_CoreReset+0x64>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d901      	bls.n	8006fe0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	e006      	b.n	8006fee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	691b      	ldr	r3, [r3, #16]
 8006fe4:	f003 0301 	and.w	r3, r3, #1
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d0f0      	beq.n	8006fce <USB_CoreReset+0x36>

  return HAL_OK;
 8006fec:	2300      	movs	r3, #0
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3714      	adds	r7, #20
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr
 8006ffa:	bf00      	nop
 8006ffc:	00030d40 	.word	0x00030d40

08007000 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	460b      	mov	r3, r1
 800700a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800700c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007010:	f002 fc94 	bl	800993c <USBD_static_malloc>
 8007014:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d109      	bne.n	8007030 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	32b0      	adds	r2, #176	; 0xb0
 8007026:	2100      	movs	r1, #0
 8007028:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800702c:	2302      	movs	r3, #2
 800702e:	e0d4      	b.n	80071da <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007030:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007034:	2100      	movs	r1, #0
 8007036:	68f8      	ldr	r0, [r7, #12]
 8007038:	f002 fd02 	bl	8009a40 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	32b0      	adds	r2, #176	; 0xb0
 8007046:	68f9      	ldr	r1, [r7, #12]
 8007048:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	32b0      	adds	r2, #176	; 0xb0
 8007056:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	7c1b      	ldrb	r3, [r3, #16]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d138      	bne.n	80070da <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007068:	4b5e      	ldr	r3, [pc, #376]	; (80071e4 <USBD_CDC_Init+0x1e4>)
 800706a:	7819      	ldrb	r1, [r3, #0]
 800706c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007070:	2202      	movs	r2, #2
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f002 fb3f 	bl	80096f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007078:	4b5a      	ldr	r3, [pc, #360]	; (80071e4 <USBD_CDC_Init+0x1e4>)
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	f003 020f 	and.w	r2, r3, #15
 8007080:	6879      	ldr	r1, [r7, #4]
 8007082:	4613      	mov	r3, r2
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	4413      	add	r3, r2
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	440b      	add	r3, r1
 800708c:	3324      	adds	r3, #36	; 0x24
 800708e:	2201      	movs	r2, #1
 8007090:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007092:	4b55      	ldr	r3, [pc, #340]	; (80071e8 <USBD_CDC_Init+0x1e8>)
 8007094:	7819      	ldrb	r1, [r3, #0]
 8007096:	f44f 7300 	mov.w	r3, #512	; 0x200
 800709a:	2202      	movs	r2, #2
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f002 fb2a 	bl	80096f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80070a2:	4b51      	ldr	r3, [pc, #324]	; (80071e8 <USBD_CDC_Init+0x1e8>)
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	f003 020f 	and.w	r2, r3, #15
 80070aa:	6879      	ldr	r1, [r7, #4]
 80070ac:	4613      	mov	r3, r2
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	4413      	add	r3, r2
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	440b      	add	r3, r1
 80070b6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80070ba:	2201      	movs	r2, #1
 80070bc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80070be:	4b4b      	ldr	r3, [pc, #300]	; (80071ec <USBD_CDC_Init+0x1ec>)
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	f003 020f 	and.w	r2, r3, #15
 80070c6:	6879      	ldr	r1, [r7, #4]
 80070c8:	4613      	mov	r3, r2
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	4413      	add	r3, r2
 80070ce:	009b      	lsls	r3, r3, #2
 80070d0:	440b      	add	r3, r1
 80070d2:	3326      	adds	r3, #38	; 0x26
 80070d4:	2210      	movs	r2, #16
 80070d6:	801a      	strh	r2, [r3, #0]
 80070d8:	e035      	b.n	8007146 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80070da:	4b42      	ldr	r3, [pc, #264]	; (80071e4 <USBD_CDC_Init+0x1e4>)
 80070dc:	7819      	ldrb	r1, [r3, #0]
 80070de:	2340      	movs	r3, #64	; 0x40
 80070e0:	2202      	movs	r2, #2
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f002 fb07 	bl	80096f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80070e8:	4b3e      	ldr	r3, [pc, #248]	; (80071e4 <USBD_CDC_Init+0x1e4>)
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	f003 020f 	and.w	r2, r3, #15
 80070f0:	6879      	ldr	r1, [r7, #4]
 80070f2:	4613      	mov	r3, r2
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	4413      	add	r3, r2
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	440b      	add	r3, r1
 80070fc:	3324      	adds	r3, #36	; 0x24
 80070fe:	2201      	movs	r2, #1
 8007100:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007102:	4b39      	ldr	r3, [pc, #228]	; (80071e8 <USBD_CDC_Init+0x1e8>)
 8007104:	7819      	ldrb	r1, [r3, #0]
 8007106:	2340      	movs	r3, #64	; 0x40
 8007108:	2202      	movs	r2, #2
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f002 faf3 	bl	80096f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007110:	4b35      	ldr	r3, [pc, #212]	; (80071e8 <USBD_CDC_Init+0x1e8>)
 8007112:	781b      	ldrb	r3, [r3, #0]
 8007114:	f003 020f 	and.w	r2, r3, #15
 8007118:	6879      	ldr	r1, [r7, #4]
 800711a:	4613      	mov	r3, r2
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	4413      	add	r3, r2
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	440b      	add	r3, r1
 8007124:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007128:	2201      	movs	r2, #1
 800712a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800712c:	4b2f      	ldr	r3, [pc, #188]	; (80071ec <USBD_CDC_Init+0x1ec>)
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	f003 020f 	and.w	r2, r3, #15
 8007134:	6879      	ldr	r1, [r7, #4]
 8007136:	4613      	mov	r3, r2
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	4413      	add	r3, r2
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	440b      	add	r3, r1
 8007140:	3326      	adds	r3, #38	; 0x26
 8007142:	2210      	movs	r2, #16
 8007144:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007146:	4b29      	ldr	r3, [pc, #164]	; (80071ec <USBD_CDC_Init+0x1ec>)
 8007148:	7819      	ldrb	r1, [r3, #0]
 800714a:	2308      	movs	r3, #8
 800714c:	2203      	movs	r2, #3
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f002 fad1 	bl	80096f6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007154:	4b25      	ldr	r3, [pc, #148]	; (80071ec <USBD_CDC_Init+0x1ec>)
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	f003 020f 	and.w	r2, r3, #15
 800715c:	6879      	ldr	r1, [r7, #4]
 800715e:	4613      	mov	r3, r2
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	4413      	add	r3, r2
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	440b      	add	r3, r1
 8007168:	3324      	adds	r3, #36	; 0x24
 800716a:	2201      	movs	r2, #1
 800716c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2200      	movs	r2, #0
 8007172:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	33b0      	adds	r3, #176	; 0xb0
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	4413      	add	r3, r2
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2200      	movs	r2, #0
 800718e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2200      	movs	r2, #0
 8007196:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d101      	bne.n	80071a8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80071a4:	2302      	movs	r3, #2
 80071a6:	e018      	b.n	80071da <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	7c1b      	ldrb	r3, [r3, #16]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d10a      	bne.n	80071c6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80071b0:	4b0d      	ldr	r3, [pc, #52]	; (80071e8 <USBD_CDC_Init+0x1e8>)
 80071b2:	7819      	ldrb	r1, [r3, #0]
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80071ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f002 fb88 	bl	80098d4 <USBD_LL_PrepareReceive>
 80071c4:	e008      	b.n	80071d8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80071c6:	4b08      	ldr	r3, [pc, #32]	; (80071e8 <USBD_CDC_Init+0x1e8>)
 80071c8:	7819      	ldrb	r1, [r3, #0]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80071d0:	2340      	movs	r3, #64	; 0x40
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f002 fb7e 	bl	80098d4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3710      	adds	r7, #16
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	20000093 	.word	0x20000093
 80071e8:	20000094 	.word	0x20000094
 80071ec:	20000095 	.word	0x20000095

080071f0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b082      	sub	sp, #8
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	460b      	mov	r3, r1
 80071fa:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80071fc:	4b3a      	ldr	r3, [pc, #232]	; (80072e8 <USBD_CDC_DeInit+0xf8>)
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	4619      	mov	r1, r3
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f002 fa9d 	bl	8009742 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007208:	4b37      	ldr	r3, [pc, #220]	; (80072e8 <USBD_CDC_DeInit+0xf8>)
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	f003 020f 	and.w	r2, r3, #15
 8007210:	6879      	ldr	r1, [r7, #4]
 8007212:	4613      	mov	r3, r2
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	4413      	add	r3, r2
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	440b      	add	r3, r1
 800721c:	3324      	adds	r3, #36	; 0x24
 800721e:	2200      	movs	r2, #0
 8007220:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007222:	4b32      	ldr	r3, [pc, #200]	; (80072ec <USBD_CDC_DeInit+0xfc>)
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	4619      	mov	r1, r3
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f002 fa8a 	bl	8009742 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800722e:	4b2f      	ldr	r3, [pc, #188]	; (80072ec <USBD_CDC_DeInit+0xfc>)
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	f003 020f 	and.w	r2, r3, #15
 8007236:	6879      	ldr	r1, [r7, #4]
 8007238:	4613      	mov	r3, r2
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	4413      	add	r3, r2
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	440b      	add	r3, r1
 8007242:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007246:	2200      	movs	r2, #0
 8007248:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800724a:	4b29      	ldr	r3, [pc, #164]	; (80072f0 <USBD_CDC_DeInit+0x100>)
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	4619      	mov	r1, r3
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f002 fa76 	bl	8009742 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007256:	4b26      	ldr	r3, [pc, #152]	; (80072f0 <USBD_CDC_DeInit+0x100>)
 8007258:	781b      	ldrb	r3, [r3, #0]
 800725a:	f003 020f 	and.w	r2, r3, #15
 800725e:	6879      	ldr	r1, [r7, #4]
 8007260:	4613      	mov	r3, r2
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	4413      	add	r3, r2
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	440b      	add	r3, r1
 800726a:	3324      	adds	r3, #36	; 0x24
 800726c:	2200      	movs	r2, #0
 800726e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007270:	4b1f      	ldr	r3, [pc, #124]	; (80072f0 <USBD_CDC_DeInit+0x100>)
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	f003 020f 	and.w	r2, r3, #15
 8007278:	6879      	ldr	r1, [r7, #4]
 800727a:	4613      	mov	r3, r2
 800727c:	009b      	lsls	r3, r3, #2
 800727e:	4413      	add	r3, r2
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	440b      	add	r3, r1
 8007284:	3326      	adds	r3, #38	; 0x26
 8007286:	2200      	movs	r2, #0
 8007288:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	32b0      	adds	r2, #176	; 0xb0
 8007294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d01f      	beq.n	80072dc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	33b0      	adds	r3, #176	; 0xb0
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	4413      	add	r3, r2
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	32b0      	adds	r2, #176	; 0xb0
 80072ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072be:	4618      	mov	r0, r3
 80072c0:	f002 fb4a 	bl	8009958 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	32b0      	adds	r2, #176	; 0xb0
 80072ce:	2100      	movs	r1, #0
 80072d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3708      	adds	r7, #8
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	bf00      	nop
 80072e8:	20000093 	.word	0x20000093
 80072ec:	20000094 	.word	0x20000094
 80072f0:	20000095 	.word	0x20000095

080072f4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b086      	sub	sp, #24
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	32b0      	adds	r2, #176	; 0xb0
 8007308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800730c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800730e:	2300      	movs	r3, #0
 8007310:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007312:	2300      	movs	r3, #0
 8007314:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007316:	2300      	movs	r3, #0
 8007318:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d101      	bne.n	8007324 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007320:	2303      	movs	r3, #3
 8007322:	e0bf      	b.n	80074a4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800732c:	2b00      	cmp	r3, #0
 800732e:	d050      	beq.n	80073d2 <USBD_CDC_Setup+0xde>
 8007330:	2b20      	cmp	r3, #32
 8007332:	f040 80af 	bne.w	8007494 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	88db      	ldrh	r3, [r3, #6]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d03a      	beq.n	80073b4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	b25b      	sxtb	r3, r3
 8007344:	2b00      	cmp	r3, #0
 8007346:	da1b      	bge.n	8007380 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	33b0      	adds	r3, #176	; 0xb0
 8007352:	009b      	lsls	r3, r3, #2
 8007354:	4413      	add	r3, r2
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	683a      	ldr	r2, [r7, #0]
 800735c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800735e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007360:	683a      	ldr	r2, [r7, #0]
 8007362:	88d2      	ldrh	r2, [r2, #6]
 8007364:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	88db      	ldrh	r3, [r3, #6]
 800736a:	2b07      	cmp	r3, #7
 800736c:	bf28      	it	cs
 800736e:	2307      	movcs	r3, #7
 8007370:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	89fa      	ldrh	r2, [r7, #14]
 8007376:	4619      	mov	r1, r3
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f001 fd89 	bl	8008e90 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800737e:	e090      	b.n	80074a2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	785a      	ldrb	r2, [r3, #1]
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	88db      	ldrh	r3, [r3, #6]
 800738e:	2b3f      	cmp	r3, #63	; 0x3f
 8007390:	d803      	bhi.n	800739a <USBD_CDC_Setup+0xa6>
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	88db      	ldrh	r3, [r3, #6]
 8007396:	b2da      	uxtb	r2, r3
 8007398:	e000      	b.n	800739c <USBD_CDC_Setup+0xa8>
 800739a:	2240      	movs	r2, #64	; 0x40
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80073a2:	6939      	ldr	r1, [r7, #16]
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80073aa:	461a      	mov	r2, r3
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f001 fd9b 	bl	8008ee8 <USBD_CtlPrepareRx>
      break;
 80073b2:	e076      	b.n	80074a2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	33b0      	adds	r3, #176	; 0xb0
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	4413      	add	r3, r2
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	683a      	ldr	r2, [r7, #0]
 80073c8:	7850      	ldrb	r0, [r2, #1]
 80073ca:	2200      	movs	r2, #0
 80073cc:	6839      	ldr	r1, [r7, #0]
 80073ce:	4798      	blx	r3
      break;
 80073d0:	e067      	b.n	80074a2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	785b      	ldrb	r3, [r3, #1]
 80073d6:	2b0b      	cmp	r3, #11
 80073d8:	d851      	bhi.n	800747e <USBD_CDC_Setup+0x18a>
 80073da:	a201      	add	r2, pc, #4	; (adr r2, 80073e0 <USBD_CDC_Setup+0xec>)
 80073dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e0:	08007411 	.word	0x08007411
 80073e4:	0800748d 	.word	0x0800748d
 80073e8:	0800747f 	.word	0x0800747f
 80073ec:	0800747f 	.word	0x0800747f
 80073f0:	0800747f 	.word	0x0800747f
 80073f4:	0800747f 	.word	0x0800747f
 80073f8:	0800747f 	.word	0x0800747f
 80073fc:	0800747f 	.word	0x0800747f
 8007400:	0800747f 	.word	0x0800747f
 8007404:	0800747f 	.word	0x0800747f
 8007408:	0800743b 	.word	0x0800743b
 800740c:	08007465 	.word	0x08007465
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007416:	b2db      	uxtb	r3, r3
 8007418:	2b03      	cmp	r3, #3
 800741a:	d107      	bne.n	800742c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800741c:	f107 030a 	add.w	r3, r7, #10
 8007420:	2202      	movs	r2, #2
 8007422:	4619      	mov	r1, r3
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f001 fd33 	bl	8008e90 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800742a:	e032      	b.n	8007492 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800742c:	6839      	ldr	r1, [r7, #0]
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f001 fcbd 	bl	8008dae <USBD_CtlError>
            ret = USBD_FAIL;
 8007434:	2303      	movs	r3, #3
 8007436:	75fb      	strb	r3, [r7, #23]
          break;
 8007438:	e02b      	b.n	8007492 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007440:	b2db      	uxtb	r3, r3
 8007442:	2b03      	cmp	r3, #3
 8007444:	d107      	bne.n	8007456 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007446:	f107 030d 	add.w	r3, r7, #13
 800744a:	2201      	movs	r2, #1
 800744c:	4619      	mov	r1, r3
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f001 fd1e 	bl	8008e90 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007454:	e01d      	b.n	8007492 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007456:	6839      	ldr	r1, [r7, #0]
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f001 fca8 	bl	8008dae <USBD_CtlError>
            ret = USBD_FAIL;
 800745e:	2303      	movs	r3, #3
 8007460:	75fb      	strb	r3, [r7, #23]
          break;
 8007462:	e016      	b.n	8007492 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800746a:	b2db      	uxtb	r3, r3
 800746c:	2b03      	cmp	r3, #3
 800746e:	d00f      	beq.n	8007490 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007470:	6839      	ldr	r1, [r7, #0]
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f001 fc9b 	bl	8008dae <USBD_CtlError>
            ret = USBD_FAIL;
 8007478:	2303      	movs	r3, #3
 800747a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800747c:	e008      	b.n	8007490 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800747e:	6839      	ldr	r1, [r7, #0]
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f001 fc94 	bl	8008dae <USBD_CtlError>
          ret = USBD_FAIL;
 8007486:	2303      	movs	r3, #3
 8007488:	75fb      	strb	r3, [r7, #23]
          break;
 800748a:	e002      	b.n	8007492 <USBD_CDC_Setup+0x19e>
          break;
 800748c:	bf00      	nop
 800748e:	e008      	b.n	80074a2 <USBD_CDC_Setup+0x1ae>
          break;
 8007490:	bf00      	nop
      }
      break;
 8007492:	e006      	b.n	80074a2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007494:	6839      	ldr	r1, [r7, #0]
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f001 fc89 	bl	8008dae <USBD_CtlError>
      ret = USBD_FAIL;
 800749c:	2303      	movs	r3, #3
 800749e:	75fb      	strb	r3, [r7, #23]
      break;
 80074a0:	bf00      	nop
  }

  return (uint8_t)ret;
 80074a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3718      	adds	r7, #24
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	460b      	mov	r3, r1
 80074b6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80074be:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	32b0      	adds	r2, #176	; 0xb0
 80074ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d101      	bne.n	80074d6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80074d2:	2303      	movs	r3, #3
 80074d4:	e065      	b.n	80075a2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	32b0      	adds	r2, #176	; 0xb0
 80074e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074e4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80074e6:	78fb      	ldrb	r3, [r7, #3]
 80074e8:	f003 020f 	and.w	r2, r3, #15
 80074ec:	6879      	ldr	r1, [r7, #4]
 80074ee:	4613      	mov	r3, r2
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	4413      	add	r3, r2
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	440b      	add	r3, r1
 80074f8:	3318      	adds	r3, #24
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d02f      	beq.n	8007560 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007500:	78fb      	ldrb	r3, [r7, #3]
 8007502:	f003 020f 	and.w	r2, r3, #15
 8007506:	6879      	ldr	r1, [r7, #4]
 8007508:	4613      	mov	r3, r2
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	4413      	add	r3, r2
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	440b      	add	r3, r1
 8007512:	3318      	adds	r3, #24
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	78fb      	ldrb	r3, [r7, #3]
 8007518:	f003 010f 	and.w	r1, r3, #15
 800751c:	68f8      	ldr	r0, [r7, #12]
 800751e:	460b      	mov	r3, r1
 8007520:	00db      	lsls	r3, r3, #3
 8007522:	440b      	add	r3, r1
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	4403      	add	r3, r0
 8007528:	3348      	adds	r3, #72	; 0x48
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007530:	fb01 f303 	mul.w	r3, r1, r3
 8007534:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007536:	2b00      	cmp	r3, #0
 8007538:	d112      	bne.n	8007560 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800753a:	78fb      	ldrb	r3, [r7, #3]
 800753c:	f003 020f 	and.w	r2, r3, #15
 8007540:	6879      	ldr	r1, [r7, #4]
 8007542:	4613      	mov	r3, r2
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	4413      	add	r3, r2
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	440b      	add	r3, r1
 800754c:	3318      	adds	r3, #24
 800754e:	2200      	movs	r2, #0
 8007550:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007552:	78f9      	ldrb	r1, [r7, #3]
 8007554:	2300      	movs	r3, #0
 8007556:	2200      	movs	r2, #0
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f002 f99a 	bl	8009892 <USBD_LL_Transmit>
 800755e:	e01f      	b.n	80075a0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	2200      	movs	r2, #0
 8007564:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	33b0      	adds	r3, #176	; 0xb0
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	4413      	add	r3, r2
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	691b      	ldr	r3, [r3, #16]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d010      	beq.n	80075a0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	33b0      	adds	r3, #176	; 0xb0
 8007588:	009b      	lsls	r3, r3, #2
 800758a:	4413      	add	r3, r2
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	691b      	ldr	r3, [r3, #16]
 8007590:	68ba      	ldr	r2, [r7, #8]
 8007592:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007596:	68ba      	ldr	r2, [r7, #8]
 8007598:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800759c:	78fa      	ldrb	r2, [r7, #3]
 800759e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80075a0:	2300      	movs	r3, #0
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3710      	adds	r7, #16
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}

080075aa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80075aa:	b580      	push	{r7, lr}
 80075ac:	b084      	sub	sp, #16
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
 80075b2:	460b      	mov	r3, r1
 80075b4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	32b0      	adds	r2, #176	; 0xb0
 80075c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075c4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	32b0      	adds	r2, #176	; 0xb0
 80075d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d101      	bne.n	80075dc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80075d8:	2303      	movs	r3, #3
 80075da:	e01a      	b.n	8007612 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80075dc:	78fb      	ldrb	r3, [r7, #3]
 80075de:	4619      	mov	r1, r3
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f002 f998 	bl	8009916 <USBD_LL_GetRxDataSize>
 80075e6:	4602      	mov	r2, r0
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	33b0      	adds	r3, #176	; 0xb0
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	4413      	add	r3, r2
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	68db      	ldr	r3, [r3, #12]
 8007600:	68fa      	ldr	r2, [r7, #12]
 8007602:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800760c:	4611      	mov	r1, r2
 800760e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007610:	2300      	movs	r3, #0
}
 8007612:	4618      	mov	r0, r3
 8007614:	3710      	adds	r7, #16
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}

0800761a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800761a:	b580      	push	{r7, lr}
 800761c:	b084      	sub	sp, #16
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	32b0      	adds	r2, #176	; 0xb0
 800762c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007630:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d101      	bne.n	800763c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007638:	2303      	movs	r3, #3
 800763a:	e025      	b.n	8007688 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	33b0      	adds	r3, #176	; 0xb0
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	4413      	add	r3, r2
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d01a      	beq.n	8007686 <USBD_CDC_EP0_RxReady+0x6c>
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007656:	2bff      	cmp	r3, #255	; 0xff
 8007658:	d015      	beq.n	8007686 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	33b0      	adds	r3, #176	; 0xb0
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	4413      	add	r3, r2
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	68fa      	ldr	r2, [r7, #12]
 800766e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007672:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007674:	68fa      	ldr	r2, [r7, #12]
 8007676:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800767a:	b292      	uxth	r2, r2
 800767c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	22ff      	movs	r2, #255	; 0xff
 8007682:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007686:	2300      	movs	r3, #0
}
 8007688:	4618      	mov	r0, r3
 800768a:	3710      	adds	r7, #16
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b086      	sub	sp, #24
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007698:	2182      	movs	r1, #130	; 0x82
 800769a:	4818      	ldr	r0, [pc, #96]	; (80076fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800769c:	f000 fd4f 	bl	800813e <USBD_GetEpDesc>
 80076a0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80076a2:	2101      	movs	r1, #1
 80076a4:	4815      	ldr	r0, [pc, #84]	; (80076fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 80076a6:	f000 fd4a 	bl	800813e <USBD_GetEpDesc>
 80076aa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80076ac:	2181      	movs	r1, #129	; 0x81
 80076ae:	4813      	ldr	r0, [pc, #76]	; (80076fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 80076b0:	f000 fd45 	bl	800813e <USBD_GetEpDesc>
 80076b4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d002      	beq.n	80076c2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	2210      	movs	r2, #16
 80076c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d006      	beq.n	80076d6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	2200      	movs	r2, #0
 80076cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076d0:	711a      	strb	r2, [r3, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d006      	beq.n	80076ea <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2200      	movs	r2, #0
 80076e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076e4:	711a      	strb	r2, [r3, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2243      	movs	r2, #67	; 0x43
 80076ee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80076f0:	4b02      	ldr	r3, [pc, #8]	; (80076fc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3718      	adds	r7, #24
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
 80076fa:	bf00      	nop
 80076fc:	20000050 	.word	0x20000050

08007700 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b086      	sub	sp, #24
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007708:	2182      	movs	r1, #130	; 0x82
 800770a:	4818      	ldr	r0, [pc, #96]	; (800776c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800770c:	f000 fd17 	bl	800813e <USBD_GetEpDesc>
 8007710:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007712:	2101      	movs	r1, #1
 8007714:	4815      	ldr	r0, [pc, #84]	; (800776c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007716:	f000 fd12 	bl	800813e <USBD_GetEpDesc>
 800771a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800771c:	2181      	movs	r1, #129	; 0x81
 800771e:	4813      	ldr	r0, [pc, #76]	; (800776c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007720:	f000 fd0d 	bl	800813e <USBD_GetEpDesc>
 8007724:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d002      	beq.n	8007732 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	2210      	movs	r2, #16
 8007730:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d006      	beq.n	8007746 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	2200      	movs	r2, #0
 800773c:	711a      	strb	r2, [r3, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	f042 0202 	orr.w	r2, r2, #2
 8007744:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d006      	beq.n	800775a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2200      	movs	r2, #0
 8007750:	711a      	strb	r2, [r3, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	f042 0202 	orr.w	r2, r2, #2
 8007758:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2243      	movs	r2, #67	; 0x43
 800775e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007760:	4b02      	ldr	r3, [pc, #8]	; (800776c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007762:	4618      	mov	r0, r3
 8007764:	3718      	adds	r7, #24
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop
 800776c:	20000050 	.word	0x20000050

08007770 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b086      	sub	sp, #24
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007778:	2182      	movs	r1, #130	; 0x82
 800777a:	4818      	ldr	r0, [pc, #96]	; (80077dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800777c:	f000 fcdf 	bl	800813e <USBD_GetEpDesc>
 8007780:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007782:	2101      	movs	r1, #1
 8007784:	4815      	ldr	r0, [pc, #84]	; (80077dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007786:	f000 fcda 	bl	800813e <USBD_GetEpDesc>
 800778a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800778c:	2181      	movs	r1, #129	; 0x81
 800778e:	4813      	ldr	r0, [pc, #76]	; (80077dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007790:	f000 fcd5 	bl	800813e <USBD_GetEpDesc>
 8007794:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d002      	beq.n	80077a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	2210      	movs	r2, #16
 80077a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d006      	beq.n	80077b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	2200      	movs	r2, #0
 80077ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077b0:	711a      	strb	r2, [r3, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d006      	beq.n	80077ca <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2200      	movs	r2, #0
 80077c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077c4:	711a      	strb	r2, [r3, #4]
 80077c6:	2200      	movs	r2, #0
 80077c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2243      	movs	r2, #67	; 0x43
 80077ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80077d0:	4b02      	ldr	r3, [pc, #8]	; (80077dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3718      	adds	r7, #24
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
 80077da:	bf00      	nop
 80077dc:	20000050 	.word	0x20000050

080077e0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	220a      	movs	r2, #10
 80077ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80077ee:	4b03      	ldr	r3, [pc, #12]	; (80077fc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	370c      	adds	r7, #12
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr
 80077fc:	2000000c 	.word	0x2000000c

08007800 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007800:	b480      	push	{r7}
 8007802:	b083      	sub	sp, #12
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d101      	bne.n	8007814 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007810:	2303      	movs	r3, #3
 8007812:	e009      	b.n	8007828 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800781a:	687a      	ldr	r2, [r7, #4]
 800781c:	33b0      	adds	r3, #176	; 0xb0
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	4413      	add	r3, r2
 8007822:	683a      	ldr	r2, [r7, #0]
 8007824:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007826:	2300      	movs	r3, #0
}
 8007828:	4618      	mov	r0, r3
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007834:	b480      	push	{r7}
 8007836:	b087      	sub	sp, #28
 8007838:	af00      	add	r7, sp, #0
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	60b9      	str	r1, [r7, #8]
 800783e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	32b0      	adds	r2, #176	; 0xb0
 800784a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800784e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d101      	bne.n	800785a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007856:	2303      	movs	r3, #3
 8007858:	e008      	b.n	800786c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	68ba      	ldr	r2, [r7, #8]
 800785e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	687a      	ldr	r2, [r7, #4]
 8007866:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800786a:	2300      	movs	r3, #0
}
 800786c:	4618      	mov	r0, r3
 800786e:	371c      	adds	r7, #28
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007878:	b480      	push	{r7}
 800787a:	b085      	sub	sp, #20
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	32b0      	adds	r2, #176	; 0xb0
 800788c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007890:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d101      	bne.n	800789c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007898:	2303      	movs	r3, #3
 800789a:	e004      	b.n	80078a6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	683a      	ldr	r2, [r7, #0]
 80078a0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3714      	adds	r7, #20
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr
	...

080078b4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b084      	sub	sp, #16
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	32b0      	adds	r2, #176	; 0xb0
 80078c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078ca:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80078cc:	2301      	movs	r3, #1
 80078ce:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	32b0      	adds	r2, #176	; 0xb0
 80078da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d101      	bne.n	80078e6 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80078e2:	2303      	movs	r3, #3
 80078e4:	e025      	b.n	8007932 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d11f      	bne.n	8007930 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	2201      	movs	r2, #1
 80078f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80078f8:	4b10      	ldr	r3, [pc, #64]	; (800793c <USBD_CDC_TransmitPacket+0x88>)
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	f003 020f 	and.w	r2, r3, #15
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	4613      	mov	r3, r2
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	4413      	add	r3, r2
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	4403      	add	r3, r0
 8007912:	3318      	adds	r3, #24
 8007914:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007916:	4b09      	ldr	r3, [pc, #36]	; (800793c <USBD_CDC_TransmitPacket+0x88>)
 8007918:	7819      	ldrb	r1, [r3, #0]
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f001 ffb3 	bl	8009892 <USBD_LL_Transmit>

    ret = USBD_OK;
 800792c:	2300      	movs	r3, #0
 800792e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007930:	7bfb      	ldrb	r3, [r7, #15]
}
 8007932:	4618      	mov	r0, r3
 8007934:	3710      	adds	r7, #16
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}
 800793a:	bf00      	nop
 800793c:	20000093 	.word	0x20000093

08007940 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	32b0      	adds	r2, #176	; 0xb0
 8007952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007956:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	32b0      	adds	r2, #176	; 0xb0
 8007962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d101      	bne.n	800796e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800796a:	2303      	movs	r3, #3
 800796c:	e018      	b.n	80079a0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	7c1b      	ldrb	r3, [r3, #16]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d10a      	bne.n	800798c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007976:	4b0c      	ldr	r3, [pc, #48]	; (80079a8 <USBD_CDC_ReceivePacket+0x68>)
 8007978:	7819      	ldrb	r1, [r3, #0]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007980:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f001 ffa5 	bl	80098d4 <USBD_LL_PrepareReceive>
 800798a:	e008      	b.n	800799e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800798c:	4b06      	ldr	r3, [pc, #24]	; (80079a8 <USBD_CDC_ReceivePacket+0x68>)
 800798e:	7819      	ldrb	r1, [r3, #0]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007996:	2340      	movs	r3, #64	; 0x40
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f001 ff9b 	bl	80098d4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800799e:	2300      	movs	r3, #0
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3710      	adds	r7, #16
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	20000094 	.word	0x20000094

080079ac <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b086      	sub	sp, #24
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	60f8      	str	r0, [r7, #12]
 80079b4:	60b9      	str	r1, [r7, #8]
 80079b6:	4613      	mov	r3, r2
 80079b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d101      	bne.n	80079c4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80079c0:	2303      	movs	r3, #3
 80079c2:	e01f      	b.n	8007a04 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2200      	movs	r2, #0
 80079c8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2200      	movs	r2, #0
 80079d0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d003      	beq.n	80079ea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	68ba      	ldr	r2, [r7, #8]
 80079e6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2201      	movs	r2, #1
 80079ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	79fa      	ldrb	r2, [r7, #7]
 80079f6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80079f8:	68f8      	ldr	r0, [r7, #12]
 80079fa:	f001 fe15 	bl	8009628 <USBD_LL_Init>
 80079fe:	4603      	mov	r3, r0
 8007a00:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007a02:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3718      	adds	r7, #24
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007a16:	2300      	movs	r3, #0
 8007a18:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d101      	bne.n	8007a24 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007a20:	2303      	movs	r3, #3
 8007a22:	e025      	b.n	8007a70 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	683a      	ldr	r2, [r7, #0]
 8007a28:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	32ae      	adds	r2, #174	; 0xae
 8007a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d00f      	beq.n	8007a60 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	32ae      	adds	r2, #174	; 0xae
 8007a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a50:	f107 020e 	add.w	r2, r7, #14
 8007a54:	4610      	mov	r0, r2
 8007a56:	4798      	blx	r3
 8007a58:	4602      	mov	r2, r0
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007a66:	1c5a      	adds	r2, r3, #1
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007a6e:	2300      	movs	r3, #0
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3710      	adds	r7, #16
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f001 fe1d 	bl	80096c0 <USBD_LL_Start>
 8007a86:	4603      	mov	r3, r0
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3708      	adds	r7, #8
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b083      	sub	sp, #12
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007a98:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	370c      	adds	r7, #12
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr

08007aa6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	b084      	sub	sp, #16
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
 8007aae:	460b      	mov	r3, r1
 8007ab0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d009      	beq.n	8007ad4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	78fa      	ldrb	r2, [r7, #3]
 8007aca:	4611      	mov	r1, r2
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	4798      	blx	r3
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3710      	adds	r7, #16
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}

08007ade <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ade:	b580      	push	{r7, lr}
 8007ae0:	b084      	sub	sp, #16
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007aea:	2300      	movs	r3, #0
 8007aec:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	78fa      	ldrb	r2, [r7, #3]
 8007af8:	4611      	mov	r1, r2
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	4798      	blx	r3
 8007afe:	4603      	mov	r3, r0
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d001      	beq.n	8007b08 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007b04:	2303      	movs	r3, #3
 8007b06:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3710      	adds	r7, #16
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}

08007b12 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007b12:	b580      	push	{r7, lr}
 8007b14:	b084      	sub	sp, #16
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
 8007b1a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007b22:	6839      	ldr	r1, [r7, #0]
 8007b24:	4618      	mov	r0, r3
 8007b26:	f001 f908 	bl	8008d3a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007b38:	461a      	mov	r2, r3
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007b46:	f003 031f 	and.w	r3, r3, #31
 8007b4a:	2b02      	cmp	r3, #2
 8007b4c:	d01a      	beq.n	8007b84 <USBD_LL_SetupStage+0x72>
 8007b4e:	2b02      	cmp	r3, #2
 8007b50:	d822      	bhi.n	8007b98 <USBD_LL_SetupStage+0x86>
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d002      	beq.n	8007b5c <USBD_LL_SetupStage+0x4a>
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d00a      	beq.n	8007b70 <USBD_LL_SetupStage+0x5e>
 8007b5a:	e01d      	b.n	8007b98 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007b62:	4619      	mov	r1, r3
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 fb5f 	bl	8008228 <USBD_StdDevReq>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	73fb      	strb	r3, [r7, #15]
      break;
 8007b6e:	e020      	b.n	8007bb2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007b76:	4619      	mov	r1, r3
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 fbc7 	bl	800830c <USBD_StdItfReq>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	73fb      	strb	r3, [r7, #15]
      break;
 8007b82:	e016      	b.n	8007bb2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 fc29 	bl	80083e4 <USBD_StdEPReq>
 8007b92:	4603      	mov	r3, r0
 8007b94:	73fb      	strb	r3, [r7, #15]
      break;
 8007b96:	e00c      	b.n	8007bb2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007b9e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f001 fdea 	bl	8009780 <USBD_LL_StallEP>
 8007bac:	4603      	mov	r3, r0
 8007bae:	73fb      	strb	r3, [r7, #15]
      break;
 8007bb0:	bf00      	nop
  }

  return ret;
 8007bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3710      	adds	r7, #16
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b086      	sub	sp, #24
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	60f8      	str	r0, [r7, #12]
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	607a      	str	r2, [r7, #4]
 8007bc8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007bce:	7afb      	ldrb	r3, [r7, #11]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d16e      	bne.n	8007cb2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007bda:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007be2:	2b03      	cmp	r3, #3
 8007be4:	f040 8098 	bne.w	8007d18 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	689a      	ldr	r2, [r3, #8]
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d913      	bls.n	8007c1c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	689a      	ldr	r2, [r3, #8]
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	1ad2      	subs	r2, r2, r3
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	68da      	ldr	r2, [r3, #12]
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	bf28      	it	cs
 8007c0e:	4613      	movcs	r3, r2
 8007c10:	461a      	mov	r2, r3
 8007c12:	6879      	ldr	r1, [r7, #4]
 8007c14:	68f8      	ldr	r0, [r7, #12]
 8007c16:	f001 f984 	bl	8008f22 <USBD_CtlContinueRx>
 8007c1a:	e07d      	b.n	8007d18 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007c22:	f003 031f 	and.w	r3, r3, #31
 8007c26:	2b02      	cmp	r3, #2
 8007c28:	d014      	beq.n	8007c54 <USBD_LL_DataOutStage+0x98>
 8007c2a:	2b02      	cmp	r3, #2
 8007c2c:	d81d      	bhi.n	8007c6a <USBD_LL_DataOutStage+0xae>
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d002      	beq.n	8007c38 <USBD_LL_DataOutStage+0x7c>
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d003      	beq.n	8007c3e <USBD_LL_DataOutStage+0x82>
 8007c36:	e018      	b.n	8007c6a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	75bb      	strb	r3, [r7, #22]
            break;
 8007c3c:	e018      	b.n	8007c70 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	4619      	mov	r1, r3
 8007c48:	68f8      	ldr	r0, [r7, #12]
 8007c4a:	f000 fa5e 	bl	800810a <USBD_CoreFindIF>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	75bb      	strb	r3, [r7, #22]
            break;
 8007c52:	e00d      	b.n	8007c70 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	68f8      	ldr	r0, [r7, #12]
 8007c60:	f000 fa60 	bl	8008124 <USBD_CoreFindEP>
 8007c64:	4603      	mov	r3, r0
 8007c66:	75bb      	strb	r3, [r7, #22]
            break;
 8007c68:	e002      	b.n	8007c70 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	75bb      	strb	r3, [r7, #22]
            break;
 8007c6e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007c70:	7dbb      	ldrb	r3, [r7, #22]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d119      	bne.n	8007caa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	2b03      	cmp	r3, #3
 8007c80:	d113      	bne.n	8007caa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007c82:	7dba      	ldrb	r2, [r7, #22]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	32ae      	adds	r2, #174	; 0xae
 8007c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c8c:	691b      	ldr	r3, [r3, #16]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d00b      	beq.n	8007caa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007c92:	7dba      	ldrb	r2, [r7, #22]
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007c9a:	7dba      	ldrb	r2, [r7, #22]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	32ae      	adds	r2, #174	; 0xae
 8007ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ca4:	691b      	ldr	r3, [r3, #16]
 8007ca6:	68f8      	ldr	r0, [r7, #12]
 8007ca8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007caa:	68f8      	ldr	r0, [r7, #12]
 8007cac:	f001 f94a 	bl	8008f44 <USBD_CtlSendStatus>
 8007cb0:	e032      	b.n	8007d18 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007cb2:	7afb      	ldrb	r3, [r7, #11]
 8007cb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	4619      	mov	r1, r3
 8007cbc:	68f8      	ldr	r0, [r7, #12]
 8007cbe:	f000 fa31 	bl	8008124 <USBD_CoreFindEP>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007cc6:	7dbb      	ldrb	r3, [r7, #22]
 8007cc8:	2bff      	cmp	r3, #255	; 0xff
 8007cca:	d025      	beq.n	8007d18 <USBD_LL_DataOutStage+0x15c>
 8007ccc:	7dbb      	ldrb	r3, [r7, #22]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d122      	bne.n	8007d18 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	2b03      	cmp	r3, #3
 8007cdc:	d117      	bne.n	8007d0e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007cde:	7dba      	ldrb	r2, [r7, #22]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	32ae      	adds	r2, #174	; 0xae
 8007ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ce8:	699b      	ldr	r3, [r3, #24]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d00f      	beq.n	8007d0e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007cee:	7dba      	ldrb	r2, [r7, #22]
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007cf6:	7dba      	ldrb	r2, [r7, #22]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	32ae      	adds	r2, #174	; 0xae
 8007cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d00:	699b      	ldr	r3, [r3, #24]
 8007d02:	7afa      	ldrb	r2, [r7, #11]
 8007d04:	4611      	mov	r1, r2
 8007d06:	68f8      	ldr	r0, [r7, #12]
 8007d08:	4798      	blx	r3
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007d0e:	7dfb      	ldrb	r3, [r7, #23]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d001      	beq.n	8007d18 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007d14:	7dfb      	ldrb	r3, [r7, #23]
 8007d16:	e000      	b.n	8007d1a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007d18:	2300      	movs	r3, #0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3718      	adds	r7, #24
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007d22:	b580      	push	{r7, lr}
 8007d24:	b086      	sub	sp, #24
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	60f8      	str	r0, [r7, #12]
 8007d2a:	460b      	mov	r3, r1
 8007d2c:	607a      	str	r2, [r7, #4]
 8007d2e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007d30:	7afb      	ldrb	r3, [r7, #11]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d16f      	bne.n	8007e16 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	3314      	adds	r3, #20
 8007d3a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d42:	2b02      	cmp	r3, #2
 8007d44:	d15a      	bne.n	8007dfc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	689a      	ldr	r2, [r3, #8]
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	68db      	ldr	r3, [r3, #12]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d914      	bls.n	8007d7c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	689a      	ldr	r2, [r3, #8]
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	68db      	ldr	r3, [r3, #12]
 8007d5a:	1ad2      	subs	r2, r2, r3
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	461a      	mov	r2, r3
 8007d66:	6879      	ldr	r1, [r7, #4]
 8007d68:	68f8      	ldr	r0, [r7, #12]
 8007d6a:	f001 f8ac 	bl	8008ec6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d6e:	2300      	movs	r3, #0
 8007d70:	2200      	movs	r2, #0
 8007d72:	2100      	movs	r1, #0
 8007d74:	68f8      	ldr	r0, [r7, #12]
 8007d76:	f001 fdad 	bl	80098d4 <USBD_LL_PrepareReceive>
 8007d7a:	e03f      	b.n	8007dfc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	68da      	ldr	r2, [r3, #12]
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	689b      	ldr	r3, [r3, #8]
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d11c      	bne.n	8007dc2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	685a      	ldr	r2, [r3, #4]
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d316      	bcc.n	8007dc2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	685a      	ldr	r2, [r3, #4]
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d20f      	bcs.n	8007dc2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007da2:	2200      	movs	r2, #0
 8007da4:	2100      	movs	r1, #0
 8007da6:	68f8      	ldr	r0, [r7, #12]
 8007da8:	f001 f88d 	bl	8008ec6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2200      	movs	r2, #0
 8007db0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007db4:	2300      	movs	r3, #0
 8007db6:	2200      	movs	r2, #0
 8007db8:	2100      	movs	r1, #0
 8007dba:	68f8      	ldr	r0, [r7, #12]
 8007dbc:	f001 fd8a 	bl	80098d4 <USBD_LL_PrepareReceive>
 8007dc0:	e01c      	b.n	8007dfc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	2b03      	cmp	r3, #3
 8007dcc:	d10f      	bne.n	8007dee <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dd4:	68db      	ldr	r3, [r3, #12]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d009      	beq.n	8007dee <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007de8:	68db      	ldr	r3, [r3, #12]
 8007dea:	68f8      	ldr	r0, [r7, #12]
 8007dec:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007dee:	2180      	movs	r1, #128	; 0x80
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	f001 fcc5 	bl	8009780 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007df6:	68f8      	ldr	r0, [r7, #12]
 8007df8:	f001 f8b7 	bl	8008f6a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d03a      	beq.n	8007e7c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007e06:	68f8      	ldr	r0, [r7, #12]
 8007e08:	f7ff fe42 	bl	8007a90 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007e14:	e032      	b.n	8007e7c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007e16:	7afb      	ldrb	r3, [r7, #11]
 8007e18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	4619      	mov	r1, r3
 8007e20:	68f8      	ldr	r0, [r7, #12]
 8007e22:	f000 f97f 	bl	8008124 <USBD_CoreFindEP>
 8007e26:	4603      	mov	r3, r0
 8007e28:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e2a:	7dfb      	ldrb	r3, [r7, #23]
 8007e2c:	2bff      	cmp	r3, #255	; 0xff
 8007e2e:	d025      	beq.n	8007e7c <USBD_LL_DataInStage+0x15a>
 8007e30:	7dfb      	ldrb	r3, [r7, #23]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d122      	bne.n	8007e7c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	2b03      	cmp	r3, #3
 8007e40:	d11c      	bne.n	8007e7c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007e42:	7dfa      	ldrb	r2, [r7, #23]
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	32ae      	adds	r2, #174	; 0xae
 8007e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e4c:	695b      	ldr	r3, [r3, #20]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d014      	beq.n	8007e7c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007e52:	7dfa      	ldrb	r2, [r7, #23]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007e5a:	7dfa      	ldrb	r2, [r7, #23]
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	32ae      	adds	r2, #174	; 0xae
 8007e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e64:	695b      	ldr	r3, [r3, #20]
 8007e66:	7afa      	ldrb	r2, [r7, #11]
 8007e68:	4611      	mov	r1, r2
 8007e6a:	68f8      	ldr	r0, [r7, #12]
 8007e6c:	4798      	blx	r3
 8007e6e:	4603      	mov	r3, r0
 8007e70:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007e72:	7dbb      	ldrb	r3, [r7, #22]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d001      	beq.n	8007e7c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007e78:	7dbb      	ldrb	r3, [r7, #22]
 8007e7a:	e000      	b.n	8007e7e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007e7c:	2300      	movs	r3, #0
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3718      	adds	r7, #24
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}

08007e86 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b084      	sub	sp, #16
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2201      	movs	r2, #1
 8007e96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d014      	beq.n	8007eec <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d00e      	beq.n	8007eec <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	687a      	ldr	r2, [r7, #4]
 8007ed8:	6852      	ldr	r2, [r2, #4]
 8007eda:	b2d2      	uxtb	r2, r2
 8007edc:	4611      	mov	r1, r2
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	4798      	blx	r3
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d001      	beq.n	8007eec <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007ee8:	2303      	movs	r3, #3
 8007eea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007eec:	2340      	movs	r3, #64	; 0x40
 8007eee:	2200      	movs	r2, #0
 8007ef0:	2100      	movs	r1, #0
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f001 fbff 	bl	80096f6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2240      	movs	r2, #64	; 0x40
 8007f04:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f08:	2340      	movs	r3, #64	; 0x40
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	2180      	movs	r1, #128	; 0x80
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f001 fbf1 	bl	80096f6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2201      	movs	r2, #1
 8007f18:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2240      	movs	r2, #64	; 0x40
 8007f1e:	621a      	str	r2, [r3, #32]

  return ret;
 8007f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3710      	adds	r7, #16
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007f2a:	b480      	push	{r7}
 8007f2c:	b083      	sub	sp, #12
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
 8007f32:	460b      	mov	r3, r1
 8007f34:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	78fa      	ldrb	r2, [r7, #3]
 8007f3a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007f3c:	2300      	movs	r3, #0
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	370c      	adds	r7, #12
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr

08007f4a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007f4a:	b480      	push	{r7}
 8007f4c:	b083      	sub	sp, #12
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f58:	b2da      	uxtb	r2, r3
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2204      	movs	r2, #4
 8007f64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007f68:	2300      	movs	r3, #0
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	370c      	adds	r7, #12
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr

08007f76 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007f76:	b480      	push	{r7}
 8007f78:	b083      	sub	sp, #12
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	2b04      	cmp	r3, #4
 8007f88:	d106      	bne.n	8007f98 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007f90:	b2da      	uxtb	r2, r3
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007f98:	2300      	movs	r3, #0
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	370c      	adds	r7, #12
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa4:	4770      	bx	lr

08007fa6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007fa6:	b580      	push	{r7, lr}
 8007fa8:	b082      	sub	sp, #8
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	2b03      	cmp	r3, #3
 8007fb8:	d110      	bne.n	8007fdc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d00b      	beq.n	8007fdc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fca:	69db      	ldr	r3, [r3, #28]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d005      	beq.n	8007fdc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fd6:	69db      	ldr	r3, [r3, #28]
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007fdc:	2300      	movs	r3, #0
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3708      	adds	r7, #8
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}

08007fe6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b082      	sub	sp, #8
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
 8007fee:	460b      	mov	r3, r1
 8007ff0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	32ae      	adds	r2, #174	; 0xae
 8007ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d101      	bne.n	8008008 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008004:	2303      	movs	r3, #3
 8008006:	e01c      	b.n	8008042 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800800e:	b2db      	uxtb	r3, r3
 8008010:	2b03      	cmp	r3, #3
 8008012:	d115      	bne.n	8008040 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	32ae      	adds	r2, #174	; 0xae
 800801e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008022:	6a1b      	ldr	r3, [r3, #32]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d00b      	beq.n	8008040 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	32ae      	adds	r2, #174	; 0xae
 8008032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008036:	6a1b      	ldr	r3, [r3, #32]
 8008038:	78fa      	ldrb	r2, [r7, #3]
 800803a:	4611      	mov	r1, r2
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008040:	2300      	movs	r3, #0
}
 8008042:	4618      	mov	r0, r3
 8008044:	3708      	adds	r7, #8
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800804a:	b580      	push	{r7, lr}
 800804c:	b082      	sub	sp, #8
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
 8008052:	460b      	mov	r3, r1
 8008054:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	32ae      	adds	r2, #174	; 0xae
 8008060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d101      	bne.n	800806c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008068:	2303      	movs	r3, #3
 800806a:	e01c      	b.n	80080a6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008072:	b2db      	uxtb	r3, r3
 8008074:	2b03      	cmp	r3, #3
 8008076:	d115      	bne.n	80080a4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	32ae      	adds	r2, #174	; 0xae
 8008082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008088:	2b00      	cmp	r3, #0
 800808a:	d00b      	beq.n	80080a4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	32ae      	adds	r2, #174	; 0xae
 8008096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800809a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809c:	78fa      	ldrb	r2, [r7, #3]
 800809e:	4611      	mov	r1, r2
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80080a4:	2300      	movs	r3, #0
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3708      	adds	r7, #8
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}

080080ae <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80080ae:	b480      	push	{r7}
 80080b0:	b083      	sub	sp, #12
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80080b6:	2300      	movs	r3, #0
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	370c      	adds	r7, #12
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr

080080c4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80080cc:	2300      	movs	r3, #0
 80080ce:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2201      	movs	r2, #1
 80080d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d00e      	beq.n	8008100 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	6852      	ldr	r2, [r2, #4]
 80080ee:	b2d2      	uxtb	r2, r2
 80080f0:	4611      	mov	r1, r2
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	4798      	blx	r3
 80080f6:	4603      	mov	r3, r0
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d001      	beq.n	8008100 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80080fc:	2303      	movs	r3, #3
 80080fe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008100:	7bfb      	ldrb	r3, [r7, #15]
}
 8008102:	4618      	mov	r0, r3
 8008104:	3710      	adds	r7, #16
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}

0800810a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800810a:	b480      	push	{r7}
 800810c:	b083      	sub	sp, #12
 800810e:	af00      	add	r7, sp, #0
 8008110:	6078      	str	r0, [r7, #4]
 8008112:	460b      	mov	r3, r1
 8008114:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008116:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008118:	4618      	mov	r0, r3
 800811a:	370c      	adds	r7, #12
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr

08008124 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008124:	b480      	push	{r7}
 8008126:	b083      	sub	sp, #12
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	460b      	mov	r3, r1
 800812e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008130:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008132:	4618      	mov	r0, r3
 8008134:	370c      	adds	r7, #12
 8008136:	46bd      	mov	sp, r7
 8008138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813c:	4770      	bx	lr

0800813e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800813e:	b580      	push	{r7, lr}
 8008140:	b086      	sub	sp, #24
 8008142:	af00      	add	r7, sp, #0
 8008144:	6078      	str	r0, [r7, #4]
 8008146:	460b      	mov	r3, r1
 8008148:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008152:	2300      	movs	r3, #0
 8008154:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	885b      	ldrh	r3, [r3, #2]
 800815a:	b29a      	uxth	r2, r3
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	b29b      	uxth	r3, r3
 8008162:	429a      	cmp	r2, r3
 8008164:	d920      	bls.n	80081a8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	b29b      	uxth	r3, r3
 800816c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800816e:	e013      	b.n	8008198 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008170:	f107 030a 	add.w	r3, r7, #10
 8008174:	4619      	mov	r1, r3
 8008176:	6978      	ldr	r0, [r7, #20]
 8008178:	f000 f81b 	bl	80081b2 <USBD_GetNextDesc>
 800817c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	785b      	ldrb	r3, [r3, #1]
 8008182:	2b05      	cmp	r3, #5
 8008184:	d108      	bne.n	8008198 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	789b      	ldrb	r3, [r3, #2]
 800818e:	78fa      	ldrb	r2, [r7, #3]
 8008190:	429a      	cmp	r2, r3
 8008192:	d008      	beq.n	80081a6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008194:	2300      	movs	r3, #0
 8008196:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	885b      	ldrh	r3, [r3, #2]
 800819c:	b29a      	uxth	r2, r3
 800819e:	897b      	ldrh	r3, [r7, #10]
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d8e5      	bhi.n	8008170 <USBD_GetEpDesc+0x32>
 80081a4:	e000      	b.n	80081a8 <USBD_GetEpDesc+0x6a>
          break;
 80081a6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80081a8:	693b      	ldr	r3, [r7, #16]
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3718      	adds	r7, #24
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}

080081b2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80081b2:	b480      	push	{r7}
 80081b4:	b085      	sub	sp, #20
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
 80081ba:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	881a      	ldrh	r2, [r3, #0]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	b29b      	uxth	r3, r3
 80081ca:	4413      	add	r3, r2
 80081cc:	b29a      	uxth	r2, r3
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	461a      	mov	r2, r3
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	4413      	add	r3, r2
 80081dc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80081de:	68fb      	ldr	r3, [r7, #12]
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3714      	adds	r7, #20
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr

080081ec <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b087      	sub	sp, #28
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	3301      	adds	r3, #1
 8008202:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800820a:	8a3b      	ldrh	r3, [r7, #16]
 800820c:	021b      	lsls	r3, r3, #8
 800820e:	b21a      	sxth	r2, r3
 8008210:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008214:	4313      	orrs	r3, r2
 8008216:	b21b      	sxth	r3, r3
 8008218:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800821a:	89fb      	ldrh	r3, [r7, #14]
}
 800821c:	4618      	mov	r0, r3
 800821e:	371c      	adds	r7, #28
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr

08008228 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008232:	2300      	movs	r3, #0
 8008234:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800823e:	2b40      	cmp	r3, #64	; 0x40
 8008240:	d005      	beq.n	800824e <USBD_StdDevReq+0x26>
 8008242:	2b40      	cmp	r3, #64	; 0x40
 8008244:	d857      	bhi.n	80082f6 <USBD_StdDevReq+0xce>
 8008246:	2b00      	cmp	r3, #0
 8008248:	d00f      	beq.n	800826a <USBD_StdDevReq+0x42>
 800824a:	2b20      	cmp	r3, #32
 800824c:	d153      	bne.n	80082f6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	32ae      	adds	r2, #174	; 0xae
 8008258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	6839      	ldr	r1, [r7, #0]
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	4798      	blx	r3
 8008264:	4603      	mov	r3, r0
 8008266:	73fb      	strb	r3, [r7, #15]
      break;
 8008268:	e04a      	b.n	8008300 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	785b      	ldrb	r3, [r3, #1]
 800826e:	2b09      	cmp	r3, #9
 8008270:	d83b      	bhi.n	80082ea <USBD_StdDevReq+0xc2>
 8008272:	a201      	add	r2, pc, #4	; (adr r2, 8008278 <USBD_StdDevReq+0x50>)
 8008274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008278:	080082cd 	.word	0x080082cd
 800827c:	080082e1 	.word	0x080082e1
 8008280:	080082eb 	.word	0x080082eb
 8008284:	080082d7 	.word	0x080082d7
 8008288:	080082eb 	.word	0x080082eb
 800828c:	080082ab 	.word	0x080082ab
 8008290:	080082a1 	.word	0x080082a1
 8008294:	080082eb 	.word	0x080082eb
 8008298:	080082c3 	.word	0x080082c3
 800829c:	080082b5 	.word	0x080082b5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80082a0:	6839      	ldr	r1, [r7, #0]
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 fa3c 	bl	8008720 <USBD_GetDescriptor>
          break;
 80082a8:	e024      	b.n	80082f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80082aa:	6839      	ldr	r1, [r7, #0]
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 fba1 	bl	80089f4 <USBD_SetAddress>
          break;
 80082b2:	e01f      	b.n	80082f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80082b4:	6839      	ldr	r1, [r7, #0]
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 fbe0 	bl	8008a7c <USBD_SetConfig>
 80082bc:	4603      	mov	r3, r0
 80082be:	73fb      	strb	r3, [r7, #15]
          break;
 80082c0:	e018      	b.n	80082f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80082c2:	6839      	ldr	r1, [r7, #0]
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 fc83 	bl	8008bd0 <USBD_GetConfig>
          break;
 80082ca:	e013      	b.n	80082f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80082cc:	6839      	ldr	r1, [r7, #0]
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 fcb4 	bl	8008c3c <USBD_GetStatus>
          break;
 80082d4:	e00e      	b.n	80082f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80082d6:	6839      	ldr	r1, [r7, #0]
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 fce3 	bl	8008ca4 <USBD_SetFeature>
          break;
 80082de:	e009      	b.n	80082f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80082e0:	6839      	ldr	r1, [r7, #0]
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 fd07 	bl	8008cf6 <USBD_ClrFeature>
          break;
 80082e8:	e004      	b.n	80082f4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80082ea:	6839      	ldr	r1, [r7, #0]
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 fd5e 	bl	8008dae <USBD_CtlError>
          break;
 80082f2:	bf00      	nop
      }
      break;
 80082f4:	e004      	b.n	8008300 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80082f6:	6839      	ldr	r1, [r7, #0]
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 fd58 	bl	8008dae <USBD_CtlError>
      break;
 80082fe:	bf00      	nop
  }

  return ret;
 8008300:	7bfb      	ldrb	r3, [r7, #15]
}
 8008302:	4618      	mov	r0, r3
 8008304:	3710      	adds	r7, #16
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
 800830a:	bf00      	nop

0800830c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008316:	2300      	movs	r3, #0
 8008318:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008322:	2b40      	cmp	r3, #64	; 0x40
 8008324:	d005      	beq.n	8008332 <USBD_StdItfReq+0x26>
 8008326:	2b40      	cmp	r3, #64	; 0x40
 8008328:	d852      	bhi.n	80083d0 <USBD_StdItfReq+0xc4>
 800832a:	2b00      	cmp	r3, #0
 800832c:	d001      	beq.n	8008332 <USBD_StdItfReq+0x26>
 800832e:	2b20      	cmp	r3, #32
 8008330:	d14e      	bne.n	80083d0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008338:	b2db      	uxtb	r3, r3
 800833a:	3b01      	subs	r3, #1
 800833c:	2b02      	cmp	r3, #2
 800833e:	d840      	bhi.n	80083c2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	889b      	ldrh	r3, [r3, #4]
 8008344:	b2db      	uxtb	r3, r3
 8008346:	2b01      	cmp	r3, #1
 8008348:	d836      	bhi.n	80083b8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	889b      	ldrh	r3, [r3, #4]
 800834e:	b2db      	uxtb	r3, r3
 8008350:	4619      	mov	r1, r3
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f7ff fed9 	bl	800810a <USBD_CoreFindIF>
 8008358:	4603      	mov	r3, r0
 800835a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800835c:	7bbb      	ldrb	r3, [r7, #14]
 800835e:	2bff      	cmp	r3, #255	; 0xff
 8008360:	d01d      	beq.n	800839e <USBD_StdItfReq+0x92>
 8008362:	7bbb      	ldrb	r3, [r7, #14]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d11a      	bne.n	800839e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008368:	7bba      	ldrb	r2, [r7, #14]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	32ae      	adds	r2, #174	; 0xae
 800836e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008372:	689b      	ldr	r3, [r3, #8]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d00f      	beq.n	8008398 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008378:	7bba      	ldrb	r2, [r7, #14]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008380:	7bba      	ldrb	r2, [r7, #14]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	32ae      	adds	r2, #174	; 0xae
 8008386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	6839      	ldr	r1, [r7, #0]
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	4798      	blx	r3
 8008392:	4603      	mov	r3, r0
 8008394:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008396:	e004      	b.n	80083a2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008398:	2303      	movs	r3, #3
 800839a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800839c:	e001      	b.n	80083a2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800839e:	2303      	movs	r3, #3
 80083a0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	88db      	ldrh	r3, [r3, #6]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d110      	bne.n	80083cc <USBD_StdItfReq+0xc0>
 80083aa:	7bfb      	ldrb	r3, [r7, #15]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d10d      	bne.n	80083cc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f000 fdc7 	bl	8008f44 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80083b6:	e009      	b.n	80083cc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80083b8:	6839      	ldr	r1, [r7, #0]
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 fcf7 	bl	8008dae <USBD_CtlError>
          break;
 80083c0:	e004      	b.n	80083cc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80083c2:	6839      	ldr	r1, [r7, #0]
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f000 fcf2 	bl	8008dae <USBD_CtlError>
          break;
 80083ca:	e000      	b.n	80083ce <USBD_StdItfReq+0xc2>
          break;
 80083cc:	bf00      	nop
      }
      break;
 80083ce:	e004      	b.n	80083da <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80083d0:	6839      	ldr	r1, [r7, #0]
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 fceb 	bl	8008dae <USBD_CtlError>
      break;
 80083d8:	bf00      	nop
  }

  return ret;
 80083da:	7bfb      	ldrb	r3, [r7, #15]
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3710      	adds	r7, #16
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80083ee:	2300      	movs	r3, #0
 80083f0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	889b      	ldrh	r3, [r3, #4]
 80083f6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008400:	2b40      	cmp	r3, #64	; 0x40
 8008402:	d007      	beq.n	8008414 <USBD_StdEPReq+0x30>
 8008404:	2b40      	cmp	r3, #64	; 0x40
 8008406:	f200 817f 	bhi.w	8008708 <USBD_StdEPReq+0x324>
 800840a:	2b00      	cmp	r3, #0
 800840c:	d02a      	beq.n	8008464 <USBD_StdEPReq+0x80>
 800840e:	2b20      	cmp	r3, #32
 8008410:	f040 817a 	bne.w	8008708 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008414:	7bbb      	ldrb	r3, [r7, #14]
 8008416:	4619      	mov	r1, r3
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f7ff fe83 	bl	8008124 <USBD_CoreFindEP>
 800841e:	4603      	mov	r3, r0
 8008420:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008422:	7b7b      	ldrb	r3, [r7, #13]
 8008424:	2bff      	cmp	r3, #255	; 0xff
 8008426:	f000 8174 	beq.w	8008712 <USBD_StdEPReq+0x32e>
 800842a:	7b7b      	ldrb	r3, [r7, #13]
 800842c:	2b00      	cmp	r3, #0
 800842e:	f040 8170 	bne.w	8008712 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008432:	7b7a      	ldrb	r2, [r7, #13]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800843a:	7b7a      	ldrb	r2, [r7, #13]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	32ae      	adds	r2, #174	; 0xae
 8008440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008444:	689b      	ldr	r3, [r3, #8]
 8008446:	2b00      	cmp	r3, #0
 8008448:	f000 8163 	beq.w	8008712 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800844c:	7b7a      	ldrb	r2, [r7, #13]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	32ae      	adds	r2, #174	; 0xae
 8008452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	6839      	ldr	r1, [r7, #0]
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	4798      	blx	r3
 800845e:	4603      	mov	r3, r0
 8008460:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008462:	e156      	b.n	8008712 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	785b      	ldrb	r3, [r3, #1]
 8008468:	2b03      	cmp	r3, #3
 800846a:	d008      	beq.n	800847e <USBD_StdEPReq+0x9a>
 800846c:	2b03      	cmp	r3, #3
 800846e:	f300 8145 	bgt.w	80086fc <USBD_StdEPReq+0x318>
 8008472:	2b00      	cmp	r3, #0
 8008474:	f000 809b 	beq.w	80085ae <USBD_StdEPReq+0x1ca>
 8008478:	2b01      	cmp	r3, #1
 800847a:	d03c      	beq.n	80084f6 <USBD_StdEPReq+0x112>
 800847c:	e13e      	b.n	80086fc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008484:	b2db      	uxtb	r3, r3
 8008486:	2b02      	cmp	r3, #2
 8008488:	d002      	beq.n	8008490 <USBD_StdEPReq+0xac>
 800848a:	2b03      	cmp	r3, #3
 800848c:	d016      	beq.n	80084bc <USBD_StdEPReq+0xd8>
 800848e:	e02c      	b.n	80084ea <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008490:	7bbb      	ldrb	r3, [r7, #14]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d00d      	beq.n	80084b2 <USBD_StdEPReq+0xce>
 8008496:	7bbb      	ldrb	r3, [r7, #14]
 8008498:	2b80      	cmp	r3, #128	; 0x80
 800849a:	d00a      	beq.n	80084b2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800849c:	7bbb      	ldrb	r3, [r7, #14]
 800849e:	4619      	mov	r1, r3
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f001 f96d 	bl	8009780 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80084a6:	2180      	movs	r1, #128	; 0x80
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f001 f969 	bl	8009780 <USBD_LL_StallEP>
 80084ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80084b0:	e020      	b.n	80084f4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80084b2:	6839      	ldr	r1, [r7, #0]
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 fc7a 	bl	8008dae <USBD_CtlError>
              break;
 80084ba:	e01b      	b.n	80084f4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	885b      	ldrh	r3, [r3, #2]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d10e      	bne.n	80084e2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80084c4:	7bbb      	ldrb	r3, [r7, #14]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d00b      	beq.n	80084e2 <USBD_StdEPReq+0xfe>
 80084ca:	7bbb      	ldrb	r3, [r7, #14]
 80084cc:	2b80      	cmp	r3, #128	; 0x80
 80084ce:	d008      	beq.n	80084e2 <USBD_StdEPReq+0xfe>
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	88db      	ldrh	r3, [r3, #6]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d104      	bne.n	80084e2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80084d8:	7bbb      	ldrb	r3, [r7, #14]
 80084da:	4619      	mov	r1, r3
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f001 f94f 	bl	8009780 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 fd2e 	bl	8008f44 <USBD_CtlSendStatus>

              break;
 80084e8:	e004      	b.n	80084f4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80084ea:	6839      	ldr	r1, [r7, #0]
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 fc5e 	bl	8008dae <USBD_CtlError>
              break;
 80084f2:	bf00      	nop
          }
          break;
 80084f4:	e107      	b.n	8008706 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084fc:	b2db      	uxtb	r3, r3
 80084fe:	2b02      	cmp	r3, #2
 8008500:	d002      	beq.n	8008508 <USBD_StdEPReq+0x124>
 8008502:	2b03      	cmp	r3, #3
 8008504:	d016      	beq.n	8008534 <USBD_StdEPReq+0x150>
 8008506:	e04b      	b.n	80085a0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008508:	7bbb      	ldrb	r3, [r7, #14]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d00d      	beq.n	800852a <USBD_StdEPReq+0x146>
 800850e:	7bbb      	ldrb	r3, [r7, #14]
 8008510:	2b80      	cmp	r3, #128	; 0x80
 8008512:	d00a      	beq.n	800852a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008514:	7bbb      	ldrb	r3, [r7, #14]
 8008516:	4619      	mov	r1, r3
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f001 f931 	bl	8009780 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800851e:	2180      	movs	r1, #128	; 0x80
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f001 f92d 	bl	8009780 <USBD_LL_StallEP>
 8008526:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008528:	e040      	b.n	80085ac <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800852a:	6839      	ldr	r1, [r7, #0]
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f000 fc3e 	bl	8008dae <USBD_CtlError>
              break;
 8008532:	e03b      	b.n	80085ac <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	885b      	ldrh	r3, [r3, #2]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d136      	bne.n	80085aa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800853c:	7bbb      	ldrb	r3, [r7, #14]
 800853e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008542:	2b00      	cmp	r3, #0
 8008544:	d004      	beq.n	8008550 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008546:	7bbb      	ldrb	r3, [r7, #14]
 8008548:	4619      	mov	r1, r3
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f001 f937 	bl	80097be <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 fcf7 	bl	8008f44 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008556:	7bbb      	ldrb	r3, [r7, #14]
 8008558:	4619      	mov	r1, r3
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f7ff fde2 	bl	8008124 <USBD_CoreFindEP>
 8008560:	4603      	mov	r3, r0
 8008562:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008564:	7b7b      	ldrb	r3, [r7, #13]
 8008566:	2bff      	cmp	r3, #255	; 0xff
 8008568:	d01f      	beq.n	80085aa <USBD_StdEPReq+0x1c6>
 800856a:	7b7b      	ldrb	r3, [r7, #13]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d11c      	bne.n	80085aa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008570:	7b7a      	ldrb	r2, [r7, #13]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008578:	7b7a      	ldrb	r2, [r7, #13]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	32ae      	adds	r2, #174	; 0xae
 800857e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008582:	689b      	ldr	r3, [r3, #8]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d010      	beq.n	80085aa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008588:	7b7a      	ldrb	r2, [r7, #13]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	32ae      	adds	r2, #174	; 0xae
 800858e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	6839      	ldr	r1, [r7, #0]
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	4798      	blx	r3
 800859a:	4603      	mov	r3, r0
 800859c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800859e:	e004      	b.n	80085aa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80085a0:	6839      	ldr	r1, [r7, #0]
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 fc03 	bl	8008dae <USBD_CtlError>
              break;
 80085a8:	e000      	b.n	80085ac <USBD_StdEPReq+0x1c8>
              break;
 80085aa:	bf00      	nop
          }
          break;
 80085ac:	e0ab      	b.n	8008706 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085b4:	b2db      	uxtb	r3, r3
 80085b6:	2b02      	cmp	r3, #2
 80085b8:	d002      	beq.n	80085c0 <USBD_StdEPReq+0x1dc>
 80085ba:	2b03      	cmp	r3, #3
 80085bc:	d032      	beq.n	8008624 <USBD_StdEPReq+0x240>
 80085be:	e097      	b.n	80086f0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085c0:	7bbb      	ldrb	r3, [r7, #14]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d007      	beq.n	80085d6 <USBD_StdEPReq+0x1f2>
 80085c6:	7bbb      	ldrb	r3, [r7, #14]
 80085c8:	2b80      	cmp	r3, #128	; 0x80
 80085ca:	d004      	beq.n	80085d6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80085cc:	6839      	ldr	r1, [r7, #0]
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 fbed 	bl	8008dae <USBD_CtlError>
                break;
 80085d4:	e091      	b.n	80086fa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	da0b      	bge.n	80085f6 <USBD_StdEPReq+0x212>
 80085de:	7bbb      	ldrb	r3, [r7, #14]
 80085e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085e4:	4613      	mov	r3, r2
 80085e6:	009b      	lsls	r3, r3, #2
 80085e8:	4413      	add	r3, r2
 80085ea:	009b      	lsls	r3, r3, #2
 80085ec:	3310      	adds	r3, #16
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	4413      	add	r3, r2
 80085f2:	3304      	adds	r3, #4
 80085f4:	e00b      	b.n	800860e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80085f6:	7bbb      	ldrb	r3, [r7, #14]
 80085f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085fc:	4613      	mov	r3, r2
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	4413      	add	r3, r2
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008608:	687a      	ldr	r2, [r7, #4]
 800860a:	4413      	add	r3, r2
 800860c:	3304      	adds	r3, #4
 800860e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	2200      	movs	r2, #0
 8008614:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	2202      	movs	r2, #2
 800861a:	4619      	mov	r1, r3
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 fc37 	bl	8008e90 <USBD_CtlSendData>
              break;
 8008622:	e06a      	b.n	80086fa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008624:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008628:	2b00      	cmp	r3, #0
 800862a:	da11      	bge.n	8008650 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800862c:	7bbb      	ldrb	r3, [r7, #14]
 800862e:	f003 020f 	and.w	r2, r3, #15
 8008632:	6879      	ldr	r1, [r7, #4]
 8008634:	4613      	mov	r3, r2
 8008636:	009b      	lsls	r3, r3, #2
 8008638:	4413      	add	r3, r2
 800863a:	009b      	lsls	r3, r3, #2
 800863c:	440b      	add	r3, r1
 800863e:	3324      	adds	r3, #36	; 0x24
 8008640:	881b      	ldrh	r3, [r3, #0]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d117      	bne.n	8008676 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008646:	6839      	ldr	r1, [r7, #0]
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 fbb0 	bl	8008dae <USBD_CtlError>
                  break;
 800864e:	e054      	b.n	80086fa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008650:	7bbb      	ldrb	r3, [r7, #14]
 8008652:	f003 020f 	and.w	r2, r3, #15
 8008656:	6879      	ldr	r1, [r7, #4]
 8008658:	4613      	mov	r3, r2
 800865a:	009b      	lsls	r3, r3, #2
 800865c:	4413      	add	r3, r2
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	440b      	add	r3, r1
 8008662:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008666:	881b      	ldrh	r3, [r3, #0]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d104      	bne.n	8008676 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800866c:	6839      	ldr	r1, [r7, #0]
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 fb9d 	bl	8008dae <USBD_CtlError>
                  break;
 8008674:	e041      	b.n	80086fa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008676:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800867a:	2b00      	cmp	r3, #0
 800867c:	da0b      	bge.n	8008696 <USBD_StdEPReq+0x2b2>
 800867e:	7bbb      	ldrb	r3, [r7, #14]
 8008680:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008684:	4613      	mov	r3, r2
 8008686:	009b      	lsls	r3, r3, #2
 8008688:	4413      	add	r3, r2
 800868a:	009b      	lsls	r3, r3, #2
 800868c:	3310      	adds	r3, #16
 800868e:	687a      	ldr	r2, [r7, #4]
 8008690:	4413      	add	r3, r2
 8008692:	3304      	adds	r3, #4
 8008694:	e00b      	b.n	80086ae <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008696:	7bbb      	ldrb	r3, [r7, #14]
 8008698:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800869c:	4613      	mov	r3, r2
 800869e:	009b      	lsls	r3, r3, #2
 80086a0:	4413      	add	r3, r2
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	4413      	add	r3, r2
 80086ac:	3304      	adds	r3, #4
 80086ae:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80086b0:	7bbb      	ldrb	r3, [r7, #14]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d002      	beq.n	80086bc <USBD_StdEPReq+0x2d8>
 80086b6:	7bbb      	ldrb	r3, [r7, #14]
 80086b8:	2b80      	cmp	r3, #128	; 0x80
 80086ba:	d103      	bne.n	80086c4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	2200      	movs	r2, #0
 80086c0:	601a      	str	r2, [r3, #0]
 80086c2:	e00e      	b.n	80086e2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80086c4:	7bbb      	ldrb	r3, [r7, #14]
 80086c6:	4619      	mov	r1, r3
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f001 f897 	bl	80097fc <USBD_LL_IsStallEP>
 80086ce:	4603      	mov	r3, r0
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d003      	beq.n	80086dc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	2201      	movs	r2, #1
 80086d8:	601a      	str	r2, [r3, #0]
 80086da:	e002      	b.n	80086e2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	2200      	movs	r2, #0
 80086e0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	2202      	movs	r2, #2
 80086e6:	4619      	mov	r1, r3
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 fbd1 	bl	8008e90 <USBD_CtlSendData>
              break;
 80086ee:	e004      	b.n	80086fa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80086f0:	6839      	ldr	r1, [r7, #0]
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 fb5b 	bl	8008dae <USBD_CtlError>
              break;
 80086f8:	bf00      	nop
          }
          break;
 80086fa:	e004      	b.n	8008706 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80086fc:	6839      	ldr	r1, [r7, #0]
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f000 fb55 	bl	8008dae <USBD_CtlError>
          break;
 8008704:	bf00      	nop
      }
      break;
 8008706:	e005      	b.n	8008714 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008708:	6839      	ldr	r1, [r7, #0]
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 fb4f 	bl	8008dae <USBD_CtlError>
      break;
 8008710:	e000      	b.n	8008714 <USBD_StdEPReq+0x330>
      break;
 8008712:	bf00      	nop
  }

  return ret;
 8008714:	7bfb      	ldrb	r3, [r7, #15]
}
 8008716:	4618      	mov	r0, r3
 8008718:	3710      	adds	r7, #16
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
	...

08008720 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800872a:	2300      	movs	r3, #0
 800872c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800872e:	2300      	movs	r3, #0
 8008730:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008732:	2300      	movs	r3, #0
 8008734:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	885b      	ldrh	r3, [r3, #2]
 800873a:	0a1b      	lsrs	r3, r3, #8
 800873c:	b29b      	uxth	r3, r3
 800873e:	3b01      	subs	r3, #1
 8008740:	2b06      	cmp	r3, #6
 8008742:	f200 8128 	bhi.w	8008996 <USBD_GetDescriptor+0x276>
 8008746:	a201      	add	r2, pc, #4	; (adr r2, 800874c <USBD_GetDescriptor+0x2c>)
 8008748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800874c:	08008769 	.word	0x08008769
 8008750:	08008781 	.word	0x08008781
 8008754:	080087c1 	.word	0x080087c1
 8008758:	08008997 	.word	0x08008997
 800875c:	08008997 	.word	0x08008997
 8008760:	08008937 	.word	0x08008937
 8008764:	08008963 	.word	0x08008963
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	7c12      	ldrb	r2, [r2, #16]
 8008774:	f107 0108 	add.w	r1, r7, #8
 8008778:	4610      	mov	r0, r2
 800877a:	4798      	blx	r3
 800877c:	60f8      	str	r0, [r7, #12]
      break;
 800877e:	e112      	b.n	80089a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	7c1b      	ldrb	r3, [r3, #16]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d10d      	bne.n	80087a4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800878e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008790:	f107 0208 	add.w	r2, r7, #8
 8008794:	4610      	mov	r0, r2
 8008796:	4798      	blx	r3
 8008798:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	3301      	adds	r3, #1
 800879e:	2202      	movs	r2, #2
 80087a0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80087a2:	e100      	b.n	80089a6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ac:	f107 0208 	add.w	r2, r7, #8
 80087b0:	4610      	mov	r0, r2
 80087b2:	4798      	blx	r3
 80087b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	3301      	adds	r3, #1
 80087ba:	2202      	movs	r2, #2
 80087bc:	701a      	strb	r2, [r3, #0]
      break;
 80087be:	e0f2      	b.n	80089a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	885b      	ldrh	r3, [r3, #2]
 80087c4:	b2db      	uxtb	r3, r3
 80087c6:	2b05      	cmp	r3, #5
 80087c8:	f200 80ac 	bhi.w	8008924 <USBD_GetDescriptor+0x204>
 80087cc:	a201      	add	r2, pc, #4	; (adr r2, 80087d4 <USBD_GetDescriptor+0xb4>)
 80087ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d2:	bf00      	nop
 80087d4:	080087ed 	.word	0x080087ed
 80087d8:	08008821 	.word	0x08008821
 80087dc:	08008855 	.word	0x08008855
 80087e0:	08008889 	.word	0x08008889
 80087e4:	080088bd 	.word	0x080088bd
 80087e8:	080088f1 	.word	0x080088f1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d00b      	beq.n	8008810 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	7c12      	ldrb	r2, [r2, #16]
 8008804:	f107 0108 	add.w	r1, r7, #8
 8008808:	4610      	mov	r0, r2
 800880a:	4798      	blx	r3
 800880c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800880e:	e091      	b.n	8008934 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008810:	6839      	ldr	r1, [r7, #0]
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 facb 	bl	8008dae <USBD_CtlError>
            err++;
 8008818:	7afb      	ldrb	r3, [r7, #11]
 800881a:	3301      	adds	r3, #1
 800881c:	72fb      	strb	r3, [r7, #11]
          break;
 800881e:	e089      	b.n	8008934 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d00b      	beq.n	8008844 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008832:	689b      	ldr	r3, [r3, #8]
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	7c12      	ldrb	r2, [r2, #16]
 8008838:	f107 0108 	add.w	r1, r7, #8
 800883c:	4610      	mov	r0, r2
 800883e:	4798      	blx	r3
 8008840:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008842:	e077      	b.n	8008934 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008844:	6839      	ldr	r1, [r7, #0]
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 fab1 	bl	8008dae <USBD_CtlError>
            err++;
 800884c:	7afb      	ldrb	r3, [r7, #11]
 800884e:	3301      	adds	r3, #1
 8008850:	72fb      	strb	r3, [r7, #11]
          break;
 8008852:	e06f      	b.n	8008934 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800885a:	68db      	ldr	r3, [r3, #12]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d00b      	beq.n	8008878 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	7c12      	ldrb	r2, [r2, #16]
 800886c:	f107 0108 	add.w	r1, r7, #8
 8008870:	4610      	mov	r0, r2
 8008872:	4798      	blx	r3
 8008874:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008876:	e05d      	b.n	8008934 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008878:	6839      	ldr	r1, [r7, #0]
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 fa97 	bl	8008dae <USBD_CtlError>
            err++;
 8008880:	7afb      	ldrb	r3, [r7, #11]
 8008882:	3301      	adds	r3, #1
 8008884:	72fb      	strb	r3, [r7, #11]
          break;
 8008886:	e055      	b.n	8008934 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800888e:	691b      	ldr	r3, [r3, #16]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d00b      	beq.n	80088ac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800889a:	691b      	ldr	r3, [r3, #16]
 800889c:	687a      	ldr	r2, [r7, #4]
 800889e:	7c12      	ldrb	r2, [r2, #16]
 80088a0:	f107 0108 	add.w	r1, r7, #8
 80088a4:	4610      	mov	r0, r2
 80088a6:	4798      	blx	r3
 80088a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088aa:	e043      	b.n	8008934 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088ac:	6839      	ldr	r1, [r7, #0]
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f000 fa7d 	bl	8008dae <USBD_CtlError>
            err++;
 80088b4:	7afb      	ldrb	r3, [r7, #11]
 80088b6:	3301      	adds	r3, #1
 80088b8:	72fb      	strb	r3, [r7, #11]
          break;
 80088ba:	e03b      	b.n	8008934 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088c2:	695b      	ldr	r3, [r3, #20]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d00b      	beq.n	80088e0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088ce:	695b      	ldr	r3, [r3, #20]
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	7c12      	ldrb	r2, [r2, #16]
 80088d4:	f107 0108 	add.w	r1, r7, #8
 80088d8:	4610      	mov	r0, r2
 80088da:	4798      	blx	r3
 80088dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088de:	e029      	b.n	8008934 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088e0:	6839      	ldr	r1, [r7, #0]
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 fa63 	bl	8008dae <USBD_CtlError>
            err++;
 80088e8:	7afb      	ldrb	r3, [r7, #11]
 80088ea:	3301      	adds	r3, #1
 80088ec:	72fb      	strb	r3, [r7, #11]
          break;
 80088ee:	e021      	b.n	8008934 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088f6:	699b      	ldr	r3, [r3, #24]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d00b      	beq.n	8008914 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008902:	699b      	ldr	r3, [r3, #24]
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	7c12      	ldrb	r2, [r2, #16]
 8008908:	f107 0108 	add.w	r1, r7, #8
 800890c:	4610      	mov	r0, r2
 800890e:	4798      	blx	r3
 8008910:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008912:	e00f      	b.n	8008934 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008914:	6839      	ldr	r1, [r7, #0]
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 fa49 	bl	8008dae <USBD_CtlError>
            err++;
 800891c:	7afb      	ldrb	r3, [r7, #11]
 800891e:	3301      	adds	r3, #1
 8008920:	72fb      	strb	r3, [r7, #11]
          break;
 8008922:	e007      	b.n	8008934 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008924:	6839      	ldr	r1, [r7, #0]
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 fa41 	bl	8008dae <USBD_CtlError>
          err++;
 800892c:	7afb      	ldrb	r3, [r7, #11]
 800892e:	3301      	adds	r3, #1
 8008930:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008932:	bf00      	nop
      }
      break;
 8008934:	e037      	b.n	80089a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	7c1b      	ldrb	r3, [r3, #16]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d109      	bne.n	8008952 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008946:	f107 0208 	add.w	r2, r7, #8
 800894a:	4610      	mov	r0, r2
 800894c:	4798      	blx	r3
 800894e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008950:	e029      	b.n	80089a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008952:	6839      	ldr	r1, [r7, #0]
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 fa2a 	bl	8008dae <USBD_CtlError>
        err++;
 800895a:	7afb      	ldrb	r3, [r7, #11]
 800895c:	3301      	adds	r3, #1
 800895e:	72fb      	strb	r3, [r7, #11]
      break;
 8008960:	e021      	b.n	80089a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	7c1b      	ldrb	r3, [r3, #16]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d10d      	bne.n	8008986 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008972:	f107 0208 	add.w	r2, r7, #8
 8008976:	4610      	mov	r0, r2
 8008978:	4798      	blx	r3
 800897a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	3301      	adds	r3, #1
 8008980:	2207      	movs	r2, #7
 8008982:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008984:	e00f      	b.n	80089a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008986:	6839      	ldr	r1, [r7, #0]
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f000 fa10 	bl	8008dae <USBD_CtlError>
        err++;
 800898e:	7afb      	ldrb	r3, [r7, #11]
 8008990:	3301      	adds	r3, #1
 8008992:	72fb      	strb	r3, [r7, #11]
      break;
 8008994:	e007      	b.n	80089a6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008996:	6839      	ldr	r1, [r7, #0]
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 fa08 	bl	8008dae <USBD_CtlError>
      err++;
 800899e:	7afb      	ldrb	r3, [r7, #11]
 80089a0:	3301      	adds	r3, #1
 80089a2:	72fb      	strb	r3, [r7, #11]
      break;
 80089a4:	bf00      	nop
  }

  if (err != 0U)
 80089a6:	7afb      	ldrb	r3, [r7, #11]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d11e      	bne.n	80089ea <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	88db      	ldrh	r3, [r3, #6]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d016      	beq.n	80089e2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80089b4:	893b      	ldrh	r3, [r7, #8]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d00e      	beq.n	80089d8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	88da      	ldrh	r2, [r3, #6]
 80089be:	893b      	ldrh	r3, [r7, #8]
 80089c0:	4293      	cmp	r3, r2
 80089c2:	bf28      	it	cs
 80089c4:	4613      	movcs	r3, r2
 80089c6:	b29b      	uxth	r3, r3
 80089c8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80089ca:	893b      	ldrh	r3, [r7, #8]
 80089cc:	461a      	mov	r2, r3
 80089ce:	68f9      	ldr	r1, [r7, #12]
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f000 fa5d 	bl	8008e90 <USBD_CtlSendData>
 80089d6:	e009      	b.n	80089ec <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80089d8:	6839      	ldr	r1, [r7, #0]
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 f9e7 	bl	8008dae <USBD_CtlError>
 80089e0:	e004      	b.n	80089ec <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 faae 	bl	8008f44 <USBD_CtlSendStatus>
 80089e8:	e000      	b.n	80089ec <USBD_GetDescriptor+0x2cc>
    return;
 80089ea:	bf00      	nop
  }
}
 80089ec:	3710      	adds	r7, #16
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}
 80089f2:	bf00      	nop

080089f4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b084      	sub	sp, #16
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	889b      	ldrh	r3, [r3, #4]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d131      	bne.n	8008a6a <USBD_SetAddress+0x76>
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	88db      	ldrh	r3, [r3, #6]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d12d      	bne.n	8008a6a <USBD_SetAddress+0x76>
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	885b      	ldrh	r3, [r3, #2]
 8008a12:	2b7f      	cmp	r3, #127	; 0x7f
 8008a14:	d829      	bhi.n	8008a6a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	885b      	ldrh	r3, [r3, #2]
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a20:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a28:	b2db      	uxtb	r3, r3
 8008a2a:	2b03      	cmp	r3, #3
 8008a2c:	d104      	bne.n	8008a38 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008a2e:	6839      	ldr	r1, [r7, #0]
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 f9bc 	bl	8008dae <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a36:	e01d      	b.n	8008a74 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	7bfa      	ldrb	r2, [r7, #15]
 8008a3c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008a40:	7bfb      	ldrb	r3, [r7, #15]
 8008a42:	4619      	mov	r1, r3
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f000 ff05 	bl	8009854 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f000 fa7a 	bl	8008f44 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008a50:	7bfb      	ldrb	r3, [r7, #15]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d004      	beq.n	8008a60 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2202      	movs	r2, #2
 8008a5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a5e:	e009      	b.n	8008a74 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2201      	movs	r2, #1
 8008a64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a68:	e004      	b.n	8008a74 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008a6a:	6839      	ldr	r1, [r7, #0]
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f000 f99e 	bl	8008dae <USBD_CtlError>
  }
}
 8008a72:	bf00      	nop
 8008a74:	bf00      	nop
 8008a76:	3710      	adds	r7, #16
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b084      	sub	sp, #16
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a86:	2300      	movs	r3, #0
 8008a88:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	885b      	ldrh	r3, [r3, #2]
 8008a8e:	b2da      	uxtb	r2, r3
 8008a90:	4b4e      	ldr	r3, [pc, #312]	; (8008bcc <USBD_SetConfig+0x150>)
 8008a92:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008a94:	4b4d      	ldr	r3, [pc, #308]	; (8008bcc <USBD_SetConfig+0x150>)
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	2b01      	cmp	r3, #1
 8008a9a:	d905      	bls.n	8008aa8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008a9c:	6839      	ldr	r1, [r7, #0]
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 f985 	bl	8008dae <USBD_CtlError>
    return USBD_FAIL;
 8008aa4:	2303      	movs	r3, #3
 8008aa6:	e08c      	b.n	8008bc2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008aae:	b2db      	uxtb	r3, r3
 8008ab0:	2b02      	cmp	r3, #2
 8008ab2:	d002      	beq.n	8008aba <USBD_SetConfig+0x3e>
 8008ab4:	2b03      	cmp	r3, #3
 8008ab6:	d029      	beq.n	8008b0c <USBD_SetConfig+0x90>
 8008ab8:	e075      	b.n	8008ba6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008aba:	4b44      	ldr	r3, [pc, #272]	; (8008bcc <USBD_SetConfig+0x150>)
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d020      	beq.n	8008b04 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008ac2:	4b42      	ldr	r3, [pc, #264]	; (8008bcc <USBD_SetConfig+0x150>)
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008acc:	4b3f      	ldr	r3, [pc, #252]	; (8008bcc <USBD_SetConfig+0x150>)
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f7fe ffe7 	bl	8007aa6 <USBD_SetClassConfig>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008adc:	7bfb      	ldrb	r3, [r7, #15]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d008      	beq.n	8008af4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008ae2:	6839      	ldr	r1, [r7, #0]
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 f962 	bl	8008dae <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2202      	movs	r2, #2
 8008aee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008af2:	e065      	b.n	8008bc0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f000 fa25 	bl	8008f44 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2203      	movs	r2, #3
 8008afe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008b02:	e05d      	b.n	8008bc0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 fa1d 	bl	8008f44 <USBD_CtlSendStatus>
      break;
 8008b0a:	e059      	b.n	8008bc0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008b0c:	4b2f      	ldr	r3, [pc, #188]	; (8008bcc <USBD_SetConfig+0x150>)
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d112      	bne.n	8008b3a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2202      	movs	r2, #2
 8008b18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008b1c:	4b2b      	ldr	r3, [pc, #172]	; (8008bcc <USBD_SetConfig+0x150>)
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	461a      	mov	r2, r3
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008b26:	4b29      	ldr	r3, [pc, #164]	; (8008bcc <USBD_SetConfig+0x150>)
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	4619      	mov	r1, r3
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f7fe ffd6 	bl	8007ade <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f000 fa06 	bl	8008f44 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008b38:	e042      	b.n	8008bc0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008b3a:	4b24      	ldr	r3, [pc, #144]	; (8008bcc <USBD_SetConfig+0x150>)
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	461a      	mov	r2, r3
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d02a      	beq.n	8008b9e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	b2db      	uxtb	r3, r3
 8008b4e:	4619      	mov	r1, r3
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f7fe ffc4 	bl	8007ade <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008b56:	4b1d      	ldr	r3, [pc, #116]	; (8008bcc <USBD_SetConfig+0x150>)
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008b60:	4b1a      	ldr	r3, [pc, #104]	; (8008bcc <USBD_SetConfig+0x150>)
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	4619      	mov	r1, r3
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f7fe ff9d 	bl	8007aa6 <USBD_SetClassConfig>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008b70:	7bfb      	ldrb	r3, [r7, #15]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d00f      	beq.n	8008b96 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008b76:	6839      	ldr	r1, [r7, #0]
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f000 f918 	bl	8008dae <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	4619      	mov	r1, r3
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f7fe ffa9 	bl	8007ade <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2202      	movs	r2, #2
 8008b90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008b94:	e014      	b.n	8008bc0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 f9d4 	bl	8008f44 <USBD_CtlSendStatus>
      break;
 8008b9c:	e010      	b.n	8008bc0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 f9d0 	bl	8008f44 <USBD_CtlSendStatus>
      break;
 8008ba4:	e00c      	b.n	8008bc0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008ba6:	6839      	ldr	r1, [r7, #0]
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 f900 	bl	8008dae <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008bae:	4b07      	ldr	r3, [pc, #28]	; (8008bcc <USBD_SetConfig+0x150>)
 8008bb0:	781b      	ldrb	r3, [r3, #0]
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f7fe ff92 	bl	8007ade <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008bba:	2303      	movs	r3, #3
 8008bbc:	73fb      	strb	r3, [r7, #15]
      break;
 8008bbe:	bf00      	nop
  }

  return ret;
 8008bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3710      	adds	r7, #16
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	20000264 	.word	0x20000264

08008bd0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	88db      	ldrh	r3, [r3, #6]
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	d004      	beq.n	8008bec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008be2:	6839      	ldr	r1, [r7, #0]
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f000 f8e2 	bl	8008dae <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008bea:	e023      	b.n	8008c34 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bf2:	b2db      	uxtb	r3, r3
 8008bf4:	2b02      	cmp	r3, #2
 8008bf6:	dc02      	bgt.n	8008bfe <USBD_GetConfig+0x2e>
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	dc03      	bgt.n	8008c04 <USBD_GetConfig+0x34>
 8008bfc:	e015      	b.n	8008c2a <USBD_GetConfig+0x5a>
 8008bfe:	2b03      	cmp	r3, #3
 8008c00:	d00b      	beq.n	8008c1a <USBD_GetConfig+0x4a>
 8008c02:	e012      	b.n	8008c2a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2200      	movs	r2, #0
 8008c08:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	3308      	adds	r3, #8
 8008c0e:	2201      	movs	r2, #1
 8008c10:	4619      	mov	r1, r3
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 f93c 	bl	8008e90 <USBD_CtlSendData>
        break;
 8008c18:	e00c      	b.n	8008c34 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	3304      	adds	r3, #4
 8008c1e:	2201      	movs	r2, #1
 8008c20:	4619      	mov	r1, r3
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f000 f934 	bl	8008e90 <USBD_CtlSendData>
        break;
 8008c28:	e004      	b.n	8008c34 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008c2a:	6839      	ldr	r1, [r7, #0]
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f000 f8be 	bl	8008dae <USBD_CtlError>
        break;
 8008c32:	bf00      	nop
}
 8008c34:	bf00      	nop
 8008c36:	3708      	adds	r7, #8
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b082      	sub	sp, #8
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	3b01      	subs	r3, #1
 8008c50:	2b02      	cmp	r3, #2
 8008c52:	d81e      	bhi.n	8008c92 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	88db      	ldrh	r3, [r3, #6]
 8008c58:	2b02      	cmp	r3, #2
 8008c5a:	d004      	beq.n	8008c66 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008c5c:	6839      	ldr	r1, [r7, #0]
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f000 f8a5 	bl	8008dae <USBD_CtlError>
        break;
 8008c64:	e01a      	b.n	8008c9c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2201      	movs	r2, #1
 8008c6a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d005      	beq.n	8008c82 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	68db      	ldr	r3, [r3, #12]
 8008c7a:	f043 0202 	orr.w	r2, r3, #2
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	330c      	adds	r3, #12
 8008c86:	2202      	movs	r2, #2
 8008c88:	4619      	mov	r1, r3
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 f900 	bl	8008e90 <USBD_CtlSendData>
      break;
 8008c90:	e004      	b.n	8008c9c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008c92:	6839      	ldr	r1, [r7, #0]
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 f88a 	bl	8008dae <USBD_CtlError>
      break;
 8008c9a:	bf00      	nop
  }
}
 8008c9c:	bf00      	nop
 8008c9e:	3708      	adds	r7, #8
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b082      	sub	sp, #8
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	885b      	ldrh	r3, [r3, #2]
 8008cb2:	2b01      	cmp	r3, #1
 8008cb4:	d107      	bne.n	8008cc6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2201      	movs	r2, #1
 8008cba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f000 f940 	bl	8008f44 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008cc4:	e013      	b.n	8008cee <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	885b      	ldrh	r3, [r3, #2]
 8008cca:	2b02      	cmp	r3, #2
 8008ccc:	d10b      	bne.n	8008ce6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	889b      	ldrh	r3, [r3, #4]
 8008cd2:	0a1b      	lsrs	r3, r3, #8
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	b2da      	uxtb	r2, r3
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f000 f930 	bl	8008f44 <USBD_CtlSendStatus>
}
 8008ce4:	e003      	b.n	8008cee <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008ce6:	6839      	ldr	r1, [r7, #0]
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f000 f860 	bl	8008dae <USBD_CtlError>
}
 8008cee:	bf00      	nop
 8008cf0:	3708      	adds	r7, #8
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}

08008cf6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cf6:	b580      	push	{r7, lr}
 8008cf8:	b082      	sub	sp, #8
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
 8008cfe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d06:	b2db      	uxtb	r3, r3
 8008d08:	3b01      	subs	r3, #1
 8008d0a:	2b02      	cmp	r3, #2
 8008d0c:	d80b      	bhi.n	8008d26 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	885b      	ldrh	r3, [r3, #2]
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	d10c      	bne.n	8008d30 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 f910 	bl	8008f44 <USBD_CtlSendStatus>
      }
      break;
 8008d24:	e004      	b.n	8008d30 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008d26:	6839      	ldr	r1, [r7, #0]
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f000 f840 	bl	8008dae <USBD_CtlError>
      break;
 8008d2e:	e000      	b.n	8008d32 <USBD_ClrFeature+0x3c>
      break;
 8008d30:	bf00      	nop
  }
}
 8008d32:	bf00      	nop
 8008d34:	3708      	adds	r7, #8
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}

08008d3a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008d3a:	b580      	push	{r7, lr}
 8008d3c:	b084      	sub	sp, #16
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]
 8008d42:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	781a      	ldrb	r2, [r3, #0]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	3301      	adds	r3, #1
 8008d54:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	781a      	ldrb	r2, [r3, #0]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	3301      	adds	r3, #1
 8008d62:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008d64:	68f8      	ldr	r0, [r7, #12]
 8008d66:	f7ff fa41 	bl	80081ec <SWAPBYTE>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	3301      	adds	r3, #1
 8008d76:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008d7e:	68f8      	ldr	r0, [r7, #12]
 8008d80:	f7ff fa34 	bl	80081ec <SWAPBYTE>
 8008d84:	4603      	mov	r3, r0
 8008d86:	461a      	mov	r2, r3
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	3301      	adds	r3, #1
 8008d90:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	3301      	adds	r3, #1
 8008d96:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008d98:	68f8      	ldr	r0, [r7, #12]
 8008d9a:	f7ff fa27 	bl	80081ec <SWAPBYTE>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	461a      	mov	r2, r3
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	80da      	strh	r2, [r3, #6]
}
 8008da6:	bf00      	nop
 8008da8:	3710      	adds	r7, #16
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}

08008dae <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dae:	b580      	push	{r7, lr}
 8008db0:	b082      	sub	sp, #8
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
 8008db6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008db8:	2180      	movs	r1, #128	; 0x80
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 fce0 	bl	8009780 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008dc0:	2100      	movs	r1, #0
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 fcdc 	bl	8009780 <USBD_LL_StallEP>
}
 8008dc8:	bf00      	nop
 8008dca:	3708      	adds	r7, #8
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b086      	sub	sp, #24
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	60f8      	str	r0, [r7, #12]
 8008dd8:	60b9      	str	r1, [r7, #8]
 8008dda:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d036      	beq.n	8008e54 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008dea:	6938      	ldr	r0, [r7, #16]
 8008dec:	f000 f836 	bl	8008e5c <USBD_GetLen>
 8008df0:	4603      	mov	r3, r0
 8008df2:	3301      	adds	r3, #1
 8008df4:	b29b      	uxth	r3, r3
 8008df6:	005b      	lsls	r3, r3, #1
 8008df8:	b29a      	uxth	r2, r3
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008dfe:	7dfb      	ldrb	r3, [r7, #23]
 8008e00:	68ba      	ldr	r2, [r7, #8]
 8008e02:	4413      	add	r3, r2
 8008e04:	687a      	ldr	r2, [r7, #4]
 8008e06:	7812      	ldrb	r2, [r2, #0]
 8008e08:	701a      	strb	r2, [r3, #0]
  idx++;
 8008e0a:	7dfb      	ldrb	r3, [r7, #23]
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008e10:	7dfb      	ldrb	r3, [r7, #23]
 8008e12:	68ba      	ldr	r2, [r7, #8]
 8008e14:	4413      	add	r3, r2
 8008e16:	2203      	movs	r2, #3
 8008e18:	701a      	strb	r2, [r3, #0]
  idx++;
 8008e1a:	7dfb      	ldrb	r3, [r7, #23]
 8008e1c:	3301      	adds	r3, #1
 8008e1e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008e20:	e013      	b.n	8008e4a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008e22:	7dfb      	ldrb	r3, [r7, #23]
 8008e24:	68ba      	ldr	r2, [r7, #8]
 8008e26:	4413      	add	r3, r2
 8008e28:	693a      	ldr	r2, [r7, #16]
 8008e2a:	7812      	ldrb	r2, [r2, #0]
 8008e2c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	3301      	adds	r3, #1
 8008e32:	613b      	str	r3, [r7, #16]
    idx++;
 8008e34:	7dfb      	ldrb	r3, [r7, #23]
 8008e36:	3301      	adds	r3, #1
 8008e38:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008e3a:	7dfb      	ldrb	r3, [r7, #23]
 8008e3c:	68ba      	ldr	r2, [r7, #8]
 8008e3e:	4413      	add	r3, r2
 8008e40:	2200      	movs	r2, #0
 8008e42:	701a      	strb	r2, [r3, #0]
    idx++;
 8008e44:	7dfb      	ldrb	r3, [r7, #23]
 8008e46:	3301      	adds	r3, #1
 8008e48:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	781b      	ldrb	r3, [r3, #0]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d1e7      	bne.n	8008e22 <USBD_GetString+0x52>
 8008e52:	e000      	b.n	8008e56 <USBD_GetString+0x86>
    return;
 8008e54:	bf00      	nop
  }
}
 8008e56:	3718      	adds	r7, #24
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}

08008e5c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b085      	sub	sp, #20
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008e64:	2300      	movs	r3, #0
 8008e66:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008e6c:	e005      	b.n	8008e7a <USBD_GetLen+0x1e>
  {
    len++;
 8008e6e:	7bfb      	ldrb	r3, [r7, #15]
 8008e70:	3301      	adds	r3, #1
 8008e72:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	3301      	adds	r3, #1
 8008e78:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d1f5      	bne.n	8008e6e <USBD_GetLen+0x12>
  }

  return len;
 8008e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3714      	adds	r7, #20
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr

08008e90 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b084      	sub	sp, #16
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	60f8      	str	r0, [r7, #12]
 8008e98:	60b9      	str	r1, [r7, #8]
 8008e9a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	2202      	movs	r2, #2
 8008ea0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	687a      	ldr	r2, [r7, #4]
 8008ea8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	687a      	ldr	r2, [r7, #4]
 8008eae:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	68ba      	ldr	r2, [r7, #8]
 8008eb4:	2100      	movs	r1, #0
 8008eb6:	68f8      	ldr	r0, [r7, #12]
 8008eb8:	f000 fceb 	bl	8009892 <USBD_LL_Transmit>

  return USBD_OK;
 8008ebc:	2300      	movs	r3, #0
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3710      	adds	r7, #16
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}

08008ec6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008ec6:	b580      	push	{r7, lr}
 8008ec8:	b084      	sub	sp, #16
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	60f8      	str	r0, [r7, #12]
 8008ece:	60b9      	str	r1, [r7, #8]
 8008ed0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	68ba      	ldr	r2, [r7, #8]
 8008ed6:	2100      	movs	r1, #0
 8008ed8:	68f8      	ldr	r0, [r7, #12]
 8008eda:	f000 fcda 	bl	8009892 <USBD_LL_Transmit>

  return USBD_OK;
 8008ede:	2300      	movs	r3, #0
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3710      	adds	r7, #16
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}

08008ee8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b084      	sub	sp, #16
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	60f8      	str	r0, [r7, #12]
 8008ef0:	60b9      	str	r1, [r7, #8]
 8008ef2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2203      	movs	r2, #3
 8008ef8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	687a      	ldr	r2, [r7, #4]
 8008f08:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	68ba      	ldr	r2, [r7, #8]
 8008f10:	2100      	movs	r1, #0
 8008f12:	68f8      	ldr	r0, [r7, #12]
 8008f14:	f000 fcde 	bl	80098d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f18:	2300      	movs	r3, #0
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3710      	adds	r7, #16
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}

08008f22 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008f22:	b580      	push	{r7, lr}
 8008f24:	b084      	sub	sp, #16
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	60f8      	str	r0, [r7, #12]
 8008f2a:	60b9      	str	r1, [r7, #8]
 8008f2c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	68ba      	ldr	r2, [r7, #8]
 8008f32:	2100      	movs	r1, #0
 8008f34:	68f8      	ldr	r0, [r7, #12]
 8008f36:	f000 fccd 	bl	80098d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f3a:	2300      	movs	r3, #0
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3710      	adds	r7, #16
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b082      	sub	sp, #8
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2204      	movs	r2, #4
 8008f50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008f54:	2300      	movs	r3, #0
 8008f56:	2200      	movs	r2, #0
 8008f58:	2100      	movs	r1, #0
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f000 fc99 	bl	8009892 <USBD_LL_Transmit>

  return USBD_OK;
 8008f60:	2300      	movs	r3, #0
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3708      	adds	r7, #8
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}

08008f6a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008f6a:	b580      	push	{r7, lr}
 8008f6c:	b082      	sub	sp, #8
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2205      	movs	r2, #5
 8008f76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	2100      	movs	r1, #0
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f000 fca7 	bl	80098d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f86:	2300      	movs	r3, #0
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3708      	adds	r7, #8
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008f94:	2200      	movs	r2, #0
 8008f96:	4912      	ldr	r1, [pc, #72]	; (8008fe0 <MX_USB_DEVICE_Init+0x50>)
 8008f98:	4812      	ldr	r0, [pc, #72]	; (8008fe4 <MX_USB_DEVICE_Init+0x54>)
 8008f9a:	f7fe fd07 	bl	80079ac <USBD_Init>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d001      	beq.n	8008fa8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008fa4:	f7f8 fa0a 	bl	80013bc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008fa8:	490f      	ldr	r1, [pc, #60]	; (8008fe8 <MX_USB_DEVICE_Init+0x58>)
 8008faa:	480e      	ldr	r0, [pc, #56]	; (8008fe4 <MX_USB_DEVICE_Init+0x54>)
 8008fac:	f7fe fd2e 	bl	8007a0c <USBD_RegisterClass>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d001      	beq.n	8008fba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008fb6:	f7f8 fa01 	bl	80013bc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008fba:	490c      	ldr	r1, [pc, #48]	; (8008fec <MX_USB_DEVICE_Init+0x5c>)
 8008fbc:	4809      	ldr	r0, [pc, #36]	; (8008fe4 <MX_USB_DEVICE_Init+0x54>)
 8008fbe:	f7fe fc1f 	bl	8007800 <USBD_CDC_RegisterInterface>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d001      	beq.n	8008fcc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008fc8:	f7f8 f9f8 	bl	80013bc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008fcc:	4805      	ldr	r0, [pc, #20]	; (8008fe4 <MX_USB_DEVICE_Init+0x54>)
 8008fce:	f7fe fd53 	bl	8007a78 <USBD_Start>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d001      	beq.n	8008fdc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008fd8:	f7f8 f9f0 	bl	80013bc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008fdc:	bf00      	nop
 8008fde:	bd80      	pop	{r7, pc}
 8008fe0:	200000ac 	.word	0x200000ac
 8008fe4:	20000268 	.word	0x20000268
 8008fe8:	20000018 	.word	0x20000018
 8008fec:	20000098 	.word	0x20000098

08008ff0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	4905      	ldr	r1, [pc, #20]	; (800900c <CDC_Init_FS+0x1c>)
 8008ff8:	4805      	ldr	r0, [pc, #20]	; (8009010 <CDC_Init_FS+0x20>)
 8008ffa:	f7fe fc1b 	bl	8007834 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008ffe:	4905      	ldr	r1, [pc, #20]	; (8009014 <CDC_Init_FS+0x24>)
 8009000:	4803      	ldr	r0, [pc, #12]	; (8009010 <CDC_Init_FS+0x20>)
 8009002:	f7fe fc39 	bl	8007878 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009006:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009008:	4618      	mov	r0, r3
 800900a:	bd80      	pop	{r7, pc}
 800900c:	20000d44 	.word	0x20000d44
 8009010:	20000268 	.word	0x20000268
 8009014:	20000544 	.word	0x20000544

08009018 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009018:	b480      	push	{r7}
 800901a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800901c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800901e:	4618      	mov	r0, r3
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr

08009028 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009028:	b480      	push	{r7}
 800902a:	b083      	sub	sp, #12
 800902c:	af00      	add	r7, sp, #0
 800902e:	4603      	mov	r3, r0
 8009030:	6039      	str	r1, [r7, #0]
 8009032:	71fb      	strb	r3, [r7, #7]
 8009034:	4613      	mov	r3, r2
 8009036:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009038:	79fb      	ldrb	r3, [r7, #7]
 800903a:	2b23      	cmp	r3, #35	; 0x23
 800903c:	d84a      	bhi.n	80090d4 <CDC_Control_FS+0xac>
 800903e:	a201      	add	r2, pc, #4	; (adr r2, 8009044 <CDC_Control_FS+0x1c>)
 8009040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009044:	080090d5 	.word	0x080090d5
 8009048:	080090d5 	.word	0x080090d5
 800904c:	080090d5 	.word	0x080090d5
 8009050:	080090d5 	.word	0x080090d5
 8009054:	080090d5 	.word	0x080090d5
 8009058:	080090d5 	.word	0x080090d5
 800905c:	080090d5 	.word	0x080090d5
 8009060:	080090d5 	.word	0x080090d5
 8009064:	080090d5 	.word	0x080090d5
 8009068:	080090d5 	.word	0x080090d5
 800906c:	080090d5 	.word	0x080090d5
 8009070:	080090d5 	.word	0x080090d5
 8009074:	080090d5 	.word	0x080090d5
 8009078:	080090d5 	.word	0x080090d5
 800907c:	080090d5 	.word	0x080090d5
 8009080:	080090d5 	.word	0x080090d5
 8009084:	080090d5 	.word	0x080090d5
 8009088:	080090d5 	.word	0x080090d5
 800908c:	080090d5 	.word	0x080090d5
 8009090:	080090d5 	.word	0x080090d5
 8009094:	080090d5 	.word	0x080090d5
 8009098:	080090d5 	.word	0x080090d5
 800909c:	080090d5 	.word	0x080090d5
 80090a0:	080090d5 	.word	0x080090d5
 80090a4:	080090d5 	.word	0x080090d5
 80090a8:	080090d5 	.word	0x080090d5
 80090ac:	080090d5 	.word	0x080090d5
 80090b0:	080090d5 	.word	0x080090d5
 80090b4:	080090d5 	.word	0x080090d5
 80090b8:	080090d5 	.word	0x080090d5
 80090bc:	080090d5 	.word	0x080090d5
 80090c0:	080090d5 	.word	0x080090d5
 80090c4:	080090d5 	.word	0x080090d5
 80090c8:	080090d5 	.word	0x080090d5
 80090cc:	080090d5 	.word	0x080090d5
 80090d0:	080090d5 	.word	0x080090d5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80090d4:	bf00      	nop
  }

  return (USBD_OK);
 80090d6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80090d8:	4618      	mov	r0, r3
 80090da:	370c      	adds	r7, #12
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr

080090e4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b082      	sub	sp, #8
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80090ee:	6879      	ldr	r1, [r7, #4]
 80090f0:	4805      	ldr	r0, [pc, #20]	; (8009108 <CDC_Receive_FS+0x24>)
 80090f2:	f7fe fbc1 	bl	8007878 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80090f6:	4804      	ldr	r0, [pc, #16]	; (8009108 <CDC_Receive_FS+0x24>)
 80090f8:	f7fe fc22 	bl	8007940 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80090fc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3708      	adds	r7, #8
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}
 8009106:	bf00      	nop
 8009108:	20000268 	.word	0x20000268

0800910c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b084      	sub	sp, #16
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	460b      	mov	r3, r1
 8009116:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009118:	2300      	movs	r3, #0
 800911a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800911c:	4b0d      	ldr	r3, [pc, #52]	; (8009154 <CDC_Transmit_FS+0x48>)
 800911e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009122:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800912a:	2b00      	cmp	r3, #0
 800912c:	d001      	beq.n	8009132 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800912e:	2301      	movs	r3, #1
 8009130:	e00b      	b.n	800914a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009132:	887b      	ldrh	r3, [r7, #2]
 8009134:	461a      	mov	r2, r3
 8009136:	6879      	ldr	r1, [r7, #4]
 8009138:	4806      	ldr	r0, [pc, #24]	; (8009154 <CDC_Transmit_FS+0x48>)
 800913a:	f7fe fb7b 	bl	8007834 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800913e:	4805      	ldr	r0, [pc, #20]	; (8009154 <CDC_Transmit_FS+0x48>)
 8009140:	f7fe fbb8 	bl	80078b4 <USBD_CDC_TransmitPacket>
 8009144:	4603      	mov	r3, r0
 8009146:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009148:	7bfb      	ldrb	r3, [r7, #15]
}
 800914a:	4618      	mov	r0, r3
 800914c:	3710      	adds	r7, #16
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
 8009152:	bf00      	nop
 8009154:	20000268 	.word	0x20000268

08009158 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009158:	b480      	push	{r7}
 800915a:	b087      	sub	sp, #28
 800915c:	af00      	add	r7, sp, #0
 800915e:	60f8      	str	r0, [r7, #12]
 8009160:	60b9      	str	r1, [r7, #8]
 8009162:	4613      	mov	r3, r2
 8009164:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009166:	2300      	movs	r3, #0
 8009168:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800916a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800916e:	4618      	mov	r0, r3
 8009170:	371c      	adds	r7, #28
 8009172:	46bd      	mov	sp, r7
 8009174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009178:	4770      	bx	lr
	...

0800917c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800917c:	b480      	push	{r7}
 800917e:	b083      	sub	sp, #12
 8009180:	af00      	add	r7, sp, #0
 8009182:	4603      	mov	r3, r0
 8009184:	6039      	str	r1, [r7, #0]
 8009186:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	2212      	movs	r2, #18
 800918c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800918e:	4b03      	ldr	r3, [pc, #12]	; (800919c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009190:	4618      	mov	r0, r3
 8009192:	370c      	adds	r7, #12
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr
 800919c:	200000c8 	.word	0x200000c8

080091a0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b083      	sub	sp, #12
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	4603      	mov	r3, r0
 80091a8:	6039      	str	r1, [r7, #0]
 80091aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	2204      	movs	r2, #4
 80091b0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80091b2:	4b03      	ldr	r3, [pc, #12]	; (80091c0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	370c      	adds	r7, #12
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr
 80091c0:	200000dc 	.word	0x200000dc

080091c4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b082      	sub	sp, #8
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	4603      	mov	r3, r0
 80091cc:	6039      	str	r1, [r7, #0]
 80091ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80091d0:	79fb      	ldrb	r3, [r7, #7]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d105      	bne.n	80091e2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80091d6:	683a      	ldr	r2, [r7, #0]
 80091d8:	4907      	ldr	r1, [pc, #28]	; (80091f8 <USBD_FS_ProductStrDescriptor+0x34>)
 80091da:	4808      	ldr	r0, [pc, #32]	; (80091fc <USBD_FS_ProductStrDescriptor+0x38>)
 80091dc:	f7ff fdf8 	bl	8008dd0 <USBD_GetString>
 80091e0:	e004      	b.n	80091ec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80091e2:	683a      	ldr	r2, [r7, #0]
 80091e4:	4904      	ldr	r1, [pc, #16]	; (80091f8 <USBD_FS_ProductStrDescriptor+0x34>)
 80091e6:	4805      	ldr	r0, [pc, #20]	; (80091fc <USBD_FS_ProductStrDescriptor+0x38>)
 80091e8:	f7ff fdf2 	bl	8008dd0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80091ec:	4b02      	ldr	r3, [pc, #8]	; (80091f8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3708      	adds	r7, #8
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
 80091f6:	bf00      	nop
 80091f8:	20001544 	.word	0x20001544
 80091fc:	08009afc 	.word	0x08009afc

08009200 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b082      	sub	sp, #8
 8009204:	af00      	add	r7, sp, #0
 8009206:	4603      	mov	r3, r0
 8009208:	6039      	str	r1, [r7, #0]
 800920a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800920c:	683a      	ldr	r2, [r7, #0]
 800920e:	4904      	ldr	r1, [pc, #16]	; (8009220 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009210:	4804      	ldr	r0, [pc, #16]	; (8009224 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009212:	f7ff fddd 	bl	8008dd0 <USBD_GetString>
  return USBD_StrDesc;
 8009216:	4b02      	ldr	r3, [pc, #8]	; (8009220 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009218:	4618      	mov	r0, r3
 800921a:	3708      	adds	r7, #8
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}
 8009220:	20001544 	.word	0x20001544
 8009224:	08009b14 	.word	0x08009b14

08009228 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b082      	sub	sp, #8
 800922c:	af00      	add	r7, sp, #0
 800922e:	4603      	mov	r3, r0
 8009230:	6039      	str	r1, [r7, #0]
 8009232:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	221a      	movs	r2, #26
 8009238:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800923a:	f000 f843 	bl	80092c4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800923e:	4b02      	ldr	r3, [pc, #8]	; (8009248 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009240:	4618      	mov	r0, r3
 8009242:	3708      	adds	r7, #8
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}
 8009248:	200000e0 	.word	0x200000e0

0800924c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b082      	sub	sp, #8
 8009250:	af00      	add	r7, sp, #0
 8009252:	4603      	mov	r3, r0
 8009254:	6039      	str	r1, [r7, #0]
 8009256:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009258:	79fb      	ldrb	r3, [r7, #7]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d105      	bne.n	800926a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800925e:	683a      	ldr	r2, [r7, #0]
 8009260:	4907      	ldr	r1, [pc, #28]	; (8009280 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009262:	4808      	ldr	r0, [pc, #32]	; (8009284 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009264:	f7ff fdb4 	bl	8008dd0 <USBD_GetString>
 8009268:	e004      	b.n	8009274 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800926a:	683a      	ldr	r2, [r7, #0]
 800926c:	4904      	ldr	r1, [pc, #16]	; (8009280 <USBD_FS_ConfigStrDescriptor+0x34>)
 800926e:	4805      	ldr	r0, [pc, #20]	; (8009284 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009270:	f7ff fdae 	bl	8008dd0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009274:	4b02      	ldr	r3, [pc, #8]	; (8009280 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009276:	4618      	mov	r0, r3
 8009278:	3708      	adds	r7, #8
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}
 800927e:	bf00      	nop
 8009280:	20001544 	.word	0x20001544
 8009284:	08009b28 	.word	0x08009b28

08009288 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b082      	sub	sp, #8
 800928c:	af00      	add	r7, sp, #0
 800928e:	4603      	mov	r3, r0
 8009290:	6039      	str	r1, [r7, #0]
 8009292:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009294:	79fb      	ldrb	r3, [r7, #7]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d105      	bne.n	80092a6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800929a:	683a      	ldr	r2, [r7, #0]
 800929c:	4907      	ldr	r1, [pc, #28]	; (80092bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800929e:	4808      	ldr	r0, [pc, #32]	; (80092c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80092a0:	f7ff fd96 	bl	8008dd0 <USBD_GetString>
 80092a4:	e004      	b.n	80092b0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80092a6:	683a      	ldr	r2, [r7, #0]
 80092a8:	4904      	ldr	r1, [pc, #16]	; (80092bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80092aa:	4805      	ldr	r0, [pc, #20]	; (80092c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80092ac:	f7ff fd90 	bl	8008dd0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80092b0:	4b02      	ldr	r3, [pc, #8]	; (80092bc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3708      	adds	r7, #8
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}
 80092ba:	bf00      	nop
 80092bc:	20001544 	.word	0x20001544
 80092c0:	08009b34 	.word	0x08009b34

080092c4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b084      	sub	sp, #16
 80092c8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80092ca:	4b0f      	ldr	r3, [pc, #60]	; (8009308 <Get_SerialNum+0x44>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80092d0:	4b0e      	ldr	r3, [pc, #56]	; (800930c <Get_SerialNum+0x48>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80092d6:	4b0e      	ldr	r3, [pc, #56]	; (8009310 <Get_SerialNum+0x4c>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80092dc:	68fa      	ldr	r2, [r7, #12]
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	4413      	add	r3, r2
 80092e2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d009      	beq.n	80092fe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80092ea:	2208      	movs	r2, #8
 80092ec:	4909      	ldr	r1, [pc, #36]	; (8009314 <Get_SerialNum+0x50>)
 80092ee:	68f8      	ldr	r0, [r7, #12]
 80092f0:	f000 f814 	bl	800931c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80092f4:	2204      	movs	r2, #4
 80092f6:	4908      	ldr	r1, [pc, #32]	; (8009318 <Get_SerialNum+0x54>)
 80092f8:	68b8      	ldr	r0, [r7, #8]
 80092fa:	f000 f80f 	bl	800931c <IntToUnicode>
  }
}
 80092fe:	bf00      	nop
 8009300:	3710      	adds	r7, #16
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}
 8009306:	bf00      	nop
 8009308:	1fff7a10 	.word	0x1fff7a10
 800930c:	1fff7a14 	.word	0x1fff7a14
 8009310:	1fff7a18 	.word	0x1fff7a18
 8009314:	200000e2 	.word	0x200000e2
 8009318:	200000f2 	.word	0x200000f2

0800931c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800931c:	b480      	push	{r7}
 800931e:	b087      	sub	sp, #28
 8009320:	af00      	add	r7, sp, #0
 8009322:	60f8      	str	r0, [r7, #12]
 8009324:	60b9      	str	r1, [r7, #8]
 8009326:	4613      	mov	r3, r2
 8009328:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800932a:	2300      	movs	r3, #0
 800932c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800932e:	2300      	movs	r3, #0
 8009330:	75fb      	strb	r3, [r7, #23]
 8009332:	e027      	b.n	8009384 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	0f1b      	lsrs	r3, r3, #28
 8009338:	2b09      	cmp	r3, #9
 800933a:	d80b      	bhi.n	8009354 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	0f1b      	lsrs	r3, r3, #28
 8009340:	b2da      	uxtb	r2, r3
 8009342:	7dfb      	ldrb	r3, [r7, #23]
 8009344:	005b      	lsls	r3, r3, #1
 8009346:	4619      	mov	r1, r3
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	440b      	add	r3, r1
 800934c:	3230      	adds	r2, #48	; 0x30
 800934e:	b2d2      	uxtb	r2, r2
 8009350:	701a      	strb	r2, [r3, #0]
 8009352:	e00a      	b.n	800936a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	0f1b      	lsrs	r3, r3, #28
 8009358:	b2da      	uxtb	r2, r3
 800935a:	7dfb      	ldrb	r3, [r7, #23]
 800935c:	005b      	lsls	r3, r3, #1
 800935e:	4619      	mov	r1, r3
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	440b      	add	r3, r1
 8009364:	3237      	adds	r2, #55	; 0x37
 8009366:	b2d2      	uxtb	r2, r2
 8009368:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	011b      	lsls	r3, r3, #4
 800936e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009370:	7dfb      	ldrb	r3, [r7, #23]
 8009372:	005b      	lsls	r3, r3, #1
 8009374:	3301      	adds	r3, #1
 8009376:	68ba      	ldr	r2, [r7, #8]
 8009378:	4413      	add	r3, r2
 800937a:	2200      	movs	r2, #0
 800937c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800937e:	7dfb      	ldrb	r3, [r7, #23]
 8009380:	3301      	adds	r3, #1
 8009382:	75fb      	strb	r3, [r7, #23]
 8009384:	7dfa      	ldrb	r2, [r7, #23]
 8009386:	79fb      	ldrb	r3, [r7, #7]
 8009388:	429a      	cmp	r2, r3
 800938a:	d3d3      	bcc.n	8009334 <IntToUnicode+0x18>
  }
}
 800938c:	bf00      	nop
 800938e:	bf00      	nop
 8009390:	371c      	adds	r7, #28
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr
	...

0800939c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b08a      	sub	sp, #40	; 0x28
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80093a4:	f107 0314 	add.w	r3, r7, #20
 80093a8:	2200      	movs	r2, #0
 80093aa:	601a      	str	r2, [r3, #0]
 80093ac:	605a      	str	r2, [r3, #4]
 80093ae:	609a      	str	r2, [r3, #8]
 80093b0:	60da      	str	r2, [r3, #12]
 80093b2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80093bc:	d13a      	bne.n	8009434 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80093be:	2300      	movs	r3, #0
 80093c0:	613b      	str	r3, [r7, #16]
 80093c2:	4b1e      	ldr	r3, [pc, #120]	; (800943c <HAL_PCD_MspInit+0xa0>)
 80093c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093c6:	4a1d      	ldr	r2, [pc, #116]	; (800943c <HAL_PCD_MspInit+0xa0>)
 80093c8:	f043 0301 	orr.w	r3, r3, #1
 80093cc:	6313      	str	r3, [r2, #48]	; 0x30
 80093ce:	4b1b      	ldr	r3, [pc, #108]	; (800943c <HAL_PCD_MspInit+0xa0>)
 80093d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093d2:	f003 0301 	and.w	r3, r3, #1
 80093d6:	613b      	str	r3, [r7, #16]
 80093d8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80093da:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80093de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093e0:	2302      	movs	r3, #2
 80093e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093e4:	2300      	movs	r3, #0
 80093e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80093e8:	2303      	movs	r3, #3
 80093ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80093ec:	230a      	movs	r3, #10
 80093ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80093f0:	f107 0314 	add.w	r3, r7, #20
 80093f4:	4619      	mov	r1, r3
 80093f6:	4812      	ldr	r0, [pc, #72]	; (8009440 <HAL_PCD_MspInit+0xa4>)
 80093f8:	f7f8 fd52 	bl	8001ea0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80093fc:	4b0f      	ldr	r3, [pc, #60]	; (800943c <HAL_PCD_MspInit+0xa0>)
 80093fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009400:	4a0e      	ldr	r2, [pc, #56]	; (800943c <HAL_PCD_MspInit+0xa0>)
 8009402:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009406:	6353      	str	r3, [r2, #52]	; 0x34
 8009408:	2300      	movs	r3, #0
 800940a:	60fb      	str	r3, [r7, #12]
 800940c:	4b0b      	ldr	r3, [pc, #44]	; (800943c <HAL_PCD_MspInit+0xa0>)
 800940e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009410:	4a0a      	ldr	r2, [pc, #40]	; (800943c <HAL_PCD_MspInit+0xa0>)
 8009412:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009416:	6453      	str	r3, [r2, #68]	; 0x44
 8009418:	4b08      	ldr	r3, [pc, #32]	; (800943c <HAL_PCD_MspInit+0xa0>)
 800941a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800941c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009420:	60fb      	str	r3, [r7, #12]
 8009422:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009424:	2200      	movs	r2, #0
 8009426:	2100      	movs	r1, #0
 8009428:	2043      	movs	r0, #67	; 0x43
 800942a:	f7f8 fd02 	bl	8001e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800942e:	2043      	movs	r0, #67	; 0x43
 8009430:	f7f8 fd1b 	bl	8001e6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009434:	bf00      	nop
 8009436:	3728      	adds	r7, #40	; 0x28
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}
 800943c:	40023800 	.word	0x40023800
 8009440:	40020000 	.word	0x40020000

08009444 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b082      	sub	sp, #8
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009458:	4619      	mov	r1, r3
 800945a:	4610      	mov	r0, r2
 800945c:	f7fe fb59 	bl	8007b12 <USBD_LL_SetupStage>
}
 8009460:	bf00      	nop
 8009462:	3708      	adds	r7, #8
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}

08009468 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b082      	sub	sp, #8
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	460b      	mov	r3, r1
 8009472:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800947a:	78fa      	ldrb	r2, [r7, #3]
 800947c:	6879      	ldr	r1, [r7, #4]
 800947e:	4613      	mov	r3, r2
 8009480:	00db      	lsls	r3, r3, #3
 8009482:	4413      	add	r3, r2
 8009484:	009b      	lsls	r3, r3, #2
 8009486:	440b      	add	r3, r1
 8009488:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800948c:	681a      	ldr	r2, [r3, #0]
 800948e:	78fb      	ldrb	r3, [r7, #3]
 8009490:	4619      	mov	r1, r3
 8009492:	f7fe fb93 	bl	8007bbc <USBD_LL_DataOutStage>
}
 8009496:	bf00      	nop
 8009498:	3708      	adds	r7, #8
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}

0800949e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800949e:	b580      	push	{r7, lr}
 80094a0:	b082      	sub	sp, #8
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	6078      	str	r0, [r7, #4]
 80094a6:	460b      	mov	r3, r1
 80094a8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80094b0:	78fa      	ldrb	r2, [r7, #3]
 80094b2:	6879      	ldr	r1, [r7, #4]
 80094b4:	4613      	mov	r3, r2
 80094b6:	00db      	lsls	r3, r3, #3
 80094b8:	4413      	add	r3, r2
 80094ba:	009b      	lsls	r3, r3, #2
 80094bc:	440b      	add	r3, r1
 80094be:	334c      	adds	r3, #76	; 0x4c
 80094c0:	681a      	ldr	r2, [r3, #0]
 80094c2:	78fb      	ldrb	r3, [r7, #3]
 80094c4:	4619      	mov	r1, r3
 80094c6:	f7fe fc2c 	bl	8007d22 <USBD_LL_DataInStage>
}
 80094ca:	bf00      	nop
 80094cc:	3708      	adds	r7, #8
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}

080094d2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094d2:	b580      	push	{r7, lr}
 80094d4:	b082      	sub	sp, #8
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80094e0:	4618      	mov	r0, r3
 80094e2:	f7fe fd60 	bl	8007fa6 <USBD_LL_SOF>
}
 80094e6:	bf00      	nop
 80094e8:	3708      	adds	r7, #8
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}

080094ee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094ee:	b580      	push	{r7, lr}
 80094f0:	b084      	sub	sp, #16
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80094f6:	2301      	movs	r3, #1
 80094f8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	68db      	ldr	r3, [r3, #12]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d102      	bne.n	8009508 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009502:	2300      	movs	r3, #0
 8009504:	73fb      	strb	r3, [r7, #15]
 8009506:	e008      	b.n	800951a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	68db      	ldr	r3, [r3, #12]
 800950c:	2b02      	cmp	r3, #2
 800950e:	d102      	bne.n	8009516 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009510:	2301      	movs	r3, #1
 8009512:	73fb      	strb	r3, [r7, #15]
 8009514:	e001      	b.n	800951a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009516:	f7f7 ff51 	bl	80013bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009520:	7bfa      	ldrb	r2, [r7, #15]
 8009522:	4611      	mov	r1, r2
 8009524:	4618      	mov	r0, r3
 8009526:	f7fe fd00 	bl	8007f2a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009530:	4618      	mov	r0, r3
 8009532:	f7fe fca8 	bl	8007e86 <USBD_LL_Reset>
}
 8009536:	bf00      	nop
 8009538:	3710      	adds	r7, #16
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
	...

08009540 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b082      	sub	sp, #8
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800954e:	4618      	mov	r0, r3
 8009550:	f7fe fcfb 	bl	8007f4a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	687a      	ldr	r2, [r7, #4]
 8009560:	6812      	ldr	r2, [r2, #0]
 8009562:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009566:	f043 0301 	orr.w	r3, r3, #1
 800956a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6a1b      	ldr	r3, [r3, #32]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d005      	beq.n	8009580 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009574:	4b04      	ldr	r3, [pc, #16]	; (8009588 <HAL_PCD_SuspendCallback+0x48>)
 8009576:	691b      	ldr	r3, [r3, #16]
 8009578:	4a03      	ldr	r2, [pc, #12]	; (8009588 <HAL_PCD_SuspendCallback+0x48>)
 800957a:	f043 0306 	orr.w	r3, r3, #6
 800957e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009580:	bf00      	nop
 8009582:	3708      	adds	r7, #8
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}
 8009588:	e000ed00 	.word	0xe000ed00

0800958c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b082      	sub	sp, #8
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800959a:	4618      	mov	r0, r3
 800959c:	f7fe fceb 	bl	8007f76 <USBD_LL_Resume>
}
 80095a0:	bf00      	nop
 80095a2:	3708      	adds	r7, #8
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}

080095a8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b082      	sub	sp, #8
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	460b      	mov	r3, r1
 80095b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80095ba:	78fa      	ldrb	r2, [r7, #3]
 80095bc:	4611      	mov	r1, r2
 80095be:	4618      	mov	r0, r3
 80095c0:	f7fe fd43 	bl	800804a <USBD_LL_IsoOUTIncomplete>
}
 80095c4:	bf00      	nop
 80095c6:	3708      	adds	r7, #8
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}

080095cc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b082      	sub	sp, #8
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	460b      	mov	r3, r1
 80095d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80095de:	78fa      	ldrb	r2, [r7, #3]
 80095e0:	4611      	mov	r1, r2
 80095e2:	4618      	mov	r0, r3
 80095e4:	f7fe fcff 	bl	8007fe6 <USBD_LL_IsoINIncomplete>
}
 80095e8:	bf00      	nop
 80095ea:	3708      	adds	r7, #8
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b082      	sub	sp, #8
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80095fe:	4618      	mov	r0, r3
 8009600:	f7fe fd55 	bl	80080ae <USBD_LL_DevConnected>
}
 8009604:	bf00      	nop
 8009606:	3708      	adds	r7, #8
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}

0800960c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b082      	sub	sp, #8
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800961a:	4618      	mov	r0, r3
 800961c:	f7fe fd52 	bl	80080c4 <USBD_LL_DevDisconnected>
}
 8009620:	bf00      	nop
 8009622:	3708      	adds	r7, #8
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b082      	sub	sp, #8
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	781b      	ldrb	r3, [r3, #0]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d13c      	bne.n	80096b2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009638:	4a20      	ldr	r2, [pc, #128]	; (80096bc <USBD_LL_Init+0x94>)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	4a1e      	ldr	r2, [pc, #120]	; (80096bc <USBD_LL_Init+0x94>)
 8009644:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009648:	4b1c      	ldr	r3, [pc, #112]	; (80096bc <USBD_LL_Init+0x94>)
 800964a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800964e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009650:	4b1a      	ldr	r3, [pc, #104]	; (80096bc <USBD_LL_Init+0x94>)
 8009652:	2204      	movs	r2, #4
 8009654:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009656:	4b19      	ldr	r3, [pc, #100]	; (80096bc <USBD_LL_Init+0x94>)
 8009658:	2202      	movs	r2, #2
 800965a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800965c:	4b17      	ldr	r3, [pc, #92]	; (80096bc <USBD_LL_Init+0x94>)
 800965e:	2200      	movs	r2, #0
 8009660:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009662:	4b16      	ldr	r3, [pc, #88]	; (80096bc <USBD_LL_Init+0x94>)
 8009664:	2202      	movs	r2, #2
 8009666:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009668:	4b14      	ldr	r3, [pc, #80]	; (80096bc <USBD_LL_Init+0x94>)
 800966a:	2200      	movs	r2, #0
 800966c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800966e:	4b13      	ldr	r3, [pc, #76]	; (80096bc <USBD_LL_Init+0x94>)
 8009670:	2200      	movs	r2, #0
 8009672:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009674:	4b11      	ldr	r3, [pc, #68]	; (80096bc <USBD_LL_Init+0x94>)
 8009676:	2200      	movs	r2, #0
 8009678:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800967a:	4b10      	ldr	r3, [pc, #64]	; (80096bc <USBD_LL_Init+0x94>)
 800967c:	2200      	movs	r2, #0
 800967e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009680:	4b0e      	ldr	r3, [pc, #56]	; (80096bc <USBD_LL_Init+0x94>)
 8009682:	2200      	movs	r2, #0
 8009684:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009686:	480d      	ldr	r0, [pc, #52]	; (80096bc <USBD_LL_Init+0x94>)
 8009688:	f7f8 fdbf 	bl	800220a <HAL_PCD_Init>
 800968c:	4603      	mov	r3, r0
 800968e:	2b00      	cmp	r3, #0
 8009690:	d001      	beq.n	8009696 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009692:	f7f7 fe93 	bl	80013bc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009696:	2180      	movs	r1, #128	; 0x80
 8009698:	4808      	ldr	r0, [pc, #32]	; (80096bc <USBD_LL_Init+0x94>)
 800969a:	f7fa f816 	bl	80036ca <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800969e:	2240      	movs	r2, #64	; 0x40
 80096a0:	2100      	movs	r1, #0
 80096a2:	4806      	ldr	r0, [pc, #24]	; (80096bc <USBD_LL_Init+0x94>)
 80096a4:	f7f9 ffca 	bl	800363c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80096a8:	2280      	movs	r2, #128	; 0x80
 80096aa:	2101      	movs	r1, #1
 80096ac:	4803      	ldr	r0, [pc, #12]	; (80096bc <USBD_LL_Init+0x94>)
 80096ae:	f7f9 ffc5 	bl	800363c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80096b2:	2300      	movs	r3, #0
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3708      	adds	r7, #8
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}
 80096bc:	20001744 	.word	0x20001744

080096c0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b084      	sub	sp, #16
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096c8:	2300      	movs	r3, #0
 80096ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096cc:	2300      	movs	r3, #0
 80096ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80096d6:	4618      	mov	r0, r3
 80096d8:	f7f8 feb4 	bl	8002444 <HAL_PCD_Start>
 80096dc:	4603      	mov	r3, r0
 80096de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096e0:	7bfb      	ldrb	r3, [r7, #15]
 80096e2:	4618      	mov	r0, r3
 80096e4:	f000 f942 	bl	800996c <USBD_Get_USB_Status>
 80096e8:	4603      	mov	r3, r0
 80096ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3710      	adds	r7, #16
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}

080096f6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80096f6:	b580      	push	{r7, lr}
 80096f8:	b084      	sub	sp, #16
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	6078      	str	r0, [r7, #4]
 80096fe:	4608      	mov	r0, r1
 8009700:	4611      	mov	r1, r2
 8009702:	461a      	mov	r2, r3
 8009704:	4603      	mov	r3, r0
 8009706:	70fb      	strb	r3, [r7, #3]
 8009708:	460b      	mov	r3, r1
 800970a:	70bb      	strb	r3, [r7, #2]
 800970c:	4613      	mov	r3, r2
 800970e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009710:	2300      	movs	r3, #0
 8009712:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009714:	2300      	movs	r3, #0
 8009716:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800971e:	78bb      	ldrb	r3, [r7, #2]
 8009720:	883a      	ldrh	r2, [r7, #0]
 8009722:	78f9      	ldrb	r1, [r7, #3]
 8009724:	f7f9 fb85 	bl	8002e32 <HAL_PCD_EP_Open>
 8009728:	4603      	mov	r3, r0
 800972a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800972c:	7bfb      	ldrb	r3, [r7, #15]
 800972e:	4618      	mov	r0, r3
 8009730:	f000 f91c 	bl	800996c <USBD_Get_USB_Status>
 8009734:	4603      	mov	r3, r0
 8009736:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009738:	7bbb      	ldrb	r3, [r7, #14]
}
 800973a:	4618      	mov	r0, r3
 800973c:	3710      	adds	r7, #16
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}

08009742 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009742:	b580      	push	{r7, lr}
 8009744:	b084      	sub	sp, #16
 8009746:	af00      	add	r7, sp, #0
 8009748:	6078      	str	r0, [r7, #4]
 800974a:	460b      	mov	r3, r1
 800974c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800974e:	2300      	movs	r3, #0
 8009750:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009752:	2300      	movs	r3, #0
 8009754:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800975c:	78fa      	ldrb	r2, [r7, #3]
 800975e:	4611      	mov	r1, r2
 8009760:	4618      	mov	r0, r3
 8009762:	f7f9 fbce 	bl	8002f02 <HAL_PCD_EP_Close>
 8009766:	4603      	mov	r3, r0
 8009768:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800976a:	7bfb      	ldrb	r3, [r7, #15]
 800976c:	4618      	mov	r0, r3
 800976e:	f000 f8fd 	bl	800996c <USBD_Get_USB_Status>
 8009772:	4603      	mov	r3, r0
 8009774:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009776:	7bbb      	ldrb	r3, [r7, #14]
}
 8009778:	4618      	mov	r0, r3
 800977a:	3710      	adds	r7, #16
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}

08009780 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b084      	sub	sp, #16
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	460b      	mov	r3, r1
 800978a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800978c:	2300      	movs	r3, #0
 800978e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009790:	2300      	movs	r3, #0
 8009792:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800979a:	78fa      	ldrb	r2, [r7, #3]
 800979c:	4611      	mov	r1, r2
 800979e:	4618      	mov	r0, r3
 80097a0:	f7f9 fca6 	bl	80030f0 <HAL_PCD_EP_SetStall>
 80097a4:	4603      	mov	r3, r0
 80097a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097a8:	7bfb      	ldrb	r3, [r7, #15]
 80097aa:	4618      	mov	r0, r3
 80097ac:	f000 f8de 	bl	800996c <USBD_Get_USB_Status>
 80097b0:	4603      	mov	r3, r0
 80097b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3710      	adds	r7, #16
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}

080097be <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097be:	b580      	push	{r7, lr}
 80097c0:	b084      	sub	sp, #16
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
 80097c6:	460b      	mov	r3, r1
 80097c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097ca:	2300      	movs	r3, #0
 80097cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097ce:	2300      	movs	r3, #0
 80097d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80097d8:	78fa      	ldrb	r2, [r7, #3]
 80097da:	4611      	mov	r1, r2
 80097dc:	4618      	mov	r0, r3
 80097de:	f7f9 fceb 	bl	80031b8 <HAL_PCD_EP_ClrStall>
 80097e2:	4603      	mov	r3, r0
 80097e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097e6:	7bfb      	ldrb	r3, [r7, #15]
 80097e8:	4618      	mov	r0, r3
 80097ea:	f000 f8bf 	bl	800996c <USBD_Get_USB_Status>
 80097ee:	4603      	mov	r3, r0
 80097f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	3710      	adds	r7, #16
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}

080097fc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b085      	sub	sp, #20
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	460b      	mov	r3, r1
 8009806:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800980e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009810:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009814:	2b00      	cmp	r3, #0
 8009816:	da0b      	bge.n	8009830 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009818:	78fb      	ldrb	r3, [r7, #3]
 800981a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800981e:	68f9      	ldr	r1, [r7, #12]
 8009820:	4613      	mov	r3, r2
 8009822:	00db      	lsls	r3, r3, #3
 8009824:	4413      	add	r3, r2
 8009826:	009b      	lsls	r3, r3, #2
 8009828:	440b      	add	r3, r1
 800982a:	333e      	adds	r3, #62	; 0x3e
 800982c:	781b      	ldrb	r3, [r3, #0]
 800982e:	e00b      	b.n	8009848 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009830:	78fb      	ldrb	r3, [r7, #3]
 8009832:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009836:	68f9      	ldr	r1, [r7, #12]
 8009838:	4613      	mov	r3, r2
 800983a:	00db      	lsls	r3, r3, #3
 800983c:	4413      	add	r3, r2
 800983e:	009b      	lsls	r3, r3, #2
 8009840:	440b      	add	r3, r1
 8009842:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009846:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009848:	4618      	mov	r0, r3
 800984a:	3714      	adds	r7, #20
 800984c:	46bd      	mov	sp, r7
 800984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009852:	4770      	bx	lr

08009854 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b084      	sub	sp, #16
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	460b      	mov	r3, r1
 800985e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009860:	2300      	movs	r3, #0
 8009862:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009864:	2300      	movs	r3, #0
 8009866:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800986e:	78fa      	ldrb	r2, [r7, #3]
 8009870:	4611      	mov	r1, r2
 8009872:	4618      	mov	r0, r3
 8009874:	f7f9 fab8 	bl	8002de8 <HAL_PCD_SetAddress>
 8009878:	4603      	mov	r3, r0
 800987a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800987c:	7bfb      	ldrb	r3, [r7, #15]
 800987e:	4618      	mov	r0, r3
 8009880:	f000 f874 	bl	800996c <USBD_Get_USB_Status>
 8009884:	4603      	mov	r3, r0
 8009886:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009888:	7bbb      	ldrb	r3, [r7, #14]
}
 800988a:	4618      	mov	r0, r3
 800988c:	3710      	adds	r7, #16
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}

08009892 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009892:	b580      	push	{r7, lr}
 8009894:	b086      	sub	sp, #24
 8009896:	af00      	add	r7, sp, #0
 8009898:	60f8      	str	r0, [r7, #12]
 800989a:	607a      	str	r2, [r7, #4]
 800989c:	603b      	str	r3, [r7, #0]
 800989e:	460b      	mov	r3, r1
 80098a0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098a2:	2300      	movs	r3, #0
 80098a4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098a6:	2300      	movs	r3, #0
 80098a8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80098b0:	7af9      	ldrb	r1, [r7, #11]
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	687a      	ldr	r2, [r7, #4]
 80098b6:	f7f9 fbd1 	bl	800305c <HAL_PCD_EP_Transmit>
 80098ba:	4603      	mov	r3, r0
 80098bc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098be:	7dfb      	ldrb	r3, [r7, #23]
 80098c0:	4618      	mov	r0, r3
 80098c2:	f000 f853 	bl	800996c <USBD_Get_USB_Status>
 80098c6:	4603      	mov	r3, r0
 80098c8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80098ca:	7dbb      	ldrb	r3, [r7, #22]
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3718      	adds	r7, #24
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b086      	sub	sp, #24
 80098d8:	af00      	add	r7, sp, #0
 80098da:	60f8      	str	r0, [r7, #12]
 80098dc:	607a      	str	r2, [r7, #4]
 80098de:	603b      	str	r3, [r7, #0]
 80098e0:	460b      	mov	r3, r1
 80098e2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098e4:	2300      	movs	r3, #0
 80098e6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098e8:	2300      	movs	r3, #0
 80098ea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80098f2:	7af9      	ldrb	r1, [r7, #11]
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	687a      	ldr	r2, [r7, #4]
 80098f8:	f7f9 fb4d 	bl	8002f96 <HAL_PCD_EP_Receive>
 80098fc:	4603      	mov	r3, r0
 80098fe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009900:	7dfb      	ldrb	r3, [r7, #23]
 8009902:	4618      	mov	r0, r3
 8009904:	f000 f832 	bl	800996c <USBD_Get_USB_Status>
 8009908:	4603      	mov	r3, r0
 800990a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800990c:	7dbb      	ldrb	r3, [r7, #22]
}
 800990e:	4618      	mov	r0, r3
 8009910:	3718      	adds	r7, #24
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}

08009916 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009916:	b580      	push	{r7, lr}
 8009918:	b082      	sub	sp, #8
 800991a:	af00      	add	r7, sp, #0
 800991c:	6078      	str	r0, [r7, #4]
 800991e:	460b      	mov	r3, r1
 8009920:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009928:	78fa      	ldrb	r2, [r7, #3]
 800992a:	4611      	mov	r1, r2
 800992c:	4618      	mov	r0, r3
 800992e:	f7f9 fb7d 	bl	800302c <HAL_PCD_EP_GetRxCount>
 8009932:	4603      	mov	r3, r0
}
 8009934:	4618      	mov	r0, r3
 8009936:	3708      	adds	r7, #8
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800993c:	b480      	push	{r7}
 800993e:	b083      	sub	sp, #12
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009944:	4b03      	ldr	r3, [pc, #12]	; (8009954 <USBD_static_malloc+0x18>)
}
 8009946:	4618      	mov	r0, r3
 8009948:	370c      	adds	r7, #12
 800994a:	46bd      	mov	sp, r7
 800994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009950:	4770      	bx	lr
 8009952:	bf00      	nop
 8009954:	20001c50 	.word	0x20001c50

08009958 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009958:	b480      	push	{r7}
 800995a:	b083      	sub	sp, #12
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]

}
 8009960:	bf00      	nop
 8009962:	370c      	adds	r7, #12
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr

0800996c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800996c:	b480      	push	{r7}
 800996e:	b085      	sub	sp, #20
 8009970:	af00      	add	r7, sp, #0
 8009972:	4603      	mov	r3, r0
 8009974:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009976:	2300      	movs	r3, #0
 8009978:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800997a:	79fb      	ldrb	r3, [r7, #7]
 800997c:	2b03      	cmp	r3, #3
 800997e:	d817      	bhi.n	80099b0 <USBD_Get_USB_Status+0x44>
 8009980:	a201      	add	r2, pc, #4	; (adr r2, 8009988 <USBD_Get_USB_Status+0x1c>)
 8009982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009986:	bf00      	nop
 8009988:	08009999 	.word	0x08009999
 800998c:	0800999f 	.word	0x0800999f
 8009990:	080099a5 	.word	0x080099a5
 8009994:	080099ab 	.word	0x080099ab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009998:	2300      	movs	r3, #0
 800999a:	73fb      	strb	r3, [r7, #15]
    break;
 800999c:	e00b      	b.n	80099b6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800999e:	2303      	movs	r3, #3
 80099a0:	73fb      	strb	r3, [r7, #15]
    break;
 80099a2:	e008      	b.n	80099b6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80099a4:	2301      	movs	r3, #1
 80099a6:	73fb      	strb	r3, [r7, #15]
    break;
 80099a8:	e005      	b.n	80099b6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80099aa:	2303      	movs	r3, #3
 80099ac:	73fb      	strb	r3, [r7, #15]
    break;
 80099ae:	e002      	b.n	80099b6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80099b0:	2303      	movs	r3, #3
 80099b2:	73fb      	strb	r3, [r7, #15]
    break;
 80099b4:	bf00      	nop
  }
  return usb_status;
 80099b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3714      	adds	r7, #20
 80099bc:	46bd      	mov	sp, r7
 80099be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c2:	4770      	bx	lr

080099c4 <__libc_init_array>:
 80099c4:	b570      	push	{r4, r5, r6, lr}
 80099c6:	4d0d      	ldr	r5, [pc, #52]	; (80099fc <__libc_init_array+0x38>)
 80099c8:	4c0d      	ldr	r4, [pc, #52]	; (8009a00 <__libc_init_array+0x3c>)
 80099ca:	1b64      	subs	r4, r4, r5
 80099cc:	10a4      	asrs	r4, r4, #2
 80099ce:	2600      	movs	r6, #0
 80099d0:	42a6      	cmp	r6, r4
 80099d2:	d109      	bne.n	80099e8 <__libc_init_array+0x24>
 80099d4:	4d0b      	ldr	r5, [pc, #44]	; (8009a04 <__libc_init_array+0x40>)
 80099d6:	4c0c      	ldr	r4, [pc, #48]	; (8009a08 <__libc_init_array+0x44>)
 80099d8:	f000 f87c 	bl	8009ad4 <_init>
 80099dc:	1b64      	subs	r4, r4, r5
 80099de:	10a4      	asrs	r4, r4, #2
 80099e0:	2600      	movs	r6, #0
 80099e2:	42a6      	cmp	r6, r4
 80099e4:	d105      	bne.n	80099f2 <__libc_init_array+0x2e>
 80099e6:	bd70      	pop	{r4, r5, r6, pc}
 80099e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80099ec:	4798      	blx	r3
 80099ee:	3601      	adds	r6, #1
 80099f0:	e7ee      	b.n	80099d0 <__libc_init_array+0xc>
 80099f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80099f6:	4798      	blx	r3
 80099f8:	3601      	adds	r6, #1
 80099fa:	e7f2      	b.n	80099e2 <__libc_init_array+0x1e>
 80099fc:	08009b84 	.word	0x08009b84
 8009a00:	08009b84 	.word	0x08009b84
 8009a04:	08009b84 	.word	0x08009b84
 8009a08:	08009b88 	.word	0x08009b88

08009a0c <__itoa>:
 8009a0c:	1e93      	subs	r3, r2, #2
 8009a0e:	2b22      	cmp	r3, #34	; 0x22
 8009a10:	b510      	push	{r4, lr}
 8009a12:	460c      	mov	r4, r1
 8009a14:	d904      	bls.n	8009a20 <__itoa+0x14>
 8009a16:	2300      	movs	r3, #0
 8009a18:	700b      	strb	r3, [r1, #0]
 8009a1a:	461c      	mov	r4, r3
 8009a1c:	4620      	mov	r0, r4
 8009a1e:	bd10      	pop	{r4, pc}
 8009a20:	2a0a      	cmp	r2, #10
 8009a22:	d109      	bne.n	8009a38 <__itoa+0x2c>
 8009a24:	2800      	cmp	r0, #0
 8009a26:	da07      	bge.n	8009a38 <__itoa+0x2c>
 8009a28:	232d      	movs	r3, #45	; 0x2d
 8009a2a:	700b      	strb	r3, [r1, #0]
 8009a2c:	4240      	negs	r0, r0
 8009a2e:	2101      	movs	r1, #1
 8009a30:	4421      	add	r1, r4
 8009a32:	f000 f80d 	bl	8009a50 <__utoa>
 8009a36:	e7f1      	b.n	8009a1c <__itoa+0x10>
 8009a38:	2100      	movs	r1, #0
 8009a3a:	e7f9      	b.n	8009a30 <__itoa+0x24>

08009a3c <itoa>:
 8009a3c:	f7ff bfe6 	b.w	8009a0c <__itoa>

08009a40 <memset>:
 8009a40:	4402      	add	r2, r0
 8009a42:	4603      	mov	r3, r0
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d100      	bne.n	8009a4a <memset+0xa>
 8009a48:	4770      	bx	lr
 8009a4a:	f803 1b01 	strb.w	r1, [r3], #1
 8009a4e:	e7f9      	b.n	8009a44 <memset+0x4>

08009a50 <__utoa>:
 8009a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a52:	4c1f      	ldr	r4, [pc, #124]	; (8009ad0 <__utoa+0x80>)
 8009a54:	b08b      	sub	sp, #44	; 0x2c
 8009a56:	4605      	mov	r5, r0
 8009a58:	460b      	mov	r3, r1
 8009a5a:	466e      	mov	r6, sp
 8009a5c:	f104 0c20 	add.w	ip, r4, #32
 8009a60:	6820      	ldr	r0, [r4, #0]
 8009a62:	6861      	ldr	r1, [r4, #4]
 8009a64:	4637      	mov	r7, r6
 8009a66:	c703      	stmia	r7!, {r0, r1}
 8009a68:	3408      	adds	r4, #8
 8009a6a:	4564      	cmp	r4, ip
 8009a6c:	463e      	mov	r6, r7
 8009a6e:	d1f7      	bne.n	8009a60 <__utoa+0x10>
 8009a70:	7921      	ldrb	r1, [r4, #4]
 8009a72:	7139      	strb	r1, [r7, #4]
 8009a74:	1e91      	subs	r1, r2, #2
 8009a76:	6820      	ldr	r0, [r4, #0]
 8009a78:	6038      	str	r0, [r7, #0]
 8009a7a:	2922      	cmp	r1, #34	; 0x22
 8009a7c:	f04f 0100 	mov.w	r1, #0
 8009a80:	d904      	bls.n	8009a8c <__utoa+0x3c>
 8009a82:	7019      	strb	r1, [r3, #0]
 8009a84:	460b      	mov	r3, r1
 8009a86:	4618      	mov	r0, r3
 8009a88:	b00b      	add	sp, #44	; 0x2c
 8009a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a8c:	1e58      	subs	r0, r3, #1
 8009a8e:	4684      	mov	ip, r0
 8009a90:	fbb5 f7f2 	udiv	r7, r5, r2
 8009a94:	fb02 5617 	mls	r6, r2, r7, r5
 8009a98:	3628      	adds	r6, #40	; 0x28
 8009a9a:	446e      	add	r6, sp
 8009a9c:	460c      	mov	r4, r1
 8009a9e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8009aa2:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8009aa6:	462e      	mov	r6, r5
 8009aa8:	42b2      	cmp	r2, r6
 8009aaa:	f101 0101 	add.w	r1, r1, #1
 8009aae:	463d      	mov	r5, r7
 8009ab0:	d9ee      	bls.n	8009a90 <__utoa+0x40>
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	545a      	strb	r2, [r3, r1]
 8009ab6:	1919      	adds	r1, r3, r4
 8009ab8:	1aa5      	subs	r5, r4, r2
 8009aba:	42aa      	cmp	r2, r5
 8009abc:	dae3      	bge.n	8009a86 <__utoa+0x36>
 8009abe:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8009ac2:	780e      	ldrb	r6, [r1, #0]
 8009ac4:	7006      	strb	r6, [r0, #0]
 8009ac6:	3201      	adds	r2, #1
 8009ac8:	f801 5901 	strb.w	r5, [r1], #-1
 8009acc:	e7f4      	b.n	8009ab8 <__utoa+0x68>
 8009ace:	bf00      	nop
 8009ad0:	08009b54 	.word	0x08009b54

08009ad4 <_init>:
 8009ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ad6:	bf00      	nop
 8009ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ada:	bc08      	pop	{r3}
 8009adc:	469e      	mov	lr, r3
 8009ade:	4770      	bx	lr

08009ae0 <_fini>:
 8009ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ae2:	bf00      	nop
 8009ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ae6:	bc08      	pop	{r3}
 8009ae8:	469e      	mov	lr, r3
 8009aea:	4770      	bx	lr
